0000              1   ; This program shows how to read many push buttons using just one analog input.
0000              2   ; The idea is to make a voltage divider with many resistors and the push buttons
0000              3   ; connect the diferent voltages to an analog input.  In this example we have seven push
0000              4   ; buttons.  The diagram is in this image: push_button_adc.jpg.  The common pin of all
0000              5   ; the push buttons is connected to one of the analog input pins of ADC0.  Warning:
0000              6   ; since P2.0 and P2.1 are used with the LCD we can not use those channels with ADC0.
0000              7   ; The common input for all the push buttons is AD0DAT1 which is P1.7.
0000              8   ;
0000              9   
                 -1   $MOD9351
0000              1   ;
0000              2   ;  MOD9351: Register/bit definitions for the P89LPC9351
0000              3   ;
0000              4   ;   Copyright (C) 2009-2011  Jesus Calvino-Fraga, jesuscf@gmail.com
0000              5   ;
0000              6   ;   This library is free software; you can redistribute it and/or
0000              7   ;   modify it under the terms of the GNU Lesser General Public
0000              8   ;   License as published by the Free Software Foundation; either
0000              9   ;   version 2.1 of the License, or (at your option) any later version.
0000             10   ;
0000             11   ;   This library is distributed in the hope that it will be useful,
0000             12   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             13   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             14   ;   Lesser General Public License for more details.
0000             15   ;
0000             16   ;   You should have received a copy of the GNU Lesser General Public
0000             17   ;   License along with this library; if not, write to the Free Software
0000             18   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             19   ;
0000             20    
0000             21   ACC             DATA  0E0H ; Accumulator
0000             22   ADCON0          DATA  08EH ; A/D control register 0
0000             23   ADCON1          DATA  097H ; A/D control register 1
0000             24   ADINS           DATA  0A3H ; A/D input select
0000             25   ADMODA          DATA  0C0H ; A/D mode register A
0000             26   BNDI1           BIT   0C7H
0000             27   BURST1          BIT   0C6H
0000             28   SCC1            BIT   0C5H
0000             29   SCAN1           BIT   0C4H
0000             30   BNDI0           BIT   0C3H
0000             31   BURST0          BIT   0C2H
0000             32   SCC0            BIT   0C1H
0000             33   SCAN0           BIT   0C0H
0000             34   ADMODB          DATA  0A1H ; A/D mode register B
0000             35   AD0BH           DATA  0BBH ; A/D_0 boundary high register
0000             36   AD0BL           DATA  0A6H ; A/D_0 boundary low register
0000             37   AD0DAT0         DATA  0C5H ; A/D_0 data register 0
0000             38   AD0DAT1         DATA  0C6H ; A/D_0 data register 1
0000             39   AD0DAT2         DATA  0C7H ; A/D_0 data register 2
0000             40   AD0DAT3         DATA  0F4H ; A/D_0 data register 3
0000             41   AD1BH           DATA  0C4H ; A/D_1 boundary high register
0000             42   AD1BL           DATA  0BCH ; A/D_1 boundary low register
0000             43   AD1DAT0         DATA  0D5H ; A/D_1 data register 0
0000             44   AD1DAT1         DATA  0D6H ; A/D_1 data register 1
0000             45   AD1DAT2         DATA  0D7H ; A/D_1 data register 2
0000             46   AD1DAT3         DATA  0F5H ; A/D_1 data register 3
0000             47   AUXR1           DATA  0A2H ; Auxiliary function register
0000             48   B               DATA  0F0H ; B register
0000             49   BRGR0           DATA  0BEH ; Baud rate generator 0 rate low
0000             50   BRGR1           DATA  0BFH ; Baud rate generator 0 rate high
0000             51   BRGCON          DATA  0BDH ; Baud rate generator 0 control
0000             52   CCCRA           DATA  0EAH ; Capture compare A control register
0000             53   CCCRB           DATA  0EBH ; Capture compare B control register
0000             54   CCCRC           DATA  0ECH ; Capture compare C control register
0000             55   CCCRD           DATA  0EDH ; Capture compare D control register
0000             56   CMP1            DATA  0ACH ; Comparator 1 control register
0000             57   CMP2            DATA  0ADH ; Comparator 2 control register
0000             58   DEECON          DATA  0F1H ; Data EEPROM control register
0000             59   DEEDAT          DATA  0F2H ; Data EEPROM data register
0000             60   DEEADR          DATA  0F3H ; Data EEPROM address register
0000             61   DIVM            DATA  095H ; CPU clock divide-by-M control
0000             62   DPH             DATA  083H ; Data pointer high
0000             63   DPL             DATA  082H ; Data pointer low
0000             64   FMADRH          DATA  0E7H ; Program flash address high
0000             65   FMADRL          DATA  0E6H ; Program flash address low
0000             66   FMCON           DATA  0E4H ; Program flash control Read
0000             67   FMDATA          DATA  0E5H ; Program flash data
0000             68   I2ADR           DATA  0DBH ; I2C-bus slave address register
0000             69   I2CON           DATA  0D8H ; I2C-bus control register
0000             70   I2EN            BIT   0DEH
0000             71   STA             BIT   0DDH
0000             72   STO             BIT   0DCH
0000             73   SI              BIT   0DBH
0000             74   AA              BIT   0DAH
0000             75   CRSEL           BIT   0D8H
0000             76   I2DAT           DATA  0DAH ; I2C-bus data register
0000             77   I2SCLH          DATA  0DDH ; Serial clock generator/SCL duty cycle register high
0000             78   I2SCLL          DATA  0DCH ; Serial clock generator/SCL duty cycle register low
0000             79   I2STAT          DATA  0D9H ; I2C-bus status register
0000             80   ICRAH           DATA  0ABH ; Input capture A register high
0000             81   ICRAL           DATA  0AAH ; Input capture A register low
0000             82   ICRBH           DATA  0AFH ; Input capture B register high
0000             83   ICRBL           DATA  0AEH ; Input capture B register low
0000             84   IEN0            DATA  0A8H ; Interrupt enable 0
0000             85   EA              BIT   0AFH
0000             86   EWDRT           BIT   0AEH
0000             87   EBO             BIT   0ADH
0000             88   ES              BIT   0ACH
0000             89   ESR             BIT   0ACH
0000             90   ET1             BIT   0ABH
0000             91   EX1             BIT   0AAH
0000             92   ET0             BIT   0A9H
0000             93   EX0             BIT   0A8H
0000             94   IEN1            DATA  0E8H ; Interrupt enable 1
0000             95   EADEE           BIT   0EFH
0000             96   EST             BIT   0EEH
0000             97   ECCU            BIT   0ECH
0000             98   ESPI            BIT   0EBH
0000             99   EC              BIT   0EAH
0000            100   EKBI            BIT   0E9H
0000            101   EI2C            BIT   0E8H
0000            102   IP0             DATA  0B8H ; Interrupt priority 0
0000            103   PWDRT           BIT   0BEH
0000            104   PBO             BIT   0BDH
0000            105   PS              BIT   0BCH
0000            106   PSR             BIT   0BCH
0000            107   PT1             BIT   0BBH
0000            108   PX1             BIT   0BAH
0000            109   PT0             BIT   0B9H
0000            110   PX0             BIT   0B8H
0000            111   IP0H            DATA  0B7H ; Interrupt priority 0 high
0000            112   IP1             DATA  0F8H ; Interrupt priority 1
0000            113   PADEE           BIT   0FFH
0000            114   PST             BIT   0FEH
0000            115   PCCU            BIT   0FCH
0000            116   PSPI            BIT   0FBH
0000            117   PC_             BIT   0FAH
0000            118   PKBI            BIT   0F9H
0000            119   PI2C            BIT   0F8H
0000            120   IP1H            DATA  0F7H ; Interrupt priority 1 high
0000            121   KBCON           DATA  094H ; Keypad control register
0000            122   KBMASK          DATA  086H ; Keypad interrupt mask register
0000            123   KBPATN          DATA  093H ; Keypad pattern register
0000            124   OCRAH           DATA  0EFH ; Output compare A register high
0000            125   OCRAL           DATA  0EEH ; Output compare A register low
0000            126   OCRBH           DATA  0FBH ; Output compare B register high
0000            127   OCRBL           DATA  0FAH ; Output compare B register low
0000            128   OCRCH           DATA  0FDH ; Output compare C register high
0000            129   OCRCL           DATA  0FCH ; Output compare C register low
0000            130   OCRDH           DATA  0FFH ; Output compare D register high
0000            131   OCRDL           DATA  0FEH ; Output compare D register low
0000            132   P0              DATA  080H ; Port 0
0000            133   T1              BIT   087H
0000            134   KB7             BIT   087H
0000            135   CMP_1           BIT   086H
0000            136   KB6             BIT   086H
0000            137   CMPREF          BIT   085H
0000            138   KB5             BIT   085H
0000            139   CIN1A           BIT   084H
0000            140   KB4             BIT   084H
0000            141   CIN1B           BIT   083H
0000            142   KB3             BIT   083H
0000            143   CIN2A           BIT   082H
0000            144   KB2             BIT   082H
0000            145   CIN2B           BIT   081H
0000            146   KB1             BIT   081H
0000            147   CMP_2           BIT   080H
0000            148   KB0             BIT   080H
0000            149   P1              DATA  090H ; Port 1
0000            150   OCC             BIT   097H
0000            151   OCB             BIT   096H
0000            152   RST             BIT   095H
0000            153   INT1            BIT   094H
0000            154   INT0            BIT   093H
0000            155   SDA             BIT   093H
0000            156   T0              BIT   092H
0000            157   SCL             BIT   092H
0000            158   RXD             BIT   091H
0000            159   TXD             BIT   090H
0000            160   P2              DATA  0A0H ; Port 2
0000            161   ICA             BIT   0A7H
0000            162   OCA             BIT   0A6H
0000            163   SPICLK          BIT   0A5H
0000            164   SS              BIT   0A4H
0000            165   MISO            BIT   0A3H
0000            166   MOSI            BIT   0A2H
0000            167   OCD             BIT   0A1H
0000            168   ICB             BIT   0A0H
0000            169   P3              DATA  0B0H ; Port 3
0000            170   XTAL1           BIT   0B1H
0000            171   XTAL2           BIT   0B0H
0000            172   P0M1            DATA  084H ; Port 0 output mode 1
0000            173   P0M2            DATA  085H ; Port 0 output mode 2
0000            174   P1M1            DATA  091H ; Port 1 output mode 1
0000            175   P1M2            DATA  092H ; Port 1 output mode 2
0000            176   P2M1            DATA  0A4H ; Port 2 output mode 1
0000            177   P2M2            DATA  0A5H ; Port 2 output mode 2
0000            178   P3M1            DATA  0B1H ; Port 3 output mode 1
0000            179   P3M2            DATA  0B2H ; Port 3 output mode 2
0000            180   PCON            DATA  087H ; Power control register
0000            181   PCONA           DATA  0B5H ; Power control register A
0000            182   PSW             DATA  0D0H ; Program status word
0000            183   CY              BIT   0D7H
0000            184   AC              BIT   0D6H
0000            185   F0              BIT   0D5H
0000            186   RS1             BIT   0D4H
0000            187   RS0             BIT   0D3H
0000            188   OV              BIT   0D2H
0000            189   F1              BIT   0D1H
0000            190   P               BIT   0D0H
0000            191   PT0AD           DATA  0F6H ; Port 0 digital input disable
0000            192   RSTSRC          DATA  0DFH ; Reset source register
0000            193   RTCCON          DATA  0D1H ; RTC control
0000            194   RTCH            DATA  0D2H ; RTC register high
0000            195   RTCL            DATA  0D3H ; RTC register low
0000            196   SADDR           DATA  0A9H ; Serial port address register
0000            197   SADEN           DATA  0B9H ; Serial port address enable
0000            198   SBUF            DATA  099H ; Serial Port data buffer register
0000            199   SCON            DATA  098H ; Serial port control
0000            200   SM0             BIT   09FH
0000            201   FE              BIT   09FH
0000            202   SM1             BIT   09EH
0000            203   SM2             BIT   09DH
0000            204   REN             BIT   09CH
0000            205   TB8             BIT   09BH
0000            206   RB8             BIT   09AH
0000            207   TI              BIT   099H
0000            208   RI              BIT   098H
0000            209   SSTAT           DATA  0BAH ; Serial port extended status register
0000            210   SP              DATA  081H ; Stack pointer
0000            211   SPCTL           DATA  0E2H ; SPI control register
0000            212   SPSTAT          DATA  0E1H ; SPI status register
0000            213   SPDAT           DATA  0E3H ; SPI data register
0000            214   TAMOD           DATA  08FH ; Timer 0 and 1 auxiliary mode
0000            215   TCON            DATA  088H ; Timer 0 and 1 control
0000            216   TF1             BIT   08FH
0000            217   TR1             BIT   08EH
0000            218   TF0             BIT   08DH
0000            219   TR0             BIT   08CH
0000            220   IE1             BIT   08BH
0000            221   IT1             BIT   08AH
0000            222   IE0             BIT   089H
0000            223   IT0             BIT   088H
0000            224   TCR20           DATA  0C8H ; CCU control register 0
0000            225   PLEEN           BIT   0CFH
0000            226   HLTRN           BIT   0CEH
0000            227   HLTEN           BIT   0CDH
0000            228   ALTCD           BIT   0CCH
0000            229   ALTAB           BIT   0CBH
0000            230   TDIR2           BIT   0CAH
0000            231   TMOD21          BIT   0C9H
0000            232   TMOD20          BIT   0C8H
0000            233   TCR21           DATA  0F9H ; CCU control register 1
0000            234   TH0             DATA  08CH ; Timer 0 high
0000            235   TH1             DATA  08DH ; Timer 1 high
0000            236   TH2             DATA  0CDH ; CCU timer high
0000            237   TICR2           DATA  0C9H ; CCU interrupt control register
0000            238   TIFR2           DATA  0E9H ; CCU interrupt flag register
0000            239   TISE2           DATA  0DEH ; CCU interrupt status encode register
0000            240   TL0             DATA  08AH ; Timer 0 low
0000            241   TL1             DATA  08BH ; Timer 1 low
0000            242   TL2             DATA  0CCH ; CCU timer low
0000            243   TMOD            DATA  089H ; Timer 0 and 1 mode
0000            244   TOR2H           DATA  0CFH ; CCU reload register high
0000            245   TOR2L           DATA  0CEH ; CCU reload register low
0000            246   TPCR2H          DATA  0CBH ; Prescaler control register high
0000            247   TPCR2L          DATA  0CAH ; Prescaler control register low
0000            248   TRIM            DATA  096H ; Internal oscillator trim register
0000            249   WDCON           DATA  0A7H ; Watchdog control register
0000            250   WDL             DATA  0C1H ; Watchdog load
0000            251   WFEED1          DATA  0C2H ; Watchdog feed 1
0000            252   WFEED2          DATA  0C3H ; Watchdog feed 2
0000            253   BODCFG          XDATA 0FFC8H ; BOD configuration register
0000            254   CLKCON          XDATA 0FFDEH ; CLOCK Control register
0000            255   PGACON1         XDATA 0FFE1H ; PGA1 control register
0000            256   PGACON1B        XDATA 0FFE4H ; PGA1 control register B
0000            257   PGA1TRIM8X16X   XDATA 0FFE3H ; PGA1 trim register
0000            258   PGA1TRIM2X4X    XDATA 0FFE2H ; PGA1 trim register
0000            259   PGACON0         XDATA 0FFCAH ; PGA0 control register
0000            260   PGACON0B        XDATA 0FFCEH ; PGA0 control register B
0000            261   PGA0TRIM8X16X   XDATA 0FFCDH ; PGA0 trim register
0000            262   PGA0TRIM2X4X    XDATA 0FFCCH ; PGA0 trim register
0000            263   RTCDATH         XDATA 0FFBFH ; Real-time clock data register high
0000            264   RTCDATL         XDATA 0FFBEH ; Real-time clock data register low
0000             11   
0000             12   XTAL EQU 7373000
0000             13   BAUD EQU 115200
0000             14   BRVAL EQU ((XTAL/BAUD)-16)
0000             15   
0000             16            CSEG at 0x0000
0000 0202E5      17            ljmp    MainProgram
0003             18   
0000             19   bseg
0000             20   PB0: dbit 1 ; Variable to store the state of pushbutton 0 after calling ADC_to_PB below
0001             21   PB1: dbit 1 ; Variable to store the state of pushbutton 1 after calling ADC_to_PB below
0002             22   PB2: dbit 1 ; Variable to store the state of pushbutton 2 after calling ADC_to_PB below
0003             23   PB3: dbit 1 ; Variable to store the state of pushbutton 3 after calling ADC_to_PB below
0004             24   PB4: dbit 1 ; Variable to store the state of pushbutton 4 after calling ADC_to_PB below
0005             25   PB5: dbit 1 ; Variable to store the state of pushbutton 5 after calling ADC_to_PB below
0006             26   PB6: dbit 1 ; Variable to store the state of pushbutton 6 after calling ADC_to_PB below
0007             27   
0007             28   PB13: dbit 1 ; Variable to store the state of pushbutton 0 after calling ADC_to_PB below
0008             29   PB12: dbit 1 ; Variable to store the state of pushbutton 1 after calling ADC_to_PB below
0009             30   PB11: dbit 1 ; Variable to store the state of pushbutton 2 after calling ADC_to_PB below
000A             31   PB10: dbit 1 ; Variable to store the state of pushbutton 3 after calling ADC_to_PB below
000B             32   PB9: dbit 1 ; Variable to store the state of pushbutton 4 after calling ADC_to_PB below
000C             33   PB8: dbit 1 ; Variable to store the state of pushbutton 5 after calling ADC_to_PB below
000D             34   PB7: dbit 1 ; Variable to store the state of pushbutton 6 after calling ADC_to_PB below
0003             35   cseg
0003             36   ; These 'equ' must match the wiring between the microcontroller and the LCD!
0003             37   LCD_RS equ P0.5
0003             38   
0003             39   LCD_RW equ P0.6
0003             40   LCD_E  equ P0.7
0003             41   LCD_D4 equ P3.1
0003             42   LCD_D5 equ P1.2
0003             43   LCD_D6 equ P1.3
0003             44   LCD_D7 equ P1.4
                 46   	$LIST
00B8             48   
00B8             49   putchar:
00B8 109902      50            jbc     TI,putchar_L1
00BB 80FB        51            sjmp putchar
00BD             52   putchar_L1:
00BD F599        53            mov     SBUF,a
00BF 22          54            ret
00C0             55            
00C0             56   getchar:
00C0 109802      57            jbc     RI,getchar_L1
00C3 80FB        58            sjmp getchar
00C5             59   getchar_L1:
00C5 E599        60            mov     a,SBUF
00C7 22          61            ret
00C8             62   
00C8             63   Wait1S:
00C8 7A28        64            mov R2, #40
00CA 79FA        65   M3:      mov R1, #250
00CC 78B8        66   M2:      mov R0, #184
00CE D8FE        67   M1:      djnz R0, M1 ; 2 machine cycles-> 2*0.27126us*184=100us
00D0 D9FA        68            djnz R1, M2 ; 100us*250=0.025s
00D2 DAF6        69            djnz R2, M3 ; 0.025s*40=1s
00D4 22          70            ret
00D5             71   
00D5             72   InitSerialPort:
00D5 75BD00      73            mov     BRGCON,#0x00
00D8 75BF00      74            mov     BRGR1,#high(BRVAL)
00DB 75BE30      75            mov     BRGR0,#low(BRVAL)
00DE 75BD03      76            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
00E1 759852      77            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
00E4 759100      78            mov     P1M1,#0x00 ; Enable pins RxD and TXD
00E7 759200      79            mov     P1M2,#0x00 ; Enable pins RxD and TXD
00EA 22          80            ret
00EB             81   
00EB             82   InitADC0:
00EB             83            ; ADC0_0 is connected to P1.7
00EB             84            ; ADC0_1 is connected to P0.0
00EB             85       ; Configure pins P1.7 and P0.0  as inputs
00EB 438401      86       orl P0M1, #00000001b
00EE 5385FE      87       anl P0M2, #11111110b
00F1 439180      88       orl P1M1, #10000000b
00F4 53927F      89       anl P1M2, #01111111b
00F7             90       
00F7             91            ; Setup ADC0
00F7 D2C2        92            setb BURST0 ; Autoscan continuos conversion mode
00F9 75A120      93            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
00FC 75A303      94            mov     ADINS,#0x03 ; Select two channels of ADC0 for conversion
00FF 758E05      95            mov     ADCON0,#0x05 ; Enable the converter and start immediately
0102             96            ; Wait for first conversion to complete
0102             97   InitADC0_L1:
0102 E58E        98            mov     a,ADCON0
0104 30E3FB      99            jnb     acc.3,InitADC0_L1
0107 22         100            ret
0108            101   
0108 30313233   102   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
0118            103   
0118            104   SendHex:
0118 7430       105            mov a, #'0'
011A 1200B8     106            lcall putchar
011D 7478       107            mov a, #'x'
011F 1200B8     108            lcall putchar
0122 900108     109            mov dptr, #HexAscii 
0125 E5F0       110            mov a, b
0127 C4         111            swap a
0128 540F       112            anl a, #0xf
012A 93         113            movc a, @a+dptr
012B 1200B8     114            lcall putchar
012E E5F0       115            mov a, b
0130 540F       116            anl a, #0xf
0132 93         117            movc a, @a+dptr
0133 1200B8     118            lcall putchar
0136 7420       119            mov a, #' '
0138 1200B8     120            lcall putchar
013B 22         121            ret
013C            122            
013C            123   SendString:
013C E4         124       clr a
013D 93         125       movc a, @a+dptr
013E 6006       126       jz SendString_L1
0140 1200B8     127       lcall putchar
0143 A3         128       inc dptr
0144 80F6       129       sjmp SendString  
0146            130   SendString_L1:
0146 22         131            ret
0147            132   
0147            133   ADC_to_PB:
0147 D206       134            setb PB6
0149 D205       135            setb PB5
014B D204       136            setb PB4
014D D203       137            setb PB3
014F D202       138            setb PB2
0151 D201       139            setb PB1
0153 D200       140            setb PB0
0155            141            ; Check PB6
0155 C3         142            clr c
0156 E5C5       143            mov a, AD0DAT0
0158 94A3       144            subb a, #(173-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
015A 4003       145            jc ADC_to_PB_L6
015C C206       146            clr PB6
015E 22         147            ret
015F            148   ADC_to_PB_L6:
015F            149            ; Check PB5
015F C3         150            clr c
0160 E5C5       151            mov a, AD0DAT0
0162 9491       152            subb a, #(155-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
0164 4003       153            jc ADC_to_PB_L5
0166 C205       154            clr PB5
0168 22         155            ret
0169            156   ADC_to_PB_L5:
0169            157            ; Check PB4
0169 C3         158            clr c
016A E5C5       159            mov a, AD0DAT0
016C 9478       160            subb a, #(130-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
016E 4003       161            jc ADC_to_PB_L4
0170 C204       162            clr PB4
0172 22         163            ret
0173            164   ADC_to_PB_L4:
0173            165            ; Check PB3
0173 C3         166            clr c
0174 E5C5       167            mov a, AD0DAT0
0176 9462       168            subb a, #(108-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
0178 4003       169            jc ADC_to_PB_L3
017A C203       170            clr PB3
017C 22         171            ret
017D            172   ADC_to_PB_L3:
017D            173            ; Check PB2
017D C3         174            clr c
017E E5C5       175            mov a, AD0DAT0
0180 9444       176            subb a, #(78-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
0182 4003       177            jc ADC_to_PB_L2
0184 C202       178            clr PB2
0186 22         179            ret
0187            180   ADC_to_PB_L2:
0187            181            ; Check PB1
0187 C3         182            clr c
0188 E5C5       183            mov a, AD0DAT0
018A 9433       184            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
018C 4003       185            jc ADC_to_PB_L1
018E C201       186            clr PB1
0190 22         187            ret
0191            188   ADC_to_PB_L1:
0191            189            ; Check PB1
0191 C3         190            clr c
0192 E5C5       191            mov a, AD0DAT0
0194 9413       192            subb a, #(29-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
0196 4003       193            jc ADC_to_PB_L0
0198 C200       194            clr PB0
019A 22         195            ret
019B            196   ADC_to_PB_L0:
019B            197            ; No pusbutton pressed  
019B 22         198            ret
019C            199   
019C            200   ADC_to_PB_1:
019C D207       201            setb PB13
019E D208       202            setb PB12
01A0 D209       203            setb PB11
01A2 D20A       204            setb PB10
01A4 D20B       205            setb PB9
01A6 D20C       206            setb PB8
01A8 D20D       207            setb PB7
01AA            208            ; Check PB6
01AA C3         209            clr c
01AB E5C6       210            mov a, AD0DAT1
01AD 94C4       211            subb a, #(206-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
01AF 4003       212            jc ADC_to_PB_L6_2
01B1 C207       213            clr PB13
01B3 22         214            ret
01B4            215   ADC_to_PB_L6_2:
01B4            216            ; Check PB5
01B4 C3         217            clr c
01B5 E5C6       218            mov a, AD0DAT1
01B7 94AF       219            subb a, #(185-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
01B9 4003       220            jc ADC_to_PB_L5_2
01BB C208       221            clr PB12
01BD 22         222            ret
01BE            223   ADC_to_PB_L5_2:
01BE            224            ; Check PB4
01BE C3         225            clr c
01BF E5C6       226            mov a, AD0DAT1
01C1 9490       227            subb a, #(154-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
01C3 4003       228            jc ADC_to_PB_L4_2
01C5 C209       229            clr PB11
01C7 22         230            ret
01C8            231   ADC_to_PB_L4_2:
01C8            232            ; Check PB3
01C8 C3         233            clr c
01C9 E5C6       234            mov a, AD0DAT1
01CB 9471       235            subb a, #(123-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
01CD 4003       236            jc ADC_to_PB_L3_2
01CF C20A       237            clr PB10
01D1 22         238            ret
01D2            239   ADC_to_PB_L3_2:
01D2            240            ; Check PB2
01D2 C3         241            clr c
01D3 E5C6       242            mov a, AD0DAT1
01D5 9452       243            subb a, #(92-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
01D7 4003       244            jc ADC_to_PB_L2_2
01D9 C20B       245            clr PB9
01DB 22         246            ret
01DC            247   ADC_to_PB_L2_2:
01DC            248            ; Check PB1
01DC C3         249            clr c
01DD E5C6       250            mov a, AD0DAT1
01DF 9433       251            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
01E1 4003       252            jc ADC_to_PB_L1_2
01E3 C20C       253            clr PB8
01E5 22         254            ret
01E6            255   ADC_to_PB_L1_2:
01E6            256            ; Check PB1
01E6 C3         257            clr c
01E7 E5C6       258            mov a, AD0DAT1
01E9 9414       259            subb a, #(30-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
01EB 4003       260            jc ADC_to_PB_L01
01ED C20D       261            clr PB7
01EF 22         262            ret
01F0            263   ADC_to_PB_L01:
01F0            264            ; No pusbutton pressed  
01F0 22         265            ret
01F1            266   Display_PushButtons_ADC_1:
01F1 C0E0       267            push acc
01F3 7409       267            mov a, #9
01F5 14         267            dec a
01F6 12009B     267            lcall ?Set_Cursor_2 ; Select column and row
01F9 D0E0       267            pop acc
01FB 7430       268            mov a, #'0'
01FD A207       269            mov c, PB13
01FF 3400       270            addc a, #0
0201 120051     271       lcall ?WriteData     
0204 7430       272            mov a, #'0'
0206 A208       273            mov c, PB12
0208 3400       274            addc a, #0
020A 120051     275       lcall ?WriteData     
020D 7430       276            mov a, #'0'
020F A209       277            mov c, PB11
0211 3400       278            addc a, #0
0213 120051     279       lcall ?WriteData     
0216 7430       280            mov a, #'0'
0218 A20A       281            mov c, PB10
021A 3400       282            addc a, #0
021C 120051     283       lcall ?WriteData     
021F 7430       284            mov a, #'0'
0221 A20B       285            mov c, PB9
0223 3400       286            addc a, #0
0225 120051     287       lcall ?WriteData     
0228 7430       288            mov a, #'0'
022A A20C       289            mov c, PB8
022C 3400       290            addc a, #0
022E 120051     291       lcall ?WriteData     
0231 7430       292            mov a, #'0'
0233 A20D       293            mov c, PB7
0235 3400       294            addc a, #0
0237 120051     295       lcall ?WriteData     
023A 22         296            ret
023B            297            
023B            298   Display_PushButtons_ADC:
023B C0E0       299            push acc
023D 7401       299            mov a, #1
023F 14         299            dec a
0240 12009B     299            lcall ?Set_Cursor_2 ; Select column and row
0243 D0E0       299            pop acc
0245 7430       300            mov a, #'0'
0247 A206       301            mov c, PB6
0249 3400       302            addc a, #0
024B 120051     303       lcall ?WriteData     
024E 7430       304            mov a, #'0'
0250 A205       305            mov c, PB5
0252 3400       306            addc a, #0
0254 120051     307       lcall ?WriteData     
0257 7430       308            mov a, #'0'
0259 A204       309            mov c, PB4
025B 3400       310            addc a, #0
025D 120051     311       lcall ?WriteData     
0260 7430       312            mov a, #'0'
0262 A203       313            mov c, PB3
0264 3400       314            addc a, #0
0266 120051     315       lcall ?WriteData     
0269 7430       316            mov a, #'0'
026B A202       317            mov c, PB2
026D 3400       318            addc a, #0
026F 120051     319       lcall ?WriteData     
0272 7430       320            mov a, #'0'
0274 A201       321            mov c, PB1
0276 3400       322            addc a, #0
0278 120051     323       lcall ?WriteData     
027B 7430       324            mov a, #'0'
027D A200       325            mov c, PB0
027F 3400       326            addc a, #0
0281 120051     327       lcall ?WriteData     
0284 22         328            ret
0285            329   
0285 41444330   330   Title: db 'ADC0 push buttons', 0
     20707573
     68206275
     74746F6E
     7300
0297 0D0A4144   331   InitialMessage: db '\r\nADC0 push buttons.  The push buttons voltage divider is connected to P1.7\r\n', 0
     43302070
     75736820
     62757474
     6F6E732E
     20205468
     65207075
     73682062
     7574746F
     6E732076
     6F6C7461
     67652064
     69766964
     65722069
     7320636F
     6E6E6563
     74656420
     746F2050
     312E370D
     0A00
02E5            332            
02E5            333   MainProgram:
02E5 75817F     334       mov SP, #0x7F
02E8            335   
02E8            336       ; Configure all the ports in bidirectional mode:
02E8 758400     337       mov P0M1, #00H
02EB 758500     338       mov P0M2, #00H
02EE 759100     339       mov P1M1, #00H
02F1 759200     340       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1kohm pull-up resistors!
02F4 75A400     341       mov P2M1, #00H
02F7 75A500     342       mov P2M2, #00H
02FA 75B100     343       mov P3M1, #00H
02FD 75B200     344       mov P3M2, #00H
0300            345            
0300 1200D5     346            lcall InitSerialPort
0303 1200EB     347            lcall InitADC0
0306            348            
0306 12005B     349       lcall LCD_4BIT
0309            350       ; For convenience a few handy macros are included in 'LCD_4bit_LPC9351.inc':
0309 C0E0       351            push acc
030B 7401       351            mov a, #1
030D 14         351            dec a
030E 12009D     351            lcall ?Set_Cursor_1 ; Select column and row
0311 D0E0       351            pop acc
0313 C083       352            push dph
0315 C082       352            push dpl
0317 C0E0       352            push acc
0319 900285     352            mov dptr, #Title
031C 120090     352            lcall ?Send_Constant_String
031F D0E0       352            pop acc
0321 D082       352            pop dpl
0323 D083       352            pop dph
0325            353   
0325 1200C8     354            lcall Wait1S ; Wait a bit so PUTTy has a chance to start
0328 900297     355            mov dptr, #InitialMessage
032B 12013C     356            lcall SendString
032E            357   
032E            358   forever_loop:
032E            359       ; Send the conversion results via the serial port to putty.
032E 740D       360            mov a, #'\r' ; move cursor all the way to the left
0330 1200B8     361       lcall putchar
0333            362       ; Display converted value from P0.0
0333 85C5F0     363            mov     b, AD0DAT0
0336 120118     364            lcall SendHex
0339            365       ; Display converted value from P1.7
0339 85C6F0     366            mov     b, AD0DAT1
033C 120118     367            lcall SendHex
033F            368            
033F 120147     369            lcall ADC_to_PB
0342 12023B     370            lcall Display_PushButtons_ADC
0345 12019C     371            lcall ADC_to_PB_1
0348 1201F1     372            lcall Display_PushButtons_ADC_1
034B            373            ;lcall Wait1S
034B            374            
034B 80E1       375            sjmp forever_loop
034D            376   
034D            377   end
