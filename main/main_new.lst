                  2   $LIST
0000              4   
0000              5   ;-------------------;
0000              6   ;    Const Define   ;
0000              7   ;-------------------; 
0000              8   XTAL EQU 7373000
0000              9   BAUD EQU 115200
0000             10   BRVAL EQU ((XTAL/BAUD)-16)
0000             11   
0000             12   CCU_RATE      EQU 22050
0000             13   CCU_RELOAD    EQU ((65536-((XTAL/(2*CCU_RATE)))))
0000             14   
0000             15   ;TIMER0_RATE   EQU 4096    ; 4096Hz
0000             16   ;TIMER0_RELOAD EQU ((65536-(XTAL/(2*TIMER0_RATE))))
0000             17   TIMER1_RATE   EQU 100     ; 1000Hz, for a timer tick of 1ms
0000             18   TIMER1_RELOAD EQU ((65536-(XTAL/(2*TIMER1_RATE))))
0000             19   QUITTIME      EQU 60
0000             20   QUITTEMP      EQU 50
0000             21   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             22   
0000             23   number_off_set EQU 17200 ;the distance between each number
0000             24   ;number start at ff
0000             25   
0000             26   ;starting addressed of different sound tracks
0000             27   decimal_start  EQU 360000
0000             28   decimal_off_set EQU 24100
0000             29   decimal_playtime EQU 50000
0000             30   
0000             31   special_dec_start EQU 174000 ;numbers from 10 to 19
0000             32   special_off_set EQU 21500
0000             33   special_playtime EQU 21500;19000
0000             34   
0000             35   hundreds_start EQU 563000
0000             36   hundreds_off_set EQU 36000
0000             37   
0000             38   current_temp_is_start EQU 674000
0000             39   current_temp_playtime EQU 35000
0000             40   
0000             41   degree_start EQU 710000
0000             42   degree_playtime EQU 11018
0000             43   
0000             44   celsius_start EQU 732236
0000             45   celsius_playtime EQU 17000
0000             46   
0000             47   current_process_is_start EQU 757000
0000             48   current_process_is_playtime EQU 27000
0000             49            
0000             50   ramp_to_soak_start EQU 790000
0000             51   ramp_to_soak_playtime EQU 25000
0000             52   
0000             53   preheat_and_soak_start EQU 822000
0000             54   preheat_and_soak_playtime EQU 27000
0000             55   
0000             56   ramp_to_peak_start EQU 857000
0000             57   ramp_to_peak_playtime EQU 19000
0000             58   
0000             59   reflow_start EQU 885000
0000             60   reflow_playtime EQU 15000
0000             61   
0000             62   cooling_start EQU 906000
0000             63   cooling_playtime EQU 14000
0000             64   ;-------------------;
0000             65   ;    Ports Define   ;
0000             66   ;-------------------; 
0000             67   ;ADC01 equ P0.0; Read Room Temperature
0000             68   LCD_RS equ P0.1
0000             69   LCD_RW equ P0.2
0000             70   LCD_E  equ P0.3
0000             71   ;Soundout  P0.4
0000             72   LCD_D4 equ P0.5
0000             73   LCD_D5 equ P0.6
0000             74   LCD_D6 equ P0.7
0000             75   LCD_D7 equ P3.0
0000             76   ;          P3.1
0000             77   ;          P1.2
0000             78   Start  equ P1.3
0000             79   Stop   equ P1.4
0000             80   LED    equ P1.6
0000             81   ;ADC00 equ P1.7; Read Oven Temperature
0000             82   ;ADC03 equ P2.0; Read Keyboard1
0000             83   ;ADC02 equ P2.1; Read Keyboard0
0000             84   ;MOSI  equ P2.2
0000             85   ;MISO  equ P2.3
0000             86   FLASH_CE EQU P2.4
0000             87   ;SPICK equ P2.5
0000             88   ;WAVEOUT   P2.6
0000             89   OVEN   equ P2.7
0000             90   
0000             91   ;------------------------;
0000             92   ;    Interrupt Vectors   ;
0000             93   ;------------------------; 
0000             94   ; Reset vector
0000             95   org 0x0000
0000 020C62      96       ljmp MainProgram
0003             97   
0003             98   ; External interrupt 0 vector, start
0003             99   org 0x0003
0003 020DF9     100            ljmp EI0_ISR
0006            101   
0006            102   ; Timer/Counter 0 overflow interrupt vector
000B            103   org 0x000B
000B 32         104            reti
000C            105   
000C            106   ; External interrupt 1 vector, stop
0013            107   org 0x0013
0013 020E09     108            ljmp EI1_ISR
0016            109   
0016            110   ; Timer/Counter 1 overflow interrupt vector
001B            111   org 0x001B
001B 020DCC     112            ljmp Timer1_ISR
001E            113   
001E            114   ; Serial port receive/transmit interrupt vector
0023            115   org 0x0023 
0023 32         116            reti
0024            117   
0024            118   ; CCU interrupt vector
005B            119   org 0x005b 
005B 02077D     120            ljmp CCU_ISR
005E            121   
005E            122   ;-----------------------;
005E            123   ;    Variables Define   ;
005E            124   ;-----------------------; 
005E            125   ;Variable_name: ds n
0030            126   dseg at 0x30
0030            127       Count10ms:    ds 1 ; Used to determine when half second has passed
0031            128       Time_Global:  ds 2 ; to store the time of whole process
0033            129       Time_Counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0034            130   
0034            131       FSM0_State: ds 1
0035            132       FSM1_State: ds 1
0036            133   
0036            134       Profile_Num: ds 1
0037            135   
0037            136       TEMP_SOAK:  ds 4
003B            137       TIME_SOAK:  ds 4
003F            138       TEMP_RFLW:  ds 4
0043            139       TIME_RFLW:  ds 4
0047            140       TEMP_SAFE:  ds 4
004B            141       Current_Room_Temp: ds 4
004F            142            Current_Oven_Temp: ds 4
0053            143       bcd_bitnumber: ds 1
0054            144   
0054            145       individual_offest: ds 1
0055            146   
0055            147       NEW_BCD:    ds 2    ; 3 digit BCD used to store current entered number
0057            148       ;for math32.inc
0057            149       x: ds 4
005B            150       y: ds 4
005F            151       bcd: ds 5
0064            152       Count5s: ds 1
0065            153       ;z
0065            154       w:   ds 3 ; 24-bit play counter.  Decremented in CCU ISR.
0068            155            number: ds 1;
0069            156       digits: ds 1;
006A            157            tenth: ds 1;
006B            158       speak_state:       ds 1;
006C            159       ;key
006C            160       keyin: ds 1
006D            161   
006D            162   
006D            163   ;-------------------;
006D            164   ;    Flags Define   ;
006D            165   ;-------------------; 
006D            166   ;Flag_name: dbit 1
0000            167   bseg
0000            168       FSM0_State_Changed:  dbit 1
0001            169       Main_State:          dbit 1 ; 0 for setting, 1 for reflowing
0002            170       ;for math32.inc
0002            171       mf: dbit 1
0003            172       enable_time_global: dbit 1
0004            173       half_seconds_flag: dbit 1 ; 500ms in double rate mode
0005            174           nodigit: dbit 1 ; if playing from 10 to 19 then we don't need to
0006            175                       ;play the last digit
0006            176            skiphundred: dbit 1
0007            177            skiptenth: dbit 1
0008            178       speak_enable: dbit 1
0009            179   ;-----------------------;
0009            180   ;     Include Files     ;
0009            181   ;-----------------------; 
0009            182   ;$NOLIST
                 -1       $include(lcd_4bit.inc) 
005E              1   cseg
005E              2   
005E 30313233     3   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
006E 30313233     4   hex: db '0123456789abcdef',0
     34353637
     38396162
     63646566
     00
007F              5   
007F              6   ;LCD                '1234567890123456'
007F 57454C43     7   WELCOME1:        db 'WELCOME!        '   ,0
     4F4D4521
     20202020
     20202020
     00
0090 53757065     8   WELCOME2:        db 'Super Reflow!   '   ,0
     72205265
     666C6F77
     21202020
     00
00A1 53657474     9   MAIN_FACE1:      db 'Setting: Prof   '   ,0
     696E673A
     2050726F
     66202020
     00
00B2 53746172    10   MAIN_FACE2: db 'Start       Stop'   ,0
     74202020
     20202020
     53746F70
     00
00C3 53544D50    11   SETTING1:        db 'STMP:   STM:   s'   ,0
     3A202020
     53544D3A
     20202073
     00
00D4 52544D50    12   SETTING2:   db 'RTMP:   RTM:   s'   ,0
     3A202020
     52544D3A
     20202073
     00
00E5 4F4C443A    13   MODIFY_DOWN:db 'OLD:    NEW:    '   ,0
     20202020
     4E45573A
     20202020
     00
00F6 4D4F4449    14   MODIFY1:         db 'MODIFY:TEMP_SOAK'   ,0
     46593A54
     454D505F
     534F414B
     00
0107 4D4F4449    15   MODIFY2:         db 'MODIFY:TIME_SOAK'   ,0
     46593A54
     494D455F
     534F414B
     00
0118 4D4F4449    16   MODIFY3:         db 'MODIFY:TEMP_RFLW'   ,0
     46593A54
     454D505F
     52464C57
     00
0129 4D4F4449    17   MODIFY4:         db 'MODIFY:TIME_RFLW'   ,0
     46593A54
     494D455F
     52464C57
     00
013A 4D4F4449    18   MODIFY5:    db 'MODIFY:SAFE'   ,0
     46593A53
     41464500
0146 54454D50    19   WORKING:    db 'TEMP:   TIME:   '   ,0
     3A202020
     54494D45
     3A202020
     00
0157 53544D50    20   STEP1:           db 'STMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
0168 53544D3A    21   STEP2:      db 'STM:   s SOAKING'   ,0
     20202073
     20534F41
     4B494E47
     00
0179 52544D50    22   STEP3:      db 'RTMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
018A 52544D3A    23   STEP4:      db 'RTM:   s REFLOW '   ,0
     20202073
     20524546
     4C4F5720
     00
019B 5346543A    24   STEP5:      db 'SFT:     COOLING'   ,0
     20202020
     20434F4F
     4C494E47
     00
01AC 20202020    25   STEP6:      db '         FINISH '   ,0
     20202020
     2046494E
     49534820
     00
01BD 4572726F    26   WARNING1:   db 'Error Warning!  '   ,0
     72205761
     726E696E
     67212020
     00
01CE 54454D50    27   WARNING2:   db 'TEMP Sensing ERR'   ,0
     2053656E
     73696E67
     20455252
     00
01DF             28   ;---------------------------------;
01DF             29   ;           Basic Macros          ;
01DF             30   ;---------------------------------;
                 31   LCD_Initailize mac
                 32   	lcall LCD_4BIT
                 33   endmac
01DF             34   
                 35   LCD_WriteData mac
                 36   	mov a, %0
                 37   	lcall ?LCD_WriteData
                 38   endmac
01DF             39            
                 40   LCD_WriteCommand mac
                 41   	mov a, %0
                 42   	lcall ?LCD_WriteCommand
                 43   endmac
01DF             44   
                 45   LCD_Send_Constant_String mac
                 46   	push dph
                 47   	push dpl
                 48   	push acc
                 49   	mov dptr, %0
                 50   	lcall ?Send_Constant_String
                 51   	pop acc
                 52   	pop dpl
                 53   	pop dph
                 54   endmac
01DF             55   
                 56   LCD_Set_Cursor mac
                 57   	push acc
                 58   	mov a, #%1
                 59   	dec a
                 60   	lcall ?Set_Cursor_%0 ; Select column and row
                 61   	pop acc
                 62   endmac
01DF             63   
                 64   LCD_Display_BCD mac
                 65   	push ar0
                 66   	mov r0, %0
                 67   	lcall ?Display_BCD
                 68   	pop ar0
                 69   endmac
01DF             70   
                 71   LCD_Display_NUM mac
                 72   	push ar0
                 73   	mov r0, %0
                 74   	lcall ?Display_NUM
                 75   	pop ar0
                 76   endmac
01DF             77   
                 78   LCD_Display_Char mac
                 79   	push acc
                 80   	mov a, %0
                 81   	lcall ?LCD_WriteData
                 82   	pop acc
                 83   endmac
01DF             84   
                 85   Wait_Milli_Seconds mac
                 86   	push AR2
                 87   	mov R2, %0
                 88   	lcall ?Wait_Milli_Seconds
                 89   	pop AR2
                 90   endmac
01DF             91   
01DF             92   ;---------------------------------;
01DF             93   ;         Interface Macros        ;
01DF             94   ;---------------------------------;
01DF             95   
                 96   LCD_INTERFACE_WELCOME mac
                 97   	LCD_Set_Cursor(1,1)
                 98   	LCD_Send_Constant_String(#WELCOME1)
                 99   	LCD_Set_Cursor(2,1)
                100   	LCD_Send_Constant_String(#WELCOME2)
                101   endmac
01DF            102   
                103   LCD_INTERFACE_MAIN mac
                104   	LCD_Set_Cursor(1,1)
                105   	LCD_Send_Constant_String(#MAIN_FACE1)
                106   	LCD_Set_Cursor(2,1)
                107   	LCD_Send_Constant_String(#MAIN_FACE2)
                108   	LCD_Set_Cursor(1,15); Profile number
                109   	LCD_Display_BCD(Profile_Num)
                110   endmac
01DF            112   
                113   LCD_INTERFACE_SETTING mac
                114   	LCD_Set_Cursor(1,1)
                115   	LCD_Send_Constant_String(#SETTING1)
                116   	LCD_Set_Cursor(2,1)
                117   	LCD_Send_Constant_String(#SETTING2)
                118   endmac
01DF            119   
                120   LCD_INTERFACE_MODIFY1 mac
                121   	LCD_Set_Cursor(1,1)
                122   	LCD_Send_Constant_String(#MODIFY1)
                123   	LCD_Set_Cursor(2,1)
                124   	LCD_Send_Constant_String(#MODIFY_DOWN)
                125   endmac
01DF            126   
                127   LCD_INTERFACE_MODIFY2 mac
                128   	LCD_Set_Cursor(1,1)
                129   	LCD_Send_Constant_String(#MODIFY2)
                130   	LCD_Set_Cursor(2,1)
                131   	LCD_Send_Constant_String(#MODIFY_DOWN)
                132   endmac
01DF            133   
                134   LCD_INTERFACE_MODIFY3 mac
                135   	LCD_Set_Cursor(1,1)
                136   	LCD_Send_Constant_String(#MODIFY3)
                137   	LCD_Set_Cursor(2,1)
                138   	LCD_Send_Constant_String(#MODIFY_DOWN)
                139   endmac
01DF            140   
                141   LCD_INTERFACE_MODIFY4 mac
                142   	LCD_Set_Cursor(1,1)
                143   	LCD_Send_Constant_String(#MODIFY4)
                144   	LCD_Set_Cursor(2,1)
                145   	LCD_Send_Constant_String(#MODIFY_DOWN)
                146   endmac
01DF            147   
                148   LCD_INTERFACE_MODIFY5 mac
                149   	LCD_Set_Cursor(1,1)
                150   	LCD_Send_Constant_String(#MODIFY5)
                151   	LCD_Set_Cursor(2,1)
                152   	LCD_Send_Constant_String(#MODIFY_DOWN)
                153   endmac
01DF            154   
                155   LCD_INTERFACE_STEP1 mac
                156   	LCD_Set_Cursor(1,1)
                157   	LCD_Send_Constant_String(#WORKING)
                158   	LCD_Set_Cursor(2,1)
                159   	LCD_Send_Constant_String(#STEP1)
                160   endmac
01DF            161   
                162   LCD_INTERFACE_STEP2 mac
                163   	LCD_Set_Cursor(1,1)
                164   	LCD_Send_Constant_String(#WORKING)
                165   	LCD_Set_Cursor(2,1)
                166   	LCD_Send_Constant_String(#STEP2)
                167   endmac
01DF            168   
                169   LCD_INTERFACE_STEP3 mac
                170   	LCD_Set_Cursor(1,1)
                171   	LCD_Send_Constant_String(#WORKING)
                172   	LCD_Set_Cursor(2,1)
                173   	LCD_Send_Constant_String(#STEP3)
                174   endmac
01DF            175   
                176   LCD_INTERFACE_STEP4 mac
                177   	LCD_Set_Cursor(1,1)
                178   	LCD_Send_Constant_String(#WORKING)
                179   	LCD_Set_Cursor(2,1)
                180   	LCD_Send_Constant_String(#STEP4)
                181   endmac
01DF            182   
                183   LCD_INTERFACE_STEP5 mac
                184   	LCD_Set_Cursor(1,1)
                185   	LCD_Send_Constant_String(#WORKING)
                186   	LCD_Set_Cursor(2,1)
                187   	LCD_Send_Constant_String(#STEP5)
                188   endmac
01DF            189   
                190   LCD_INTERFACE_STEP6 mac
                191   	LCD_Set_Cursor(1,1)
                192   	LCD_Send_Constant_String(#WORKING)
                193   	LCD_Set_Cursor(2,1)
                194   	LCD_Send_Constant_String(#STEP6)
                195   endmac
01DF            196   
                197   LCD_INTERFACE_WARNING mac
                198   	LCD_Set_Cursor(1,1)
                199   	LCD_Send_Constant_String(#WARNING1)
                200   	LCD_Set_Cursor(2,1)
                201   	LCD_Send_Constant_String(#WARNING2)
                202   endmac
01DF            203   
01DF            204   
01DF            205   Wait10us:
01DF 7812       206       mov R0, #18
01E1 D8FE       207       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
01E3 22         208            ret
01E4            209   ;---------------------------------;
01E4            210   ; Wait 40 microseconds            ;
01E4            211   ;---------------------------------;
01E4            212   Wait40uSec:
01E4 C000       213            push AR0
01E6 784A       214            mov R0, #74
01E8            215   L0: 
01E8 D8FE       216            djnz R0, L0 ; 2 cycles->2*271.26ns*74=40us
01EA D000       217            pop AR0
01EC 22         218       ret
01ED            219   
01ED            220   ;---------------------------------;
01ED            221   ; Wait 500 microseconds           ;
01ED            222   ;---------------------------------;
01ED            223   WaitHalfSec:
01ED 7A28       224       mov R2, #40
01EF 79FA       225   H3: mov R1, #250
01F1 78B8       226   H2: mov R0, #184
01F3 D8FE       227   H1: djnz R0, H1 ; 2 machine cycles-> 2*0.27126us*184=100us
01F5 D9FA       228       djnz R1, H2 ; 100us*250=0.025s
01F7 DAF6       229       djnz R2, H3 ; 0.025s*20=0.5s
01F9 22         230       ret
01FA            231   
01FA            232   ;---------------------------------;
01FA            233   ; Wait 'R2' milliseconds          ;
01FA            234   ;---------------------------------;
01FA            235   ?Wait_Milli_Seconds:
01FA C000       236            push AR0
01FC C001       237            push AR1
01FE 790A       238   L3: mov R1, #10
0200 78B8       239   L2: mov R0, #184
0202 D8FE       240   L1: djnz R0, L1 ; 2 cycles->2*271.26ns*184=100us
0204 D9FA       241       djnz R1, L2 ; 100us*10=1ms
0206 DAF6       242       djnz R2, L3 ; number of millisecons to wait passed in R2
0208 D001       243       pop AR1
020A D000       244       pop AR0
020C 22         245       ret
020D            246            
020D            247   ;---------------------------------;
020D            248   ; Toggles the 'E' pin in the LCD  ;
020D            249   ;---------------------------------;
020D            250   LCD_pulse:
020D D283       251            setb LCD_E
020F 1201E4     252            lcall Wait40uSec
0212 C283       253            clr LCD_E
0214 1201E4     254       lcall Wait40uSec
0217 22         255       ret
0218            256   
0218            257   ;---------------------------------;
0218            258   ; Writes acc to LCD in 4-bit mode ;
0218            259   ;---------------------------------;
0218            260   LCD_byte:
0218            261            ; Write high 4 bits first
0218 A2E7       262            mov c, ACC.7
021A 92B0       263            mov LCD_D7, c
021C A2E6       264            mov c, ACC.6
021E 9287       265            mov LCD_D6, c
0220 A2E5       266            mov c, ACC.5
0222 9286       267            mov LCD_D5, c
0224 A2E4       268            mov c, ACC.4
0226 9285       269            mov LCD_D4, c
0228 12020D     270       lcall LCD_pulse
022B            271            ; Write low 4 bits next
022B A2E3       272            mov c, ACC.3
022D 92B0       273            mov LCD_D7, c
022F A2E2       274            mov c, ACC.2
0231 9287       275            mov LCD_D6, c
0233 A2E1       276            mov c, ACC.1
0235 9286       277            mov LCD_D5, c
0237 A2E0       278            mov c, ACC.0
0239 9285       279            mov LCD_D4, c
023B 12020D     280       lcall LCD_pulse
023E 22         281            ret
023F            282   
023F            283   ;---------------------------------;
023F            284   ; Write data to LCD               ;
023F            285   ;---------------------------------;
023F            286   ?LCD_WriteData:
023F D281       287            setb LCD_RS
0241 020218     288            ljmp LCD_byte
0244            289   
0244            290   ;---------------------------------;
0244            291   ; Write command to LCD            ;
0244            292   ;---------------------------------;
0244            293   ?LCD_WriteCommand:
0244 C281       294            clr LCD_RS
0246 020218     295            ljmp LCD_byte
0249            296   
0249            297   ;---------------------------------;
0249            298   ; Configure LCD in 4-bit mode     ;
0249            299   ;---------------------------------;
0249            300   LCD_4BIT:
0249 C283       301            clr LCD_E   ; Resting state of LCD's enable pin is zero
024B C282       302            clr LCD_RW  ; We are only writing to the LCD in this program
024D            303            
024D            304            ; After power on, let the LCD start up before initializing
024D C002       305            push AR2
024F 7A28       305            mov R2, #40
0251 1201FA     305            lcall ?Wait_Milli_Seconds
0254 D002       305            pop AR2
0256            306            
0256            307            ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
0256 7433       308            mov a, #0x33
0258 120244     308            lcall ?LCD_WriteCommand
025B 7433       309            mov a, #0x33
025D 120244     309            lcall ?LCD_WriteCommand
0260 7432       310            mov a, #0x32
0262 120244     310            lcall ?LCD_WriteCommand ; change to 4-bit mode
0265            311   
0265            312            ; Configure the LCD
0265 7428       313            mov a, #0x28
0267 120244     313            lcall ?LCD_WriteCommand
026A 740C       314            mov a, #0x0c
026C 120244     314            lcall ?LCD_WriteCommand
026F 7401       315            mov a, #0x01
0271 120244     315            lcall ?LCD_WriteCommand ;  Clear screen command (takes some time)
0274            316   
0274            317       ;Wait for the clear screen command to finish.
0274 C002       318            push AR2
0276 7A02       318            mov R2, #2
0278 1201FA     318            lcall ?Wait_Milli_Seconds
027B D002       318            pop AR2
027D 22         319       ret
027E            320   
027E            321   ;---------------------------------;
027E            322   ; Send a constant string to LCD   ;
027E            323   ;---------------------------------;
027E            324   ?Send_Constant_String:
027E E4         325       clr a
027F 93         326       movc a, @a+dptr
0280 6006       327       jz ?Send_Constant_String_Done
0282 12023F     328       lcall ?LCD_WriteData
0285 A3         329       inc dptr
0286 80F6       330       sjmp ?Send_Constant_String
0288            331   ?Send_Constant_String_Done:
0288 22         332       ret  
0289            333   
0289            334   ;---------------------------------;
0289            335   ; Set LCD cursor at row, column   ;
0289            336   ;---------------------------------;
0289            337   ?Set_Cursor_2:
0289 4440       338            orl a, #01000000B
028B            339   ?Set_Cursor_1:
028B 4480       340            orl a, #10000000B
028D 020244     341            ljmp ?LCD_WriteCommand ; Select column and row
0290            342   
0290            343   ;---------------------------------;
0290            344   ; Display a BCD number in the LCD ;
0290            345   ;---------------------------------;
0290            346   ?Display_BCD:
0290 C0E0       347            push acc
0292            348            ; Write most significant digit
0292 E8         349            mov a, r0
0293 C4         350            swap a
0294 540F       351            anl a, #0fh
0296 4430       352            orl a, #30h
0298 12023F     353            lcall ?LCD_WriteData
029B            354            ; write least significant digit
029B E8         355            mov a, r0
029C 540F       356            anl a, #0fh
029E 4430       357            orl a, #30h
02A0 12023F     358            lcall ?LCD_WriteData
02A3 D0E0       359            pop acc
02A5 22         360            ret
02A6            361   
02A6            362   ?Display_NUM:
02A6 C0E0       363            push acc
02A8 E8         364            mov a, R0
02A9 540F       365            anl a, #0fh
02AB 4430       366            orl a, #30h
02AD 12023F     367            lcall ?LCD_WriteData
02B0 D0E0       368            pop acc
02B2            369   
02B2 22         370            ret
                 -1       $include(math32.inc)
                559   $LIST
                 -1       $include(LPC9351.inc)
0523              1   cseg
0523              2   
0523              3   ;---------------------------------;
0523              4   ;           Basic Macros          ;
0523              5   ;---------------------------------;
                  6   Ports_Initialize mac
                  7       lcall Ports_Init
                  8   endmac
0523              9   
                 10   Clock_Double mac
                 11       lcall _Clock_Double
                 12   endmac
0523             13   
                 14   ADC_Initialize mac
                 15       lcall InitADC
                 16   endmac
0523             17   
0523             18   ;---------------------------------;
0523             19   ;            Functions            ;
0523             20   ;---------------------------------;
0523             21   _Clock_Double:
0523 C0E0        22       push acc
0525 90FFDE      23       mov dptr, #CLKCON
0528 E0          24       movx a, @dptr
0529 4408        25       orl a, #00001000B ; double the clock speed to 14.746MHz
052B F0          26       movx @dptr,a
052C D0E0        27       pop acc
052E 22          28       ret
052F             29   
052F             30   ;---------------------------------;
052F             31   ; Initial configuration of ports. ;
052F             32   ; After reset the default for the ;
052F             33   ; pins is 'Open Drain'.  This     ;
052F             34   ; routine changes them pins to    ;
052F             35   ; Quasi-bidirectional like in the ;
052F             36   ; original 8051.                  ;
052F             37   ; Notice that P1.2 and P1.3 are   ;
052F             38   ; always 'Open Drain'. If those   ;
052F             39   ; pins are to be used as output   ;
052F             40   ; they need a pull-up resistor.   ;
052F             41   ;---------------------------------;
052F             42   Ports_Init:
052F             43       ; Configure all the ports in bidirectional mode:
052F 758400      44       mov P0M1, #00H
0532 758500      45       mov P0M2, #00H
0535 759100      46       mov P1M1, #00H
0538 759200      47       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
053B 75A400      48       mov P2M1, #00H
053E 75A500      49       mov P2M2, #00H
0541 75B100      50       mov P3M1, #00H
0544 75B200      51       mov P3M2, #00H
0547 22          52            ret
0548             53   
0548             54   InitADC:
0548             55            ; ADC0_0 is connected to P1.7
0548             56            ; ADC0_1 is connected to P0.0
0548             57            ; ADC0_2 is connected to P2.1
0548             58            ; ADC0_3 is connected to P2.0
0548             59       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
0548 438401      60       orl P0M1, #00000001b
054B 5385FE      61       anl P0M2, #11111110b
054E 439180      62       orl P1M1, #10000000b
0551 53927F      63       anl P1M2, #01111111b
0554 43A403      64       orl P2M1, #00000011b
0557 53A5FC      65       anl P2M2, #11111100b
055A             66            ; Setup ADC0
055A D2C2        67            setb BURST0 ; Autoscan continuos conversion mode
055C 75A120      68            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
055F 75A30F      69            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
0562 758E05      70            mov     ADCON0,#0x05 ; Enable the converter and start immediately
0565             71            ; Wait for first conversion to complete
0565             72   InitADC_L1:
0565 E58E        73            mov     a,ADCON0
0567 30E3FB      74            jnb     acc.3,InitADC_L1
056A 22          75            ret
                 76   DO_NOTHING mac
                 77   	NOP
                 78   endmac
                 78   $LIST
                 -1       $include(serial.inc)
056B              1   CSEG
056B              2   
056B              3   
056B              4   ;---------------------------------;
056B              5   ;           Basic Macros          ;
056B              6   ;---------------------------------;
                  7   Serial_Initialize mac
                  8   	;Serial_Initialize()
                  9       lcall _Serial_Initialize
                 10   endmac
056B             11   
                 12   Serial_Send_Char mac
                 13       mov a, %0
                 14       lcall putchar
                 15   endmac
056B             16   
                 17   Serial_Read_Char mac
                 18   	;Serial_Read_Char(direct)
                 19       lcall getchar
                 20       mov %0, a
                 21   endmac
056B             22   
                 23   Serial_Send_Newline mac
                 24   	lcall Send_NewLine
                 25   endmac
056B             26   
                 27   Serial_Send_BCD mac
                 28   	push ar0
                 29   	mov r0, %0
                 30   	lcall ?Send_BCD
                 31   	pop ar0
                 32   endmac
056B             33   
                 34   Serial_Send_Constant_String mac
                 35   	mov dptr, %0
                 36   	lcall SendString
                 37   endmac
056B             38   
056B             39   ;---------------------------------;
056B             40   ; Initialize the serial port      ;
056B             41   ;---------------------------------;
056B             42   _Serial_Initialize:
056B 75BD00      43            mov     BRGCON,#0x00
056E 75BF00      44            mov     BRGR1,#high(BRVAL)
0571 75BE30      45            mov     BRGR0,#low(BRVAL)
0574 75BD03      46            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
0577 759852      47            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
057A             48            ; Make sure that TXD(P1.0) and RXD(P1.1) are configured as bidrectional I/O
057A 5391FC      49            anl     P1M1,#11111100B
057D 5392FC      50            anl     P1M2,#11111100B
0580 22          51            ret
0581             52   
0581             53   ;---------------------------------;
0581             54   ; Sends a byte via serial port    ;
0581             55   ;---------------------------------;
0581             56   putchar:
0581 109902      57            jbc     TI,putchar_L1
0584 80FB        58            sjmp putchar
0586             59   putchar_L1:
0586 F599        60            mov     SBUF,a
0588 22          61            ret
0589             62   
0589             63   SendString:
0589 E4          64       clr a
058A 93          65       movc a, @a+dptr
058B 6006        66       jz SendString_L1
058D 120581      67       lcall putchar
0590 A3          68       inc dptr
0591 80F6        69       sjmp SendString  
0593             70   SendString_L1:
0593 22          71            ret
0594             72   
0594             73   ;---------------------------------;
0594             74   ; Send a BCD number to PuTTY      ;
0594             75   ;---------------------------------;
0594             76   ?Send_BCD:
0594 C0E0        77            push acc
0596             78            ; Write most significant digit
0596 E8          79            mov a, r0
0597 C4          80            swap a
0598 540F        81            anl a, #0fh
059A 4430        82            orl a, #30h
059C 120581      83            lcall putchar
059F             84            ; write least significant digit
059F E8          85            mov a, r0
05A0 540F        86            anl a, #0fh
05A2 4430        87            orl a, #30h
05A4 120581      88            lcall putchar
05A7 D0E0        89            pop acc
05A9 22          90            ret
05AA             91   
05AA             92   Send_NewLine:
05AA 740D        93            mov a, #'\r'
05AC 120581      94            lcall putchar
05AF 740A        95            mov a, #'\n'
05B1 120581      96            lcall putchar   
05B4 22          97            ret
05B5             98   
05B5             99   
05B5            100   SendTemp0:
05B5 90005E     101            mov dptr, #HexAscii 
05B8            102            
05B8            103            
05B8            104            
05B8 E562       105            mov a, bcd+3
05BA C4         106            swap a
05BB 540F       107            anl a, #0xf
05BD 93         108            movc a, @a+dptr
05BE 120581     109            lcall putchar
05C1 E562       110            mov a, bcd+3
05C3 540F       111            anl a, #0xf
05C5 93         112            movc a, @a+dptr
05C6 120581     113            lcall putchar
05C9            114            
05C9 E561       115            mov a, bcd+2
05CB C4         116            swap a
05CC 540F       117            anl a, #0xf
05CE 93         118            movc a, @a+dptr
05CF 120581     119            lcall putchar
05D2 E561       120            mov a, bcd+2
05D4 540F       121            anl a, #0xf
05D6 93         122            movc a, @a+dptr
05D7 120581     123            lcall putchar
05DA            124            
05DA E560       125            mov a, bcd+1
05DC C4         126            swap a
05DD 540F       127            anl a, #0xf
05DF 93         128            movc a, @a+dptr
05E0 120581     129            lcall putchar
05E3 E560       130            mov a, bcd+1
05E5 540F       131            anl a, #0xf
05E7 93         132            movc a, @a+dptr
05E8 120581     133            lcall putchar
05EB            134   
05EB            135   
05EB E55F       136            mov a, bcd+0
05ED C4         137            swap a
05EE 540F       138            anl a, #0xf
05F0 93         139            movc a, @a+dptr
05F1 120581     140            lcall putchar
05F4 E55F       141            mov a, bcd+0
05F6 540F       142            anl a, #0xf
05F8 93         143            movc a, @a+dptr
05F9 120581     144            lcall putchar
05FC 22         145            ret
                 -1       $include(temperature.inc)
05FD              1   cseg
05FD              2   
05FD              3   
05FD              4   
05FD              5   Read_Oven_Temp:
05FD              6            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
05FD 755700       7            mov x+0, #low (0 % 0x10000) 
0600 755800       7            mov x+1, #high(0 % 0x10000) 
0603 755900       7            mov x+2, #low (0 / 0x10000) 
0606 755A00       7            mov x+3, #high(0 / 0x10000) 
0609 85C757       8       mov x+0, ad0dat2
060C 7FFF         9            mov R7, #255
060E 1201DF      10       lcall Wait10us
0611             11   accumulate_loop0:
0611 85C75B      12       mov y+0, ad0dat2
0614 755C00      13       mov y+1, #0
0617 755D00      14       mov y+2, #0
061A 755E00      15       mov y+3, #0
061D 120378      16       lcall add32
0620 1201DF      17       lcall Wait10us
0623 DFEC        18            djnz R7, accumulate_loop0
0625             19            
0625             20            ; Now divide by 16 (2^4)
0625 755B10      21            mov y+0, #low (16 % 0x10000) 
0628 755C00      21            mov y+1, #high(16 % 0x10000) 
062B 755D00      21            mov y+2, #low (16 / 0x10000) 
062E 755E00      21            mov y+3, #high(16 / 0x10000) 
0631 1204BA      22            lcall div32
0634             23            ; x has now the 12-bit representation of the temperature
0634             24            
0634             25            ; Convert to temperature (C)
0634 755BE8      26            mov y+0, #low (33000 % 0x10000) 
0637 755C80      26            mov y+1, #high(33000 % 0x10000) 
063A 755D00      26            mov y+2, #low (33000 / 0x10000) 
063D 755E00      26            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
0640 12042D      27            lcall mul32
0643 755B00      28            mov y+0, #low (((1<<12)) % 0x10000) 
0646 755C10      28            mov y+1, #high(((1<<12)) % 0x10000) 
0649 755D00      28            mov y+2, #low (((1<<12)) / 0x10000) 
064C 755E00      28            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
064F 1204BA      29            lcall div32
0652 755B3C      30            mov y+0, #low (60 % 0x10000) 
0655 755C00      30            mov y+1, #high(60 % 0x10000) 
0658 755D00      30            mov y+2, #low (60 / 0x10000) 
065B 755E00      30            mov y+3, #high(60 / 0x10000) 
065E 120399      31            lcall sub32
0661             32   
0661             33            ;mov32(Current_Oven_Volt,x); store the hex value of voltage
0661             34            
0661 755B0E      35            mov y+0, #low (7438 % 0x10000) 
0664 755C1D      35            mov y+1, #high(7438 % 0x10000) 
0667 755D00      35            mov y+2, #low (7438 / 0x10000) 
066A 755E00      35            mov y+3, #high(7438 / 0x10000) 
066D 12042D      36            lcall mul32
0670 755B10      37            mov y+0, #low (10000 % 0x10000) 
0673 755C27      37            mov y+1, #high(10000 % 0x10000) 
0676 755D00      37            mov y+2, #low (10000 / 0x10000) 
0679 755E00      37            mov y+3, #high(10000 / 0x10000) 
067C 1204BA      38            lcall div32
067F 755BB4      39            mov y+0, #low (180 % 0x10000) 
0682 755C00      39            mov y+1, #high(180 % 0x10000) 
0685 755D00      39            mov y+2, #low (180 / 0x10000) 
0688 755E00      39            mov y+3, #high(180 / 0x10000) 
068B 120399      40            lcall sub32
068E             41            ;now we got the relateive temp number in hex
068E             42   
068E             43       ;mov(dst, src)
068E 854E5E      43            mov y+3, Current_Room_Temp+3
0691 854D5D      43       mov y+2, Current_Room_Temp+2
0694 854C5C      43       mov y+1, Current_Room_Temp+1
0697 854B5B      43       mov y,   Current_Room_Temp
069A 120378      44            lcall add32
069D             45            ;now we got the true value of oven in hex
069D 1202B3      46            lcall hex2bcd
06A0 1205B5      47            lcall SendTemp0; send to PC through serial port
06A3 1205AA      48            lcall Send_Newline
06A6 755B64      49            mov y+0, #low (100 % 0x10000) 
06A9 755C00      49            mov y+1, #high(100 % 0x10000) 
06AC 755D00      49            mov y+2, #low (100 / 0x10000) 
06AF 755E00      49            mov y+3, #high(100 / 0x10000) 
06B2 1204BA      50            lcall div32;divide by 100 to get the value in integer
06B5             51            ; now x contains the value in hex
06B5 755B5E      52            mov y+0, #low (350 % 0x10000) 
06B8 755C01      52            mov y+1, #high(350 % 0x10000) 
06BB 755D00      52            mov y+2, #low (350 / 0x10000) 
06BE 755E00      52            mov y+3, #high(350 / 0x10000) 
06C1 1203BB      53            lcall x_lt_y
06C4 200203      54            jb mf, Temp_OK
06C7             55            ;if not ok
06C7 0205FD      56            ljmp Read_Oven_Temp;re-read the value
06CA             57   
06CA             58            Temp_OK:
06CA             59       ;mov(dst, src)
06CA 855A52      59            mov Current_Oven_Temp+3, x+3
06CD 855951      59       mov Current_Oven_Temp+2, x+2
06D0 855850      59       mov Current_Oven_Temp+1, x+1
06D3 85574F      59       mov Current_Oven_Temp,   x
06D6 22          60            ret
06D7             61   
06D7             62   Read_Room_Temp:
06D7             63            
06D7 755700      64            mov x+0, #low (0 % 0x10000) 
06DA 755800      64            mov x+1, #high(0 % 0x10000) 
06DD 755900      64            mov x+2, #low (0 / 0x10000) 
06E0 755A00      64            mov x+3, #high(0 / 0x10000) 
06E3 85C757      65       mov x+0, ad0dat2
06E6 7FFF        66            mov R7, #255
06E8 1201DF      67       lcall Wait10us
06EB             68       
06EB             69   accumulate_loop1:
06EB 85F45B      70       mov y+0, ad0dat3
06EE 755C00      71       mov y+1, #0
06F1 755D00      72       mov y+2, #0
06F4 755E00      73       mov y+3, #0
06F7 120378      74       lcall add32
06FA 1201DF      75       lcall Wait10us
06FD DFEC        76            djnz R7, accumulate_loop1
06FF             77            
06FF             78            ; Now divide by 16 (2^4)
06FF 755B10      79            mov y+0, #low (16 % 0x10000) 
0702 755C00      79            mov y+1, #high(16 % 0x10000) 
0705 755D00      79            mov y+2, #low (16 / 0x10000) 
0708 755E00      79            mov y+3, #high(16 / 0x10000) 
070B 1204BA      80            lcall div32
070E             81            ; x has now the 12-bit representation of the temperature
070E             82            
070E             83            ; Convert to temperature (C)
070E 755BE8      84            mov y+0, #low (33000 % 0x10000) 
0711 755C80      84            mov y+1, #high(33000 % 0x10000) 
0714 755D00      84            mov y+2, #low (33000 / 0x10000) 
0717 755E00      84            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
071A 12042D      85            lcall mul32
071D 755B00      86            mov y+0, #low (((1<<12)) % 0x10000) 
0720 755C10      86            mov y+1, #high(((1<<12)) % 0x10000) 
0723 755D00      86            mov y+2, #low (((1<<12)) / 0x10000) 
0726 755E00      86            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
0729 1204BA      87            lcall div32
072C 755B3C      88            mov y+0, #low (60 % 0x10000) 
072F 755C00      88            mov y+1, #high(60 % 0x10000) 
0732 755D00      88            mov y+2, #low (60 / 0x10000) 
0735 755E00      88            mov y+3, #high(60 / 0x10000) 
0738 120399      89            lcall sub32
073B             90            
073B             91            ;now we got the voltage value
073B             92            ;mov32(Current_Room_Volt,x)
073B             93            
073B 755BA4      94            mov y+0, #low (27300 % 0x10000) 
073E 755C6A      94            mov y+1, #high(27300 % 0x10000) 
0741 755D00      94            mov y+2, #low (27300 / 0x10000) 
0744 755E00      94            mov y+3, #high(27300 / 0x10000) 
0747 120399      95            lcall sub32
074A 755BF4      96            mov y+0, #low (500 % 0x10000) 
074D 755C01      96            mov y+1, #high(500 % 0x10000) 
0750 755D00      96            mov y+2, #low (500 / 0x10000) 
0753 755E00      96            mov y+3, #high(500 / 0x10000) 
0756 120399      97            lcall sub32
0759             98            ;now we got the temperature
0759             99       ;mov(dst, src)
0759 855A4E      99            mov Current_Room_Temp+3, x+3
075C 85594D      99       mov Current_Room_Temp+2, x+2
075F 85584C      99       mov Current_Room_Temp+1, x+1
0762 85574B      99       mov Current_Room_Temp,   x
0765            100            
0765 22         101            ret
                 -1       $include(speaker.inc)
                462   $LIST
                 -1       $include(key.inc)
0BAF              1   cseg
0BAF              2   
0BAF              3   
0BAF              4   ;-----------------------;
0BAF              5   ;    Functions Define   ;
0BAF              6   ;-----------------------; 
0BAF              7   
0BAF              8   ;Key_Read: if read, return the button readed.
0BAF              9   ;Return 0 if read nothing.
0BAF             10   Key_Read:
0BAF C0E0        11       push acc
0BB1 120BC3      12       lcall ADC_to_PB; read lower 8 button
0BB4             13       ;mov a, keyin
0BB4             14       ;cjne a, #0, Continue_Read_Key; if nothing, continue read key
0BB4             15       ;ret; if read successfully, return
0BB4             16       ;Continue_Read_Key:
0BB4 120C14      17       lcall ADC_to_PB_1
0BB7 C002        18            push AR2
0BB9 7A96        18            mov R2, #150
0BBB 1201FA      18            lcall ?Wait_Milli_Seconds
0BBE D002        18            pop AR2
0BC0 D0E0        19            pop acc
0BC2 22          20       ret
0BC3             21   
0BC3             22   ADC_to_PB:
0BC3 756C00      23       mov keyin, #0;clear input
0BC6             24            ; Check PB6
0BC6 C3          25            clr c
0BC7 E5C5        26            mov a, AD0DAT0
0BC9 94A3        27            subb a, #(173-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
0BCB 4004        28            jc ADC_to_PB_L6
0BCD 756C07      29       mov keyin, #7
0BD0 22          30            ret
0BD1             31   ADC_to_PB_L6:
0BD1             32            ; Check PB5
0BD1 C3          33            clr c
0BD2 E5C5        34            mov a, AD0DAT0; P1.7
0BD4 9491        35            subb a, #(155-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
0BD6 4004        36            jc ADC_to_PB_L5
0BD8 756C06      37            mov keyin, #6
0BDB 22          38            ret
0BDC             39   ADC_to_PB_L5:
0BDC             40            ; Check PB4
0BDC C3          41            clr c
0BDD E5C5        42            mov a, AD0DAT0
0BDF 9478        43            subb a, #(130-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
0BE1 4004        44            jc ADC_to_PB_L4
0BE3 756C05      45            mov keyin, #5
0BE6 22          46            ret
0BE7             47   ADC_to_PB_L4:
0BE7             48            ; Check PB3
0BE7 C3          49            clr c
0BE8 E5C5        50            mov a, AD0DAT0
0BEA 9462        51            subb a, #(108-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
0BEC 4004        52            jc ADC_to_PB_L3
0BEE 756C04      53            mov keyin, #4
0BF1 22          54            ret
0BF2             55   ADC_to_PB_L3:
0BF2             56            ; Check PB2
0BF2 C3          57            clr c
0BF3 E5C5        58            mov a, AD0DAT0
0BF5 9444        59            subb a, #(78-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
0BF7 4004        60            jc ADC_to_PB_L2
0BF9 756C03      61            mov keyin, #3
0BFC 22          62            ret
0BFD             63   ADC_to_PB_L2:
0BFD             64            ; Check PB1
0BFD C3          65            clr c
0BFE E5C5        66            mov a, AD0DAT0
0C00 9433        67            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
0C02 4004        68            jc ADC_to_PB_L1
0C04 756C02      69            mov keyin, #2
0C07 22          70            ret
0C08             71   ADC_to_PB_L1:
0C08             72            ; Check PB1
0C08 C3          73            clr c
0C09 E5C5        74            mov a, AD0DAT0
0C0B 9413        75            subb a, #(29-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
0C0D 4004        76            jc ADC_to_PB_L0
0C0F 756C01      77            mov keyin, #1
0C12 22          78            ret
0C13             79   ADC_to_PB_L0:
0C13             80            ; No pusbutton pressed  
0C13 22          81            ret
0C14             82   
0C14             83   ADC_to_PB_1:
0C14             84            ; Check PB6
0C14 C3          85            clr c
0C15 E5C6        86            mov a, AD0DAT1
0C17 94C4        87            subb a, #(206-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
0C19 4004        88            jc ADC_to_PB_L6_2
0C1B 756C0E      89            mov keyin, #14
0C1E 22          90            ret
0C1F             91   ADC_to_PB_L6_2:
0C1F             92            ; Check PB5
0C1F C3          93            clr c
0C20 E5C6        94            mov a, AD0DAT1
0C22 94AF        95            subb a, #(185-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
0C24 4004        96            jc ADC_to_PB_L5_2
0C26 756C0D      97            mov keyin, #13
0C29 22          98            ret
0C2A             99   ADC_to_PB_L5_2:
0C2A            100            ; Check PB4
0C2A C3         101            clr c
0C2B E5C6       102            mov a, AD0DAT1
0C2D 9490       103            subb a, #(154-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
0C2F 4004       104            jc ADC_to_PB_L4_2
0C31 756C0C     105            mov keyin, #12
0C34 22         106            ret
0C35            107   ADC_to_PB_L4_2:
0C35            108            ; Check PB3
0C35 C3         109            clr c
0C36 E5C6       110            mov a, AD0DAT1
0C38 9471       111            subb a, #(123-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
0C3A 4004       112            jc ADC_to_PB_L3_2
0C3C 756C0B     113            mov keyin, #11
0C3F 22         114            ret
0C40            115   ADC_to_PB_L3_2:
0C40            116            ; Check PB2
0C40 C3         117            clr c
0C41 E5C6       118            mov a, AD0DAT1
0C43 9452       119            subb a, #(92-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
0C45 4004       120            jc ADC_to_PB_L2_2
0C47 756C0A     121            mov keyin, #10
0C4A 22         122            ret
0C4B            123   ADC_to_PB_L2_2:
0C4B            124            ; Check PB1
0C4B C3         125            clr c
0C4C E5C6       126            mov a, AD0DAT1
0C4E 9433       127            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
0C50 4004       128            jc ADC_to_PB_L1_2
0C52 756C09     129            mov keyin, #9
0C55 22         130            ret
0C56            131   ADC_to_PB_L1_2:
0C56            132            ; Check PB1
0C56 C3         133            clr c
0C57 E5C6       134            mov a, AD0DAT1
0C59 9414       135            subb a, #(30-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
0C5B 4004       136            jc ADC_to_PB_L01
0C5D 756C08     137            mov keyin, #8
0C60 22         138            ret
0C61            139   ADC_to_PB_L01:
0C61            140            ; No pusbutton pressed  
0C61 22         141            ret
0C62            190   ;$LIST
0C62            191   
0C62            192   cseg
0C62            193   
0C62            194   MainProgram:
0C62 75817F     195       mov SP, #0x7F
0C65 12052F     196       lcall Ports_Init
0C68 120249     197            lcall LCD_4BIT
0C6B            198            ;Serial_Initialize()
0C6B 12056B     198       lcall _Serial_Initialize
0C6E 120548     199       lcall InitADC
0C71 C0E0       200            push acc
0C73 7401       200            mov a, #1
0C75 14         200            dec a
0C76 12028B     200            lcall ?Set_Cursor_1 ; Select column and row
0C79 D0E0       200            pop acc
0C7B C083       200            push dph
0C7D C082       200            push dpl
0C7F C0E0       200            push acc
0C81 90007F     200            mov dptr, #WELCOME1
0C84 12027E     200            lcall ?Send_Constant_String
0C87 D0E0       200            pop acc
0C89 D082       200            pop dpl
0C8B D083       200            pop dph
0C8D C0E0       200            push acc
0C8F 7401       200            mov a, #1
0C91 14         200            dec a
0C92 120289     200            lcall ?Set_Cursor_2 ; Select column and row
0C95 D0E0       200            pop acc
0C97 C083       200            push dph
0C99 C082       200            push dpl
0C9B C0E0       200            push acc
0C9D 900090     200            mov dptr, #WELCOME2
0CA0 12027E     200            lcall ?Send_Constant_String
0CA3 D0E0       200            pop acc
0CA5 D082       200            pop dpl
0CA7 D083       200            pop dph
0CA9 120D8D     201       lcall Data_Initialization
0CAC 1207AE     202       lcall InitDAC
0CAF 120766     203       lcall CCU_Init
0CB2 1207BE     204            lcall Init_SPI
0CB5 120D30     205       lcall External_Interrupt0_Init
0CB8 120D33     206       lcall External_Interrupt1_Init
0CBB 753A00     207       mov TEMP_SOAK+3, #0x00
0CBE 753900     208       mov TEMP_SOAK+2, #0x00
0CC1 753800     209       mov TEMP_SOAK+1, #0x00
0CC4 753796     210       mov TEMP_SOAK, #150
0CC7 754200     211       mov TEMP_RFLW+3, #0
0CCA 754100     212       mov TEMP_RFLW+2, #0
0CCD 754000     213       mov TEMP_RFLW+1, #0
0CD0 753FD9     214       mov TEMP_RFLW, #217
0CD3 753E00     215       mov TIME_SOAK+3, #0
0CD6 753D00     216       mov TIME_SOAK+2, #0
0CD9 753C00     217       mov TIME_SOAK+1, #0
0CDC 753B3C     218       mov TIME_SOAK, #60
0CDF 754600     219       mov TIME_RFLW+3, #0
0CE2 754500     220       mov TIME_RFLW+2, #0
0CE5 754400     221       mov TIME_RFLW+1, #0
0CE8 75434B     222       mov TIME_RFLW, #75
0CEB 754A00     223       mov TEMP_SAFE+3, #0
0CEE 754900     224       mov TEMP_SAFE+2, #0
0CF1 754800     225       mov TEMP_SAFE+1, #0
0CF4 75473C     226       mov TEMP_SAFE, #60
0CF7 C2C8       227       clr TMOD20 ; Stop CCU timer
0CF9 D2AF       228       setb EA   ; Enable Global interrupts
0CFB C2A7       229       clr OVEN
0CFD 1201ED     230       lcall WaitHalfSec
0D00            231   
0D00            232   Main_Loop:
0D00 200103     233       jb Main_State,loop_b
0D03            234   loop_a:; for FSM0
0D03 020E18     235            ljmp FSM0
0D06            236   
0D06            237   loop_b: ; for FSM1
0D06 3004F7     238       jnb half_seconds_flag, Main_Loop
0D09 C204       239       clr half_seconds_flag
0D0B 0564       240       inc Count5s
0D0D E564       241       mov a, Count5s
0D0F B40509     242       cjne a, #5, skip3
0D12 756400     243       mov Count5s, #0
0D15 300803     244       jnb speak_enable, skip3
0D18 120DBC     245       lcall Speak_Process
0D1B            246       skip3:
0D1B 80E3       247            sjmp Main_Loop
0D1D            248   
0D1D            249   
0D1D            250   ;----------------------------;
0D1D            251   ;           Macros           ;
0D1D            252   ;----------------------------; 
                253   Display_3BCD mac
                254       ;Display_3BCD(bcd to display)
                255       ;now the bcd num of time is stored in bcd
                256       LCD_Display_NUM(%0+1);
                257       LCD_Display_BCD(%0);
                258   endmac
0D1D            259   
                260   Display_3BCD_from_x mac
                261       lcall hex2bcd
                262       ;now the bcd num of time is stored in bcd
                263       LCD_Display_NUM(bcd+1);
                264       LCD_Display_BCD(bcd);
                265   endmac
0D1D            266   
                267   Update_Temp mac
                268       lcall Read_Room_Temp
                269       lcall Read_Oven_Temp
                270       mov32(x, Current_Oven_Temp)
                271       mov32(y, %0)
                272       lcall x_lt_y
                273   endmac
0D1D            275   
0D1D            276   ;----------------------------;
0D1D            277   ;         Functions          ;
0D1D            278   ;----------------------------; 
0D1D            279   
0D1D            280   Timer1_Init:
0D1D E589       281            mov a, TMOD
0D1F 540F       282            anl a, #0x0f ; Clear the bits for timer 1
0D21 4410       283            orl a, #0x10 ; Configure timer 1 as 16-timer
0D23 F589       284            mov TMOD, a
0D25 758D6F     285            mov TH1, #high(TIMER1_RELOAD)
0D28 758BFF     286            mov TL1, #low(TIMER1_RELOAD)
0D2B            287            ; Enable the timer and interrupts
0D2B D2AB       288       setb ET1  ; Enable timer 1 interrupt
0D2D D28E       289       setb TR1  ; Start timer 1
0D2F 22         290            ret
0D30            291   
0D30            292   External_Interrupt0_Init:
0D30            293            ; Enable the external interrupt
0D30 D2A8       294       setb EX0  ; Enable timer 1 interrupt
0D32 22         295            ret
0D33            296   
0D33            297   External_Interrupt1_Init:
0D33            298            ; Enable the external interrupt
0D33 D2AA       299       setb EX1  ; Enable timer 1 interrupt
0D35 22         300            ret
0D36            301   
0D36            302   Display_Working_Status:
0D36 C0E0       303            push acc
0D38 7406       303            mov a, #6
0D3A 14         303            dec a
0D3B 12028B     303            lcall ?Set_Cursor_1 ; Select column and row
0D3E D0E0       303            pop acc
0D40            304       ;mov(dst, src)
0D40 85525A     304            mov x+3, Current_Oven_Temp+3
0D43 855159     304       mov x+2, Current_Oven_Temp+2
0D46 855058     304       mov x+1, Current_Oven_Temp+1
0D49 854F57     304       mov x,   Current_Oven_Temp
0D4C 1202B3     305       lcall hex2bcd
0D4F            305       ;now the bcd num of time is stored in bcd
0D4F C000       305            push ar0
0D51 A860       305            mov r0, bcd+1
0D53 1202A6     305            lcall ?Display_NUM
0D56 D000       305            pop ar0;
0D58 C000       305            push ar0
0D5A A85F       305            mov r0, bcd
0D5C 120290     305            lcall ?Display_BCD
0D5F D000       305            pop ar0;
0D61            306   
0D61 C0E0       307            push acc
0D63 740E       307            mov a, #14
0D65 14         307            dec a
0D66 12028B     307            lcall ?Set_Cursor_1 ; Select column and row
0D69 D0E0       307            pop acc
0D6B 755A00     308       mov x+3, #0
0D6E 755900     309       mov x+2, #0
0D71 853258     310       mov x+1, Time_Global+1
0D74 853157     311       mov x, Time_Global
0D77 1202B3     312       lcall hex2bcd
0D7A            312       ;now the bcd num of time is stored in bcd
0D7A C000       312            push ar0
0D7C A860       312            mov r0, bcd+1
0D7E 1202A6     312            lcall ?Display_NUM
0D81 D000       312            pop ar0;
0D83 C000       312            push ar0
0D85 A85F       312            mov r0, bcd
0D87 120290     312            lcall ?Display_BCD
0D8A D000       312            pop ar0;
0D8C 22         313       ret
0D8D            314   
0D8D            315   Data_Initialization:
0D8D 753200     316       mov Time_Global+1, #0x00
0D90 753100     317       mov Time_Global+0, #0x00
0D93 753400     318       mov FSM0_State, #0x00
0D96 753500     319       mov FSM1_State, #0x00
0D99 755500     320       mov NEW_BCD, #0
0D9C 755600     321       mov NEW_BCD+1, #0
0D9F 756800     322       mov number, #0x0 ;;not needed
0DA2 756400     323       mov Count5s, #0x00
0DA5 756B00     324       mov speak_state, #0x00
0DA8 755303     325       mov bcd_bitnumber, #0x03
0DAB            326       
0DAB C296       327       clr LED
0DAD C208       328       clr speak_enable
0DAF C203       329       clr enable_time_global
0DB1 C205       330       clr nodigit
0DB3 C206       331            clr skiphundred
0DB5 C207       332            clr skiptenth
0DB7 C201       333       clr Main_State
0DB9 C2A7       334       clr OVEN
0DBB 22         335       ret
0DBC            336   
0DBC            337   Speak_Process:
0DBC 120A68     338       lcall current_temp_is
0DBF 854F68     339       mov number, Current_Oven_Temp+0
0DC2 120A4B     340       lcall playnumbers
0DC5 120A87     341       lcall degree
0DC8 120AA6     342       lcall celsius
0DCB 22         343       ret
0DCC            344   
0DCC            345   ;----------------------------;
0DCC            346   ;     Interrupt Services     ;
0DCC            347   ;----------------------------; 
0DCC            348   Timer1_ISR:
0DCC 758D6F     349            mov TH1, #high(TIMER1_RELOAD)
0DCF 758BFF     350            mov TL1, #low(TIMER1_RELOAD)
0DD2 B2A6       351            cpl P2.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 10 ms pulse.
0DD4            352            
0DD4            353            ; The two registers used in the ISR must be saved in the stack
0DD4 C0E0       354            push acc
0DD6 C0D0       355            push psw
0DD8            356            
0DD8            357            ; Increment the 8-bit 10-mili-second counter
0DD8 0530       358            inc Count10ms
0DDA            359   
0DDA            360   Inc_Done:
0DDA            361            ; Check if one second has passed
0DDA E530       362            mov a, Count10ms
0DDC B46415     363            cjne a, #100, Timer1_ISR_done
0DDF            364            
0DDF            365            ; 500 milliseconds have passed.  Set a flag so the main program knows
0DDF D204       366            setb half_seconds_flag ; Let the main program know half second had passed
0DE1            367       
0DE1 300308     368       jnb enable_time_global, skip1
0DE4            369            ; Increment the 16-bit one mili second counter
0DE4 0531       370            inc Time_Global+0    ; Increment the low 8-bits first
0DE6 E531       371            mov a, Time_Global+0 ; If the low 8-bits overflow, then increment high 8-bits
0DE8 7002       372            jnz skip1
0DEA 0532       373            inc Time_Global+1
0DEC            374   
0DEC            375            skip1:
0DEC 753000     376       mov Count10ms, #0
0DEF            377   
0DEF B296       378       cpl LED
0DF1 1213C4     379       lcall FSM1;call FSM1 here
0DF4            380   
0DF4            381   Timer1_ISR_done:
0DF4 D0D0       382            pop psw
0DF6 D0E0       383            pop acc
0DF8 32         384            reti
0DF9            385   
0DF9            386   EI0_ISR:
0DF9 C288       387       clr IT0
0DFB C2A8       388       clr EX0
0DFD D201       389       setb Main_State
0DFF 120AC5     390       lcall current_process_is
0E02 120AE4     391       lcall ramp_to_soak
0E05 120D1D     392       lcall Timer1_Init
0E08 32         393       reti
0E09            394   
0E09            395   EI1_ISR:
0E09 C28A       396       clr IT1
0E0B C28E       397       clr TR1; disable timer 1
0E0D C2A7       398       clr OVEN
0E0F D2A8       399       setb EX0
0E11 120BAA     400       lcall clear_speaking
0E14 120D8D     401       lcall Data_Initialization
0E17 32         402       reti
0E18            403   
0E18            404   ;---------------------------------;
0E18            405   ;      Finite State Machines      ;
0E18            406   ;---------------------------------;
0E18            407   FSM0:
0E18            408       ;-------------------;
0E18            409       ;    Setting FSM    ;
0E18            410       ;-------------------;
0E18            411   
0E18            412       ;Checking Keyboard
0E18            413       ;Key_Scan()
0E18            414       FSM0_Start:
0E18 E534       415           mov a, FSM0_State
0E1A 8003       416           sjmp FSM0_State0
0E1C            417   
0E1C            418           FSM0_State1_bridge:
0E1C 020F6E     419               ljmp FSM0_State1 
0E1F            420           FSM0_State0:
0E1F B400FA     421               cjne a, #0, FSM0_State1_bridge
0E22            422   
0E22            423               ;display a word
0E22 C0E0       424            push acc
0E24 7401       424            mov a, #1
0E26 14         424            dec a
0E27 12028B     424            lcall ?Set_Cursor_1 ; Select column and row
0E2A D0E0       424            pop acc
0E2C C083       424            push dph
0E2E C082       424            push dpl
0E30 C0E0       424            push acc
0E32 9000C3     424            mov dptr, #SETTING1
0E35 12027E     424            lcall ?Send_Constant_String
0E38 D0E0       424            pop acc
0E3A D082       424            pop dpl
0E3C D083       424            pop dph
0E3E C0E0       424            push acc
0E40 7401       424            mov a, #1
0E42 14         424            dec a
0E43 120289     424            lcall ?Set_Cursor_2 ; Select column and row
0E46 D0E0       424            pop acc
0E48 C083       424            push dph
0E4A C082       424            push dpl
0E4C C0E0       424            push acc
0E4E 9000D4     424            mov dptr, #SETTING2
0E51 12027E     424            lcall ?Send_Constant_String
0E54 D0E0       424            pop acc
0E56 D082       424            pop dpl
0E58 D083       424            pop dph
0E5A            425   
0E5A C0E0       426            push acc
0E5C 740D       426            mov a, #13
0E5E 14         426            dec a
0E5F 120289     426            lcall ?Set_Cursor_2 ; Select column and row
0E62 D0E0       426            pop acc
0E64 755700     427               mov x,#0x0
0E67 755800     428               mov x+1,#0x0
0E6A 755900     429               mov x+2,#0x0
0E6D 755A00     430               mov x+3,#0x0
0E70 854357     431               mov x, TIME_RFLW
0E73 1202B3     432       lcall hex2bcd
0E76            432       ;now the bcd num of time is stored in bcd
0E76 C000       432            push ar0
0E78 A860       432            mov r0, bcd+1
0E7A 1202A6     432            lcall ?Display_NUM
0E7D D000       432            pop ar0;
0E7F C000       432            push ar0
0E81 A85F       432            mov r0, bcd
0E83 120290     432            lcall ?Display_BCD
0E86 D000       432            pop ar0;
0E88            433   
0E88 C0E0       434            push acc
0E8A 740D       434            mov a, #13
0E8C 14         434            dec a
0E8D 12028B     434            lcall ?Set_Cursor_1 ; Select column and row
0E90 D0E0       434            pop acc
0E92 755700     435               mov x,#0x0
0E95 755800     436               mov x+1,#0x0
0E98 755900     437               mov x+2,#0x0
0E9B 755A00     438               mov x+3,#0x0
0E9E 853B57     439               mov x, TIME_SOAK
0EA1 1202B3     440       lcall hex2bcd
0EA4            440       ;now the bcd num of time is stored in bcd
0EA4 C000       440            push ar0
0EA6 A860       440            mov r0, bcd+1
0EA8 1202A6     440            lcall ?Display_NUM
0EAB D000       440            pop ar0;
0EAD C000       440            push ar0
0EAF A85F       440            mov r0, bcd
0EB1 120290     440            lcall ?Display_BCD
0EB4 D000       440            pop ar0;
0EB6            441   
0EB6 C0E0       442            push acc
0EB8 7406       442            mov a, #6
0EBA 14         442            dec a
0EBB 120289     442            lcall ?Set_Cursor_2 ; Select column and row
0EBE D0E0       442            pop acc
0EC0 755700     443               mov x,#0x0
0EC3 755800     444               mov x+1,#0x0
0EC6 755900     445               mov x+2,#0x0
0EC9 755A00     446               mov x+3,#0x0
0ECC 853F57     447               mov x, TEMP_RFLW
0ECF 1202B3     448       lcall hex2bcd
0ED2            448       ;now the bcd num of time is stored in bcd
0ED2 C000       448            push ar0
0ED4 A860       448            mov r0, bcd+1
0ED6 1202A6     448            lcall ?Display_NUM
0ED9 D000       448            pop ar0;
0EDB C000       448            push ar0
0EDD A85F       448            mov r0, bcd
0EDF 120290     448            lcall ?Display_BCD
0EE2 D000       448            pop ar0;
0EE4            449   
0EE4 C0E0       450            push acc
0EE6 7406       450            mov a, #6
0EE8 14         450            dec a
0EE9 12028B     450            lcall ?Set_Cursor_1 ; Select column and row
0EEC D0E0       450            pop acc
0EEE 755700     451               mov x,#0x0
0EF1 755800     452               mov x+1,#0x0
0EF4 755900     453               mov x+2,#0x0
0EF7 755A00     454               mov x+3,#0x0
0EFA 853757     455               mov x, TEMP_SOAK
0EFD 1202B3     456       lcall hex2bcd
0F00            456       ;now the bcd num of time is stored in bcd
0F00 C000       456            push ar0
0F02 A860       456            mov r0, bcd+1
0F04 1202A6     456            lcall ?Display_NUM
0F07 D000       456            pop ar0;
0F09 C000       456            push ar0
0F0B A85F       456            mov r0, bcd
0F0D 120290     456            lcall ?Display_BCD
0F10 D000       456            pop ar0;
0F12            457   
0F12            458   
0F12 120BAF     459               lcall Key_Read
0F15 755700     460            mov x+0, #low (0 % 0x10000) 
0F18 755800     460            mov x+1, #high(0 % 0x10000) 
0F1B 755900     460            mov x+2, #low (0 / 0x10000) 
0F1E 755A00     460            mov x+3, #high(0 / 0x10000) 
0F21 856C57     461               mov x, keyin
0F24 755B0D     462            mov y+0, #low (13 % 0x10000) 
0F27 755C00     462            mov y+1, #high(13 % 0x10000) 
0F2A 755D00     462            mov y+2, #low (13 / 0x10000) 
0F2D 755E00     462            mov y+3, #high(13 / 0x10000) 
0F30 1203F3     463               lcall x_eq_y
0F33            464   
0F33 300208     465               jnb mf,FSM0_State0_down
0F36 0534       466               inc FSM0_State 
0F38 1213BD     467               lcall change_state_flag
0F3B 0211EB     468               ljmp FSM0_Done
0F3E            469           
0F3E            470           FSM0_State0_down:
0F3E            471   
0F3E            472               ;lcall Key_Read
0F3E 755700     473            mov x+0, #low (0 % 0x10000) 
0F41 755800     473            mov x+1, #high(0 % 0x10000) 
0F44 755900     473            mov x+2, #low (0 / 0x10000) 
0F47 755A00     473            mov x+3, #high(0 / 0x10000) 
0F4A 856C57     474               mov x, keyin
0F4D 755B0E     475            mov y+0, #low (14 % 0x10000) 
0F50 755C00     475            mov y+1, #high(14 % 0x10000) 
0F53 755D00     475            mov y+2, #low (14 / 0x10000) 
0F56 755E00     475            mov y+3, #high(14 / 0x10000) 
0F59 1203F3     476               lcall x_eq_y
0F5C            477   
0F5C 300209     478               jnb mf,FSM0_State0_bridge
0F5F 753404     479               mov FSM0_State, #0x04 
0F62 1213BD     480               lcall change_state_flag
0F65 0211EB     481               ljmp FSM0_Done
0F68            482           FSM0_State0_bridge:
0F68 0211EB     483               ljmp FSM0_Done
0F6B            484   
0F6B            485           FSM0_State2_bridge:
0F6B 02100E     486               ljmp FSM0_State2
0F6E            487           
0F6E            488           FSM0_State1:
0F6E B401FA     489               cjne a, #1, FSM0_State2_bridge
0F71            490               
0F71            491               ;print words
0F71 C0E0       492            push acc
0F73 7401       492            mov a, #1
0F75 14         492            dec a
0F76 12028B     492            lcall ?Set_Cursor_1 ; Select column and row
0F79 D0E0       492            pop acc
0F7B C083       492            push dph
0F7D C082       492            push dpl
0F7F C0E0       492            push acc
0F81 9000F6     492            mov dptr, #MODIFY1
0F84 12027E     492            lcall ?Send_Constant_String
0F87 D0E0       492            pop acc
0F89 D082       492            pop dpl
0F8B D083       492            pop dph
0F8D C0E0       492            push acc
0F8F 7401       492            mov a, #1
0F91 14         492            dec a
0F92 120289     492            lcall ?Set_Cursor_2 ; Select column and row
0F95 D0E0       492            pop acc
0F97 C083       492            push dph
0F99 C082       492            push dpl
0F9B C0E0       492            push acc
0F9D 9000E5     492            mov dptr, #MODIFY_DOWN
0FA0 12027E     492            lcall ?Send_Constant_String
0FA3 D0E0       492            pop acc
0FA5 D082       492            pop dpl
0FA7 D083       492            pop dph
0FA9 C0E0       493            push acc
0FAB 7405       493            mov a, #5
0FAD 14         493            dec a
0FAE 120289     493            lcall ?Set_Cursor_2 ; Select column and row
0FB1 D0E0       493            pop acc
0FB3            493   
0FB3            494               ;mov x,#0x0
0FB3            495               ;mov x+1,#0x0
0FB3            496               ;mov x+2,#0x0
0FB3            497               ;mov x+3,#0x0
0FB3 853757     498               mov x,TEMP_SOAK
0FB6 1202B3     499       lcall hex2bcd
0FB9            499       ;now the bcd num of time is stored in bcd
0FB9 C000       499            push ar0
0FBB A860       499            mov r0, bcd+1
0FBD 1202A6     499            lcall ?Display_NUM
0FC0 D000       499            pop ar0;
0FC2 C000       499            push ar0
0FC4 A85F       499            mov r0, bcd
0FC6 120290     499            lcall ?Display_BCD
0FC9 D000       499            pop ar0;
0FCB            500   
0FCB C0E0       501            push acc
0FCD 740D       501            mov a, #13
0FCF 14         501            dec a
0FD0 120289     501            lcall ?Set_Cursor_2 ; Select column and row
0FD3 D0E0       501            pop acc
0FD5            502       ;Display_3BCD(bcd to display)
0FD5            502       ;now the bcd num of time is stored in bcd
0FD5 C000       502            push ar0
0FD7 A856       502            mov r0, NEW_BCD+1
0FD9 1202A6     502            lcall ?Display_NUM
0FDC D000       502            pop ar0;
0FDE C000       502            push ar0
0FE0 A855       502            mov r0, NEW_BCD
0FE2 120290     502            lcall ?Display_BCD
0FE5 D000       502            pop ar0;
0FE7            503               ;LCD_Set_Cursor(1,13)
0FE7            504               ;Display_3BCD(NEW_BCD)
0FE7            505               ;Wait_Milli_Seconds(#250)
0FE7            506               ;Wait_Milli_Seconds(#250)
0FE7            507               
0FE7            508               ; the left bit of bcd
0FE7 1211EE     509               lcall check_button
0FEA            510               
0FEA 300218     511               jnb mf,normal_button_jump_2
0FED            512               
0FED 121217     513               lcall write_bcd
0FF0            514           
0FF0            515               
0FF0            516               ; the middle bit of bcd
0FF0 1211EE     517               lcall check_button
0FF3 30020F     518               jnb mf,normal_button_jump_2
0FF6 121217     519               lcall write_bcd
0FF9            520               
0FF9            521             
0FF9            522   
0FF9            523               ; the right bit of bcd
0FF9 1211EE     524               lcall check_button
0FFC 300206     525               jnb mf,normal_button_jump_2
0FFF 121217     526               lcall write_bcd
1002            527   
1002            528   
1002            529               
1002 021008     530               ljmp state_1_continue_1
1005            531           
1005            532   
1005            533           normal_button_jump_2:
1005            534               
1005 0212E9     535               ljmp  normal_button
1008            536               
1008            537              
1008            538           state_1_continue_1:    
1008            539               ;mov FSM0_State, #0x02
1008            540               ;jb BUTTON, FSM0_State1_Done
1008            541               ;Wait_Milli_Seconds(#75)
1008            542               ;jb BUTTON, FSM0_State1_Done
1008            543               ;jnb BUTTON, $
1008            544               ;mov FSM0_State, #0x00
1008            545               
1008            546                    FSM0_State1_Done:
1008 020D00     547               ljmp Main_Loop
100B            548   
100B            549           FSM0_State3_bridge:
100B 0210AE     550               ljmp FSM0_State3
100E            551           FSM0_State2:
100E B402FA     552               cjne a, #2, FSM0_State3_bridge
1011            553               ;LCD_INTERFACE_MODIFY2()
1011            554   
1011            555               ;print words
1011 C0E0       556            push acc
1013 7401       556            mov a, #1
1015 14         556            dec a
1016 12028B     556            lcall ?Set_Cursor_1 ; Select column and row
1019 D0E0       556            pop acc
101B C083       556            push dph
101D C082       556            push dpl
101F C0E0       556            push acc
1021 900107     556            mov dptr, #MODIFY2
1024 12027E     556            lcall ?Send_Constant_String
1027 D0E0       556            pop acc
1029 D082       556            pop dpl
102B D083       556            pop dph
102D C0E0       556            push acc
102F 7401       556            mov a, #1
1031 14         556            dec a
1032 120289     556            lcall ?Set_Cursor_2 ; Select column and row
1035 D0E0       556            pop acc
1037 C083       556            push dph
1039 C082       556            push dpl
103B C0E0       556            push acc
103D 9000E5     556            mov dptr, #MODIFY_DOWN
1040 12027E     556            lcall ?Send_Constant_String
1043 D0E0       556            pop acc
1045 D082       556            pop dpl
1047 D083       556            pop dph
1049 C0E0       557            push acc
104B 7405       557            mov a, #5
104D 14         557            dec a
104E 120289     557            lcall ?Set_Cursor_2 ; Select column and row
1051 D0E0       557            pop acc
1053            557   
1053            558   
1053            559               ;mov x,#0x0
1053            560               ;mov x+1,#0x0
1053            561               ;mov x+2,#0x0
1053            562               ;mov x+3,#0x0
1053 853B57     563               mov x,TIME_SOAK
1056 1202B3     564       lcall hex2bcd
1059            564       ;now the bcd num of time is stored in bcd
1059 C000       564            push ar0
105B A860       564            mov r0, bcd+1
105D 1202A6     564            lcall ?Display_NUM
1060 D000       564            pop ar0;
1062 C000       564            push ar0
1064 A85F       564            mov r0, bcd
1066 120290     564            lcall ?Display_BCD
1069 D000       564            pop ar0;
106B            565   
106B C0E0       566            push acc
106D 740D       566            mov a, #13
106F 14         566            dec a
1070 120289     566            lcall ?Set_Cursor_2 ; Select column and row
1073 D0E0       566            pop acc
1075            567       ;Display_3BCD(bcd to display)
1075            567       ;now the bcd num of time is stored in bcd
1075 C000       567            push ar0
1077 A856       567            mov r0, NEW_BCD+1
1079 1202A6     567            lcall ?Display_NUM
107C D000       567            pop ar0;
107E C000       567            push ar0
1080 A855       567            mov r0, NEW_BCD
1082 120290     567            lcall ?Display_BCD
1085 D000       567            pop ar0;
1087            568               
1087            569               
1087            570               ; the left bit of bcd
1087 1211EE     571               lcall check_button
108A            572               
108A 300218     573               jnb mf,normal_button_jump_3
108D            574               
108D 121217     575               lcall write_bcd
1090            576           
1090            577               
1090            578               ; the middle bit of bcd
1090 1211EE     579               lcall check_button
1093 30020F     580               jnb mf,normal_button_jump_3
1096 121217     581               lcall write_bcd
1099            582               
1099            583             
1099            584   
1099            585               ; the right bit of bcd
1099 1211EE     586               lcall check_button
109C 300206     587               jnb mf,normal_button_jump_3
109F 121217     588               lcall write_bcd
10A2            589   
10A2            590   
10A2            591               
10A2            592              
10A2            593           
10A2            594   
10A2 0210A8     595               ljmp state_2_continue_1
10A5            596           normal_button_jump_3:
10A5 0212E9     597               ljmp  normal_button
10A8            598               
10A8            599              
10A8            600           state_2_continue_1:    
10A8            601               ;mov FSM0_State, #0x03
10A8            602               ;jb BUTTON, FSM0_State1_Done
10A8            603               ;Wait_Milli_Seconds(#75)
10A8            604               ;jb BUTTON, FSM0_State1_Done
10A8            605               ;jnb BUTTON, $
10A8            606               ;mov FSM0_State, #0x00
10A8            607               
10A8            608                    FSM0_State2_Done:
10A8 020D00     609               ljmp Main_Loop
10AB            610   
10AB            611           FSM0_State4_bridge:
10AB 02114E     612               ljmp FSM0_State4
10AE            613   
10AE            614           FSM0_State3:
10AE B403FA     615               cjne a, #3, FSM0_State4_bridge
10B1            616               ;LCD_INTERFACE_MODIFY2()
10B1            617   
10B1            618               ;print words
10B1 C0E0       619            push acc
10B3 7401       619            mov a, #1
10B5 14         619            dec a
10B6 12028B     619            lcall ?Set_Cursor_1 ; Select column and row
10B9 D0E0       619            pop acc
10BB C083       619            push dph
10BD C082       619            push dpl
10BF C0E0       619            push acc
10C1 900118     619            mov dptr, #MODIFY3
10C4 12027E     619            lcall ?Send_Constant_String
10C7 D0E0       619            pop acc
10C9 D082       619            pop dpl
10CB D083       619            pop dph
10CD C0E0       619            push acc
10CF 7401       619            mov a, #1
10D1 14         619            dec a
10D2 120289     619            lcall ?Set_Cursor_2 ; Select column and row
10D5 D0E0       619            pop acc
10D7 C083       619            push dph
10D9 C082       619            push dpl
10DB C0E0       619            push acc
10DD 9000E5     619            mov dptr, #MODIFY_DOWN
10E0 12027E     619            lcall ?Send_Constant_String
10E3 D0E0       619            pop acc
10E5 D082       619            pop dpl
10E7 D083       619            pop dph
10E9 C0E0       620            push acc
10EB 7405       620            mov a, #5
10ED 14         620            dec a
10EE 120289     620            lcall ?Set_Cursor_2 ; Select column and row
10F1 D0E0       620            pop acc
10F3            620   
10F3            621   
10F3            622               ;mov x,#0x0
10F3            623               ;mov x+1,#0x0
10F3            624               ;mov x+2,#0x0
10F3            625               ;mov x+3,#0x0
10F3 853F57     626               mov x,TEMP_RFLW
10F6 1202B3     627       lcall hex2bcd
10F9            627       ;now the bcd num of time is stored in bcd
10F9 C000       627            push ar0
10FB A860       627            mov r0, bcd+1
10FD 1202A6     627            lcall ?Display_NUM
1100 D000       627            pop ar0;
1102 C000       627            push ar0
1104 A85F       627            mov r0, bcd
1106 120290     627            lcall ?Display_BCD
1109 D000       627            pop ar0;
110B            628   
110B C0E0       629            push acc
110D 740D       629            mov a, #13
110F 14         629            dec a
1110 120289     629            lcall ?Set_Cursor_2 ; Select column and row
1113 D0E0       629            pop acc
1115            630       ;Display_3BCD(bcd to display)
1115            630       ;now the bcd num of time is stored in bcd
1115 C000       630            push ar0
1117 A856       630            mov r0, NEW_BCD+1
1119 1202A6     630            lcall ?Display_NUM
111C D000       630            pop ar0;
111E C000       630            push ar0
1120 A855       630            mov r0, NEW_BCD
1122 120290     630            lcall ?Display_BCD
1125 D000       630            pop ar0;
1127            631               
1127            632               
1127            633               ; the left bit of bcd
1127 1211EE     634               lcall check_button
112A            635               
112A 300218     636               jnb mf,normal_button_jump_4
112D            637               
112D 121217     638               lcall write_bcd
1130            639           
1130            640               
1130            641               ; the middle bit of bcd
1130 1211EE     642               lcall check_button
1133 30020F     643               jnb mf,normal_button_jump_4
1136 121217     644               lcall write_bcd
1139            645               
1139            646             
1139            647   
1139            648               ; the right bit of bcd
1139 1211EE     649               lcall check_button
113C 300206     650               jnb mf,normal_button_jump_4
113F 121217     651               lcall write_bcd
1142            652   
1142            653   
1142            654               
1142            655              
1142 021148     656               ljmp state_3_continue_1
1145            657           normal_button_jump_4:
1145 0212E9     658               ljmp  normal_button
1148            659               
1148            660              
1148            661           state_3_continue_1:    
1148            662               ;mov FSM0_State, #0x02
1148            663               ;jb BUTTON, FSM0_State1_Done
1148            664               ;Wait_Milli_Seconds(#75)
1148            665               ;jb BUTTON, FSM0_State1_Done
1148            666               ;jnb BUTTON, $
1148            667               ;mov FSM0_State, #0x00
1148            668               
1148            669                    FSM0_State3_Done:
1148 020D00     670               ljmp Main_Loop
114B            671   
114B            672           FSM0_State5_bridge:
114B 0211EB     673               ljmp FSM0_Done
114E            674           FSM0_State4:
114E B404FA     675               cjne a, #4, FSM0_State5_bridge
1151            676               ;LCD_INTERFACE_MODIFY2()
1151            677   
1151            678               ;print words
1151 C0E0       679            push acc
1153 7401       679            mov a, #1
1155 14         679            dec a
1156 12028B     679            lcall ?Set_Cursor_1 ; Select column and row
1159 D0E0       679            pop acc
115B C083       679            push dph
115D C082       679            push dpl
115F C0E0       679            push acc
1161 900129     679            mov dptr, #MODIFY4
1164 12027E     679            lcall ?Send_Constant_String
1167 D0E0       679            pop acc
1169 D082       679            pop dpl
116B D083       679            pop dph
116D C0E0       679            push acc
116F 7401       679            mov a, #1
1171 14         679            dec a
1172 120289     679            lcall ?Set_Cursor_2 ; Select column and row
1175 D0E0       679            pop acc
1177 C083       679            push dph
1179 C082       679            push dpl
117B C0E0       679            push acc
117D 9000E5     679            mov dptr, #MODIFY_DOWN
1180 12027E     679            lcall ?Send_Constant_String
1183 D0E0       679            pop acc
1185 D082       679            pop dpl
1187 D083       679            pop dph
1189 C0E0       680            push acc
118B 7405       680            mov a, #5
118D 14         680            dec a
118E 120289     680            lcall ?Set_Cursor_2 ; Select column and row
1191 D0E0       680            pop acc
1193            680   
1193            681   
1193            682   
1193            683               ;mov x,#0x0
1193            684               ;mov x+1,#0x0
1193            685               ;mov x+2,#0x0
1193            686               ;mov x+3,#0x0
1193 854357     687               mov x,TIME_RFLW
1196 1202B3     688       lcall hex2bcd
1199            688       ;now the bcd num of time is stored in bcd
1199 C000       688            push ar0
119B A860       688            mov r0, bcd+1
119D 1202A6     688            lcall ?Display_NUM
11A0 D000       688            pop ar0;
11A2 C000       688            push ar0
11A4 A85F       688            mov r0, bcd
11A6 120290     688            lcall ?Display_BCD
11A9 D000       688            pop ar0;
11AB            689   
11AB C0E0       690            push acc
11AD 740D       690            mov a, #13
11AF 14         690            dec a
11B0 120289     690            lcall ?Set_Cursor_2 ; Select column and row
11B3 D0E0       690            pop acc
11B5            691       ;Display_3BCD(bcd to display)
11B5            691       ;now the bcd num of time is stored in bcd
11B5 C000       691            push ar0
11B7 A856       691            mov r0, NEW_BCD+1
11B9 1202A6     691            lcall ?Display_NUM
11BC D000       691            pop ar0;
11BE C000       691            push ar0
11C0 A855       691            mov r0, NEW_BCD
11C2 120290     691            lcall ?Display_BCD
11C5 D000       691            pop ar0;
11C7            692               
11C7            693               
11C7            694               ; the left bit of bcd
11C7 1211EE     695               lcall check_button
11CA            696               
11CA 300218     697               jnb mf,normal_button_jump_5
11CD            698               
11CD 121217     699               lcall write_bcd
11D0            700           
11D0            701               
11D0            702               ; the middle bit of bcd
11D0 1211EE     703               lcall check_button
11D3 30020F     704               jnb mf,normal_button_jump_5
11D6 121217     705               lcall write_bcd
11D9            706               
11D9            707             
11D9            708   
11D9            709               ; the right bit of bcd
11D9 1211EE     710               lcall check_button
11DC 300206     711               jnb mf,normal_button_jump_5
11DF 121217     712               lcall write_bcd
11E2            713   
11E2            714   
11E2            715               
11E2            716              
11E2            717           
11E2            718   
11E2 0211E8     719               ljmp state_4_continue_1
11E5            720           normal_button_jump_5:
11E5 0212E9     721               ljmp  normal_button
11E8            722           state_4_continue_1:    
11E8            723               ;mov FSM0_State, #0x02
11E8            724               ;jb BUTTON, FSM0_State1_Done
11E8            725               ;Wait_Milli_Seconds(#75)
11E8            726               ;jb BUTTON, FSM0_State1_Done
11E8            727               ;jnb BUTTON, $
11E8            728               ;mov FSM0_State, #0x00
11E8            729               
11E8            730                    FSM0_State4_Done:
11E8 020D00     731               ljmp Main_Loop
11EB            732   
11EB            733           ;FSM0_State5:
11EB            734               ;cjne a, #5, FSM0_Done
11EB            735               ;LCD_INTERFACE_MODIFY5()
11EB            736   
11EB            737           FSM0_Done:
11EB 020D00     738               ljmp Main_Loop
11EE            739   
11EE            740       check_button:
11EE            741               ;scan number button
11EE 120BAF     742               lcall Key_Read
11F1            743              
11F1 755700     744            mov x+0, #low (0 % 0x10000) 
11F4 755800     744            mov x+1, #high(0 % 0x10000) 
11F7 755900     744            mov x+2, #low (0 / 0x10000) 
11FA 755A00     744            mov x+3, #high(0 / 0x10000) 
11FD 856C57     745               mov x, keyin
1200 755B0B     746            mov y+0, #low (11 % 0x10000) 
1203 755C00     746            mov y+1, #high(11 % 0x10000) 
1206 755D00     746            mov y+2, #low (11 / 0x10000) 
1209 755E00     746            mov y+3, #high(11 / 0x10000) 
120C 1203BB     747               lcall x_lt_y
120F            748               
120F E56C       749               mov a, keyin
1211 B40002     750               cjne a,#0x00,continue_check
1214 80D8       751               sjmp check_button
1216            752       continue_check:
1216 22         753               ret
1217            754      
1217            755   
1217            756       write_bcd:
1217 E553       757                   mov a , bcd_bitnumber
1219 B4033D     758                   cjne a, #0x03, bcd_bit_2
121C            759                   
121C C002       760            push AR2
121E 7AFA       760            mov R2, #250
1220 1201FA     760            lcall ?Wait_Milli_Seconds
1223 D002       760            pop AR2
1225 E56C       761                   mov a, keyin
1227 B40A02     762                   cjne a,#0x0A,continue_bcd
122A 7400       763                   mov a,#0x00
122C            764       continue_bcd:
122C 540F       765                   anl a, #0x0f
122E            766                        ;orl a, NEW_BCD+1
122E F556       767                        mov NEW_BCD+1,a
1230 755302     768                   mov bcd_bitnumber, #0x02
1233            769                   ;display new_bcd
1233 C0E0       770            push acc
1235 740D       770            mov a, #13
1237 14         770            dec a
1238 120289     770            lcall ?Set_Cursor_2 ; Select column and row
123B D0E0       770            pop acc
123D            771       ;Display_3BCD(bcd to display)
123D            771       ;now the bcd num of time is stored in bcd
123D C000       771            push ar0
123F A856       771            mov r0, NEW_BCD+1
1241 1202A6     771            lcall ?Display_NUM
1244 D000       771            pop ar0;
1246 C000       771            push ar0
1248 A855       771            mov r0, NEW_BCD
124A 120290     771            lcall ?Display_BCD
124D D000       771            pop ar0;
124F            772   
124F C002       773            push AR2
1251 7AFA       773            mov R2, #250
1253 1201FA     773            lcall ?Wait_Milli_Seconds
1256 D002       773            pop AR2
1258            774                   
1258 22         775                   ret
1259            776   
1259            777   
1259            778       bcd_bit_2:
1259 E553       779                   mov a , bcd_bitnumber
125B B40246     780                   cjne a, #0x02, bcd_bit_1
125E C002       781            push AR2
1260 7AFA       781            mov R2, #250
1262 1201FA     781            lcall ?Wait_Milli_Seconds
1265 D002       781            pop AR2
1267 E555       782                   mov a, NEW_BCD
1269 540F       783                   anl a, #0x0f
126B F555       784                   mov NEW_BCD,a
126D E56C       785                   mov a, keyin
126F B40A02     786                   cjne a,#0x0A,continue_bcd_1
1272 7400       787                   mov a,#0x00
1274            788       continue_bcd_1:
1274 540F       789                   anl a, #0x0f
1276 C4         790                   swap a
1277 4555       791                        orl a, NEW_BCD
1279 F555       792                        mov NEW_BCD,a
127B 755301     793                   mov bcd_bitnumber, #0x01
127E            794                   ;display new_bcd
127E C0E0       795            push acc
1280 740D       795            mov a, #13
1282 14         795            dec a
1283 120289     795            lcall ?Set_Cursor_2 ; Select column and row
1286 D0E0       795            pop acc
1288            796       ;Display_3BCD(bcd to display)
1288            796       ;now the bcd num of time is stored in bcd
1288 C000       796            push ar0
128A A856       796            mov r0, NEW_BCD+1
128C 1202A6     796            lcall ?Display_NUM
128F D000       796            pop ar0;
1291 C000       796            push ar0
1293 A855       796            mov r0, NEW_BCD
1295 120290     796            lcall ?Display_BCD
1298 D000       796            pop ar0;
129A            797   
129A C002       798            push AR2
129C 7AFA       798            mov R2, #250
129E 1201FA     798            lcall ?Wait_Milli_Seconds
12A1 D002       798            pop AR2
12A3            799              
12A3 22         800                   ret
12A4            801   
12A4            802       bcd_bit_1:  
12A4 C002       803            push AR2
12A6 7AFA       803            mov R2, #250
12A8 1201FA     803            lcall ?Wait_Milli_Seconds
12AB D002       803            pop AR2
12AD E555       804                   mov a, NEW_BCD
12AF 54F0       805                   anl a, #0xf0
12B1 F555       806                   mov NEW_BCD,a
12B3 E56C       807                   mov a, keyin
12B5 B40A02     808                   cjne a,#0x0A,continue_bcd_2
12B8 7400       809                   mov a,#0x00
12BA            810       continue_bcd_2:
12BA 540F       811                   anl a, #0x0f
12BC 4555       812                        orl a, NEW_BCD
12BE F555       813                        mov NEW_BCD,a
12C0 755303     814                   mov bcd_bitnumber, #0x03
12C3            815                   ;display new_bcd
12C3 C0E0       816            push acc
12C5 740D       816            mov a, #13
12C7 14         816            dec a
12C8 120289     816            lcall ?Set_Cursor_2 ; Select column and row
12CB D0E0       816            pop acc
12CD            817       ;Display_3BCD(bcd to display)
12CD            817       ;now the bcd num of time is stored in bcd
12CD C000       817            push ar0
12CF A856       817            mov r0, NEW_BCD+1
12D1 1202A6     817            lcall ?Display_NUM
12D4 D000       817            pop ar0;
12D6 C000       817            push ar0
12D8 A855       817            mov r0, NEW_BCD
12DA 120290     817            lcall ?Display_BCD
12DD D000       817            pop ar0;
12DF            818   
12DF C002       819            push AR2
12E1 7AFA       819            mov R2, #250
12E3 1201FA     819            lcall ?Wait_Milli_Seconds
12E6 D002       819            pop AR2
12E8            820                   
12E8 22         821                   ret
12E9            822                   
12E9            823       normal_button:
12E9 E56C       824                   mov a, keyin
12EB            825                  
12EB B40B03     826                   cjne a, #11, button_c_u_d
12EE            827                   
12EE 021333     828                   ljmp scanstate
12F1            829       button_c_u_d:
12F1 E56C       830                   mov a, keyin
12F3 B40C0C     831                   cjne a,#12, button_u_d
12F6 7400       832                   mov a, #0x0
12F8 F555       833                   mov NEW_BCD,a
12FA F556       834                   mov NEW_BCD+1,a
12FC 755303     835                   mov bcd_bitnumber,#0x03
12FF 0211EB     836                   ljmp FSM0_Done
1302            837       button_u_d:
1302 E56C       838                   mov a,keyin
1304 B40D16     839                   cjne a,#13,button_d
1307 E534       840                   mov a, FSM0_State
1309 B40409     841                   cjne a,#0x04, state_add
130C 753400     842                   mov FSM0_State, #0x00
130F 1213BD     843                   lcall change_state_flag
1312 0211EB     844                   ljmp FSM0_Done
1315            845       state_add:
1315 0534       846                   inc FSM0_State
1317 1213BD     847                   lcall change_state_flag
131A 0211EB     848                   ljmp FSM0_Done
131D            849   
131D            850       button_d:
131D E534       851                   mov a, FSM0_State
131F B40009     852                   cjne a, #0x00, state_minus
1322 753404     853                   mov FSM0_State, #0x04
1325 1213BD     854                   lcall change_state_flag
1328 0211EB     855                   ljmp FSM0_Done
132B            856   
132B            857       state_minus:
132B 1534       858                   dec FSM0_State
132D 1213BD     859                   lcall change_state_flag
1330 0211EB     860                   ljmp FSM0_Done
1333            861   
1333            862   
1333            863   
1333            864       scanstate:
1333 E534       865                   mov a, FSM0_State
1335            866                   
1335 B40003     867                   cjne a,#0x00,change_temp_soak
1338            868   
1338 0211EB     869                   ljmp FSM0_Done
133B            870       change_temp_soak:
133B B40134     871                   cjne a,#0x01,change_time_soak
133E 85555F     872                   mov bcd, NEW_BCD
1341 855660     873                   mov bcd+1,NEW_BCD+1
1344 756100     874                   mov bcd+2,#0x0
1347 756200     875                   mov bcd+3,#0x0
134A 756300     876                   mov bcd+4,#0x0
134D            877   
134D 12033C     878                   lcall bcd2hex
1350 855737     879                   mov TEMP_SOAK,x
1353 C0E0       880            push acc
1355 7401       880            mov a, #1
1357 14         880            dec a
1358 12028B     880            lcall ?Set_Cursor_1 ; Select column and row
135B D0E0       880            pop acc
135D            881       ;Display_3BCD(bcd to display)
135D            881       ;now the bcd num of time is stored in bcd
135D C000       881            push ar0
135F A838       881            mov r0, TEMP_SOAK+1
1361 1202A6     881            lcall ?Display_NUM
1364 D000       881            pop ar0;
1366 C000       881            push ar0
1368 A837       881            mov r0, TEMP_SOAK
136A 120290     881            lcall ?Display_BCD
136D D000       881            pop ar0;
136F 0211EB     882                   ljmp FSM0_Done
1372            883       change_time_soak:
1372 B40215     884                   cjne a,#0x02,change_temp_reflow
1375 85555F     885                   mov bcd, NEW_BCD
1378 855660     886                   mov bcd+1,NEW_BCD+1
137B 756200     887                   mov bcd+3,#0x0
137E 756300     888                   mov bcd+4,#0x0
1381 12033C     889                   lcall bcd2hex
1384 85573B     890                   mov TIME_SOAK,x
1387 0211EB     891                   ljmp FSM0_Done
138A            892       change_temp_reflow:
138A B40318     893                   cjne a,#0x03,change_time_reflow
138D 85555F     894                   mov bcd, NEW_BCD
1390 855660     895                   mov bcd+1,NEW_BCD+1
1393 756100     896                   mov bcd+2,#0x0
1396 756200     897                   mov bcd+3,#0x0
1399 756300     898                   mov bcd+4,#0x0
139C 12033C     899                   lcall bcd2hex
139F 85573F     900                   mov TEMP_RFLW,x
13A2 0211EB     901                   ljmp FSM0_Done
13A5            902       change_time_reflow:
13A5 85555F     903                   mov bcd, NEW_BCD
13A8 855660     904                   mov bcd+1,NEW_BCD+1
13AB 756100     905                   mov bcd+2,#0x0
13AE 756200     906                   mov bcd+3,#0x0
13B1 756300     907                   mov bcd+4,#0x0
13B4 12033C     908                   lcall bcd2hex
13B7 855743     909                   mov TIME_RFLW,x
13BA 0211EB     910                   ljmp FSM0_Done
13BD            911       change_state_flag:
13BD 755500     912               mov NEW_BCD,#0x0
13C0 755600     913               mov NEW_BCD+1,#0x0
13C3 22         914               ret
13C4            915   
13C4            916   
13C4            917       ;---------------------------------;
13C4            918       ; FSM1 using Timer Interrupt      ;
13C4            919       ;---------------------------------;
13C4            920       ;update status and send data to LCD and PC every one/half seconds
13C4            921   FSM1:
13C4 E535       922       mov a, FSM1_State
13C6            923       FSM1_State0:
13C6 B40002     924           cjne a, #0, JUMP_FSM1_State1
13C9 8003       925           sjmp Start_FSM1_State0
13CB            926           JUMP_FSM1_State1:
13CB 021494     927           ljmp FSM1_State1
13CE            928           
13CE            929           Start_FSM1_State0:
13CE D203       930           setb enable_time_global
13D0 D208       931           setb speak_enable
13D2 D2A7       932           setb OVEN; turn oven on
13D4 1206D7     933       lcall Read_Room_Temp
13D7 1205FD     933       lcall Read_Oven_Temp
13DA            933   
13DA            933       ;mov(dst, src)
13DA 85525A     933            mov x+3, Current_Oven_Temp+3
13DD 855159     933       mov x+2, Current_Oven_Temp+2
13E0 855058     933       mov x+1, Current_Oven_Temp+1
13E3 854F57     933       mov x,   Current_Oven_Temp
13E6            933       ;mov(dst, src)
13E6 853A5E     933            mov y+3, TEMP_SOAK+3
13E9 85395D     933       mov y+2, TEMP_SOAK+2
13EC 85385C     933       mov y+1, TEMP_SOAK+1
13EF 85375B     933       mov y,   TEMP_SOAK
13F2            933   
13F2 1203BB     933       lcall x_lt_y    ;Read Temperatures
13F5 C0E0       934            push acc
13F7 7401       934            mov a, #1
13F9 14         934            dec a
13FA 12028B     934            lcall ?Set_Cursor_1 ; Select column and row
13FD D0E0       934            pop acc
13FF C083       934            push dph
1401 C082       934            push dpl
1403 C0E0       934            push acc
1405 900146     934            mov dptr, #WORKING
1408 12027E     934            lcall ?Send_Constant_String
140B D0E0       934            pop acc
140D D082       934            pop dpl
140F D083       934            pop dph
1411 C0E0       934            push acc
1413 7401       934            mov a, #1
1415 14         934            dec a
1416 120289     934            lcall ?Set_Cursor_2 ; Select column and row
1419 D0E0       934            pop acc
141B C083       934            push dph
141D C082       934            push dpl
141F C0E0       934            push acc
1421 900157     934            mov dptr, #STEP1
1424 12027E     934            lcall ?Send_Constant_String
1427 D0E0       934            pop acc
1429 D082       934            pop dpl
142B D083       934            pop dph;display interface
142D 120D36     935           lcall Display_Working_Status
1430 C0E0       936            push acc
1432 7406       936            mov a, #6
1434 14         936            dec a
1435 120289     936            lcall ?Set_Cursor_2 ; Select column and row
1438 D0E0       936            pop acc
143A            937       ;mov(dst, src)
143A 853A5A     937            mov x+3, TEMP_SOAK+3
143D 853959     937       mov x+2, TEMP_SOAK+2
1440 853858     937       mov x+1, TEMP_SOAK+1
1443 853757     937       mov x,   TEMP_SOAK
1446 1202B3     938       lcall hex2bcd
1449            938       ;now the bcd num of time is stored in bcd
1449 C000       938            push ar0
144B A860       938            mov r0, bcd+1
144D 1202A6     938            lcall ?Display_NUM
1450 D000       938            pop ar0;
1452 C000       938            push ar0
1454 A85F       938            mov r0, bcd
1456 120290     938            lcall ?Display_BCD
1459 D000       938            pop ar0;
145B            939   
145B 20020D     940           jb mf, FSM1_State0_Error_Check;check Error and continue if smaller than set time
145E            941           ;if temp greater
145E 120BAA     942           lcall clear_speaking
1461 120B03     943           lcall preheat_and_soak
1464 0535       944           inc FSM1_State; go to next state            
1466 853B33     945           mov Time_Counter, TIME_SOAK; move the TIME_SOAK in counter and count down
1469 8026       946           sjmp FSM1_State0_Done
146B            947   
146B            948           FSM1_State0_Error_Check:
146B E531       949           mov a, Time_Global
146D B43C21     950           cjne a, #QUITTIME, FSM1_State0_Done; not time, done
1470            951           ;if time reached, check temp
1470            952       ;mov(dst, src)
1470 85525A     952            mov x+3, Current_Oven_Temp+3
1473 855159     952       mov x+2, Current_Oven_Temp+2
1476 855058     952       mov x+1, Current_Oven_Temp+1
1479 854F57     952       mov x,   Current_Oven_Temp;move current oven temp in x
147C 755E00     953           mov y+3, #0
147F 755D00     954           mov y+2, #0
1482 755C00     955           mov y+1, #0
1485 755B32     956           mov y, #QUITTEMP
1488 1203BB     957           lcall x_lt_y; check if current oven temp is smaller than quittemp
148B            958   
148B 300203     959           jnb mf, FSM1_State0_Done; the oven is working properly
148E            960           ;if not working right
148E 02177E     961           ljmp FSM1_WARNING
1491            962   
1491            963           FSM1_State0_Done:
1491 0217BD     964               ljmp FSM1_DONE
1494            965   
1494            966   
1494            967       FSM1_State1:
1494 B40102     968           cjne a, #1, JUMP_FSM1_State2
1497 8003       969               sjmp Start_FSM1_State1
1499            970           JUMP_FSM1_State2:
1499 021540     971               ljmp FSM1_State2
149C            972           
149C            973           Start_FSM1_State1:
149C D5330B     974           djnz Time_Counter, FSM1_State1_Continue; decrement every 1 second
149F            975           ;time over, change state
149F 120BAA     976           lcall clear_speaking
14A2 120B22     977           lcall ramp_to_peak
14A5 0535       978           inc FSM1_State; increment states
14A7 02153D     979           ljmp FSM1_State1_Done
14AA            980   
14AA            981           FSM1_State1_Continue:
14AA            982           ;next: check temp
14AA            983           ;read temp and compare
14AA 1206D7     984       lcall Read_Room_Temp
14AD 1205FD     984       lcall Read_Oven_Temp
14B0            984   
14B0            984       ;mov(dst, src)
14B0 85525A     984            mov x+3, Current_Oven_Temp+3
14B3 855159     984       mov x+2, Current_Oven_Temp+2
14B6 855058     984       mov x+1, Current_Oven_Temp+1
14B9 854F57     984       mov x,   Current_Oven_Temp
14BC            984       ;mov(dst, src)
14BC 853A5E     984            mov y+3, TEMP_SOAK+3
14BF 85395D     984       mov y+2, TEMP_SOAK+2
14C2 85385C     984       mov y+1, TEMP_SOAK+1
14C5 85375B     984       mov y,   TEMP_SOAK
14C8            984   
14C8 1203BB     984       lcall x_lt_y   ;Update current temp info
14CB C0E0       985            push acc
14CD 7401       985            mov a, #1
14CF 14         985            dec a
14D0 12028B     985            lcall ?Set_Cursor_1 ; Select column and row
14D3 D0E0       985            pop acc
14D5 C083       985            push dph
14D7 C082       985            push dpl
14D9 C0E0       985            push acc
14DB 900146     985            mov dptr, #WORKING
14DE 12027E     985            lcall ?Send_Constant_String
14E1 D0E0       985            pop acc
14E3 D082       985            pop dpl
14E5 D083       985            pop dph
14E7 C0E0       985            push acc
14E9 7401       985            mov a, #1
14EB 14         985            dec a
14EC 120289     985            lcall ?Set_Cursor_2 ; Select column and row
14EF D0E0       985            pop acc
14F1 C083       985            push dph
14F3 C082       985            push dpl
14F5 C0E0       985            push acc
14F7 900168     985            mov dptr, #STEP2
14FA 12027E     985            lcall ?Send_Constant_String
14FD D0E0       985            pop acc
14FF D082       985            pop dpl
1501 D083       985            pop dph
1503 120D36     986           lcall Display_Working_Status; update time and temp on lcd
1506            987           ;if temp is lower than expected, jump to ON
1506 C0E0       988            push acc
1508 7405       988            mov a, #5
150A 14         988            dec a
150B 120289     988            lcall ?Set_Cursor_2 ; Select column and row
150E D0E0       988            pop acc
1510 755700     989            mov x+0, #low (0 % 0x10000) 
1513 755800     989            mov x+1, #high(0 % 0x10000) 
1516 755900     989            mov x+2, #low (0 / 0x10000) 
1519 755A00     989            mov x+3, #high(0 / 0x10000) 
151C 853357     990           mov x, Time_Counter
151F 1202B3     991       lcall hex2bcd
1522            991       ;now the bcd num of time is stored in bcd
1522 C000       991            push ar0
1524 A860       991            mov r0, bcd+1
1526 1202A6     991            lcall ?Display_NUM
1529 D000       991            pop ar0;
152B C000       991            push ar0
152D A85F       991            mov r0, bcd
152F 120290     991            lcall ?Display_BCD
1532 D000       991            pop ar0;
1534            992   
1534 200204     993           jb mf, FSM1_State1_ON
1537            994           ;if temp is higher, close oven
1537 C2A7       995           clr OVEN 
1539 8002       996           sjmp FSM1_State1_Done
153B            997   
153B            998           FSM1_State1_ON:
153B D2A7       999           setb OVEN   ;if temp is lower, turn on oven
153D           1000           FSM1_State1_Done:
153D 0217BD    1001               ljmp FSM1_DONE
1540           1002   
1540           1003       FSM1_State2: ;temp ramp up until TEMP_RFLW
1540 B40202    1004           cjne a, #2, JUMP_FSM1_State3
1543 8003      1005               sjmp Start_FSM1_State2
1545           1006           JUMP_FSM1_State3:
1545 0215E5    1007               ljmp FSM1_State3
1548           1008   
1548           1009           Start_FSM1_State2:
1548 D2A7      1010           setb OVEN; turn on oven
154A           1011   
154A           1012           ;read temperature
154A 1206D7    1013       lcall Read_Room_Temp
154D 1205FD    1013       lcall Read_Oven_Temp
1550           1013   
1550           1013       ;mov(dst, src)
1550 85525A    1013            mov x+3, Current_Oven_Temp+3
1553 855159    1013       mov x+2, Current_Oven_Temp+2
1556 855058    1013       mov x+1, Current_Oven_Temp+1
1559 854F57    1013       mov x,   Current_Oven_Temp
155C           1013       ;mov(dst, src)
155C 85425E    1013            mov y+3, TEMP_RFLW+3
155F 85415D    1013       mov y+2, TEMP_RFLW+2
1562 85405C    1013       mov y+1, TEMP_RFLW+1
1565 853F5B    1013       mov y,   TEMP_RFLW
1568           1013   
1568 1203BB    1013       lcall x_lt_y
156B 20020E    1014           jb mf, FSM1_State2_Continue
156E           1015           ;if temp reached
156E 120BAA    1016           lcall clear_speaking
1571 120B41    1017           lcall reflow
1574 0535      1018           inc FSM1_State
1576 854333    1019           mov Time_Counter, TIME_RFLW
1579 0217BD    1020           ljmp FSM1_DONE
157C           1021   
157C           1022           FSM1_State2_Continue:
157C C0E0      1023            push acc
157E 7401      1023            mov a, #1
1580 14        1023            dec a
1581 12028B    1023            lcall ?Set_Cursor_1 ; Select column and row
1584 D0E0      1023            pop acc
1586 C083      1023            push dph
1588 C082      1023            push dpl
158A C0E0      1023            push acc
158C 900146    1023            mov dptr, #WORKING
158F 12027E    1023            lcall ?Send_Constant_String
1592 D0E0      1023            pop acc
1594 D082      1023            pop dpl
1596 D083      1023            pop dph
1598 C0E0      1023            push acc
159A 7401      1023            mov a, #1
159C 14        1023            dec a
159D 120289    1023            lcall ?Set_Cursor_2 ; Select column and row
15A0 D0E0      1023            pop acc
15A2 C083      1023            push dph
15A4 C082      1023            push dpl
15A6 C0E0      1023            push acc
15A8 900179    1023            mov dptr, #STEP3
15AB 12027E    1023            lcall ?Send_Constant_String
15AE D0E0      1023            pop acc
15B0 D082      1023            pop dpl
15B2 D083      1023            pop dph
15B4 120D36    1024           lcall Display_Working_Status
15B7 C0E0      1025            push acc
15B9 7406      1025            mov a, #6
15BB 14        1025            dec a
15BC 120289    1025            lcall ?Set_Cursor_2 ; Select column and row
15BF D0E0      1025            pop acc
15C1           1026       ;mov(dst, src)
15C1 85425A    1026            mov x+3, TEMP_RFLW+3
15C4 854159    1026       mov x+2, TEMP_RFLW+2
15C7 854058    1026       mov x+1, TEMP_RFLW+1
15CA 853F57    1026       mov x,   TEMP_RFLW
15CD 1202B3    1027       lcall hex2bcd
15D0           1027       ;now the bcd num of time is stored in bcd
15D0 C000      1027            push ar0
15D2 A860      1027            mov r0, bcd+1
15D4 1202A6    1027            lcall ?Display_NUM
15D7 D000      1027            pop ar0;
15D9 C000      1027            push ar0
15DB A85F      1027            mov r0, bcd
15DD 120290    1027            lcall ?Display_BCD
15E0 D000      1027            pop ar0;
15E2           1028   
15E2           1029           FSM1_State2_Done:
15E2 0217BD    1030               ljmp FSM1_DONE
15E5           1031           
15E5           1032            FSM1_State3: ; keep temp at TEMP_RFLW for a few time
15E5 B40302    1033           cjne a, #3, JUMP_FSM1_State4
15E8 8003      1034               sjmp Start_FSM1_State3
15EA           1035           JUMP_FSM1_State4:
15EA 021691    1036               ljmp FSM1_State4
15ED           1037           
15ED           1038           Start_FSM1_State3:
15ED D5330B    1039           djnz Time_Counter, FSM1_State3_Continue
15F0           1040           ;if time's up
15F0 120BAA    1041           lcall clear_speaking
15F3 120B60    1042           lcall cooling
15F6 0535      1043           inc FSM1_State
15F8 02168E    1044           ljmp FSM1_State3_Done
15FB           1045   
15FB           1046           FSM1_State3_Continue:
15FB C0E0      1047            push acc
15FD 7401      1047            mov a, #1
15FF 14        1047            dec a
1600 12028B    1047            lcall ?Set_Cursor_1 ; Select column and row
1603 D0E0      1047            pop acc
1605 C083      1047            push dph
1607 C082      1047            push dpl
1609 C0E0      1047            push acc
160B 900146    1047            mov dptr, #WORKING
160E 12027E    1047            lcall ?Send_Constant_String
1611 D0E0      1047            pop acc
1613 D082      1047            pop dpl
1615 D083      1047            pop dph
1617 C0E0      1047            push acc
1619 7401      1047            mov a, #1
161B 14        1047            dec a
161C 120289    1047            lcall ?Set_Cursor_2 ; Select column and row
161F D0E0      1047            pop acc
1621 C083      1047            push dph
1623 C082      1047            push dpl
1625 C0E0      1047            push acc
1627 90018A    1047            mov dptr, #STEP4
162A 12027E    1047            lcall ?Send_Constant_String
162D D0E0      1047            pop acc
162F D082      1047            pop dpl
1631 D083      1047            pop dph
1633 120D36    1048           lcall Display_Working_Status
1636 1206D7    1049       lcall Read_Room_Temp
1639 1205FD    1049       lcall Read_Oven_Temp
163C           1049   
163C           1049       ;mov(dst, src)
163C 85525A    1049            mov x+3, Current_Oven_Temp+3
163F 855159    1049       mov x+2, Current_Oven_Temp+2
1642 855058    1049       mov x+1, Current_Oven_Temp+1
1645 854F57    1049       mov x,   Current_Oven_Temp
1648           1049       ;mov(dst, src)
1648 85425E    1049            mov y+3, TEMP_RFLW+3
164B 85415D    1049       mov y+2, TEMP_RFLW+2
164E 85405C    1049       mov y+1, TEMP_RFLW+1
1651 853F5B    1049       mov y,   TEMP_RFLW
1654           1049   
1654 1203BB    1049       lcall x_lt_y; update temp info, set or clr mf flag
1657 C0E0      1050            push acc
1659 7405      1050            mov a, #5
165B 14        1050            dec a
165C 120289    1050            lcall ?Set_Cursor_2 ; Select column and row
165F D0E0      1050            pop acc
1661 755700    1051            mov x+0, #low (0 % 0x10000) 
1664 755800    1051            mov x+1, #high(0 % 0x10000) 
1667 755900    1051            mov x+2, #low (0 / 0x10000) 
166A 755A00    1051            mov x+3, #high(0 / 0x10000) 
166D 853357    1052           mov x, Time_Counter
1670 1202B3    1053       lcall hex2bcd
1673           1053       ;now the bcd num of time is stored in bcd
1673 C000      1053            push ar0
1675 A860      1053            mov r0, bcd+1
1677 1202A6    1053            lcall ?Display_NUM
167A D000      1053            pop ar0;
167C C000      1053            push ar0
167E A85F      1053            mov r0, bcd
1680 120290    1053            lcall ?Display_BCD
1683 D000      1053            pop ar0;
1685           1054   
1685           1055           ;if temp is lower than expected, jump to ON
1685 200204    1056           jb mf, FSM1_State3_ON
1688           1057           ;if temp is higher, close oven
1688 C2A7      1058           clr OVEN 
168A 8002      1059           sjmp FSM1_State3_Done
168C           1060   
168C           1061           FSM1_State3_ON:
168C D2A7      1062           setb OVEN   ;if temp is lower, turn on oven
168E           1063           FSM1_State3_Done:
168E 0217BD    1064               ljmp FSM1_DONE
1691           1065           
1691           1066   
1691           1067       
1691           1068       FSM1_State4:; cool down until safe temp
1691 B40402    1069           cjne a, #4, JUMP_FSM1_State5
1694 8003      1070               sjmp Start_FSM1_State4
1696           1071           JUMP_FSM1_State5:
1696 021733    1072               ljmp FSM1_State5
1699           1073           
1699           1074           Start_FSM1_State4:
1699 C2A7      1075           clr OVEN
169B           1076           ;read temperature
169B 1206D7    1077       lcall Read_Room_Temp
169E 1205FD    1077       lcall Read_Oven_Temp
16A1           1077   
16A1           1077       ;mov(dst, src)
16A1 85525A    1077            mov x+3, Current_Oven_Temp+3
16A4 855159    1077       mov x+2, Current_Oven_Temp+2
16A7 855058    1077       mov x+1, Current_Oven_Temp+1
16AA 854F57    1077       mov x,   Current_Oven_Temp
16AD           1077       ;mov(dst, src)
16AD 854A5E    1077            mov y+3, TEMP_SAFE+3
16B0 85495D    1077       mov y+2, TEMP_SAFE+2
16B3 85485C    1077       mov y+1, TEMP_SAFE+1
16B6 85475B    1077       mov y,   TEMP_SAFE
16B9           1077   
16B9 1203BB    1077       lcall x_lt_y
16BC           1078           ;if temp is smaller than TEMP_SAFE, go state 5
16BC 300205    1079           jnb mf, FSM1_State4_Continue
16BF           1080           ;if temp is smaller than expected
16BF 0535      1081           inc FSM1_State
16C1 753300    1082           mov Time_Counter, #0
16C4           1083   
16C4           1084           FSM1_State4_Continue:
16C4 C0E0      1085            push acc
16C6 7401      1085            mov a, #1
16C8 14        1085            dec a
16C9 12028B    1085            lcall ?Set_Cursor_1 ; Select column and row
16CC D0E0      1085            pop acc
16CE C083      1085            push dph
16D0 C082      1085            push dpl
16D2 C0E0      1085            push acc
16D4 900146    1085            mov dptr, #WORKING
16D7 12027E    1085            lcall ?Send_Constant_String
16DA D0E0      1085            pop acc
16DC D082      1085            pop dpl
16DE D083      1085            pop dph
16E0 C0E0      1085            push acc
16E2 7401      1085            mov a, #1
16E4 14        1085            dec a
16E5 120289    1085            lcall ?Set_Cursor_2 ; Select column and row
16E8 D0E0      1085            pop acc
16EA C083      1085            push dph
16EC C082      1085            push dpl
16EE C0E0      1085            push acc
16F0 90019B    1085            mov dptr, #STEP5
16F3 12027E    1085            lcall ?Send_Constant_String
16F6 D0E0      1085            pop acc
16F8 D082      1085            pop dpl
16FA D083      1085            pop dph
16FC 120D36    1086           lcall Display_Working_Status
16FF C0E0      1087            push acc
1701 7405      1087            mov a, #5
1703 14        1087            dec a
1704 120289    1087            lcall ?Set_Cursor_2 ; Select column and row
1707 D0E0      1087            pop acc
1709 755700    1088            mov x+0, #low (0 % 0x10000) 
170C 755800    1088            mov x+1, #high(0 % 0x10000) 
170F 755900    1088            mov x+2, #low (0 / 0x10000) 
1712 755A00    1088            mov x+3, #high(0 / 0x10000) 
1715 854757    1089           mov x, TEMP_SAFE
1718 1202B3    1090           lcall hex2bcd
171B 1202B3    1091       lcall hex2bcd
171E           1091       ;now the bcd num of time is stored in bcd
171E C000      1091            push ar0
1720 A860      1091            mov r0, bcd+1
1722 1202A6    1091            lcall ?Display_NUM
1725 D000      1091            pop ar0;
1727 C000      1091            push ar0
1729 A85F      1091            mov r0, bcd
172B 120290    1091            lcall ?Display_BCD
172E D000      1091            pop ar0;
1730           1092   
1730           1093           FSM1_State4_Done:
1730 0217BD    1094               ljmp FSM1_DONE
1733           1095   
1733           1096       FSM1_State5: ; already cool done, display something, play some music
1733 B40502    1097            cjne a, #5, JUMP_FSM1_DOne
1736 8003      1098               sjmp Start_FSM1_State5
1738           1099           JUMP_FSM1_Done:
1738 0217BD    1100               ljmp FSM1_Done
173B           1101               
173B           1102           Start_FSM1_State5:
173B C2A7      1103           clr OVEN; double check oven is not on
173D C203      1104           clr enable_time_global; stop counting
173F C208      1105           clr speak_enable
1741 C0E0      1106            push acc
1743 7401      1106            mov a, #1
1745 14        1106            dec a
1746 12028B    1106            lcall ?Set_Cursor_1 ; Select column and row
1749 D0E0      1106            pop acc
174B C083      1106            push dph
174D C082      1106            push dpl
174F C0E0      1106            push acc
1751 900146    1106            mov dptr, #WORKING
1754 12027E    1106            lcall ?Send_Constant_String
1757 D0E0      1106            pop acc
1759 D082      1106            pop dpl
175B D083      1106            pop dph
175D C0E0      1106            push acc
175F 7401      1106            mov a, #1
1761 14        1106            dec a
1762 120289    1106            lcall ?Set_Cursor_2 ; Select column and row
1765 D0E0      1106            pop acc
1767 C083      1106            push dph
1769 C082      1106            push dpl
176B C0E0      1106            push acc
176D 9001AC    1106            mov dptr, #STEP6
1770 12027E    1106            lcall ?Send_Constant_String
1773 D0E0      1106            pop acc
1775 D082      1106            pop dpl
1777 D083      1106            pop dph
1779 120D36    1107           lcall Display_Working_Status
177C 803F      1108           sjmp FSM1_Done
177E           1109   
177E           1110   
177E           1111       FSM1_WARNING:
177E C2A7      1112           clr OVEN
1780 C0E0      1113            push acc
1782 7401      1113            mov a, #1
1784 14        1113            dec a
1785 12028B    1113            lcall ?Set_Cursor_1 ; Select column and row
1788 D0E0      1113            pop acc
178A C083      1113            push dph
178C C082      1113            push dpl
178E C0E0      1113            push acc
1790 9001BD    1113            mov dptr, #WARNING1
1793 12027E    1113            lcall ?Send_Constant_String
1796 D0E0      1113            pop acc
1798 D082      1113            pop dpl
179A D083      1113            pop dph
179C C0E0      1113            push acc
179E 7401      1113            mov a, #1
17A0 14        1113            dec a
17A1 120289    1113            lcall ?Set_Cursor_2 ; Select column and row
17A4 D0E0      1113            pop acc
17A6 C083      1113            push dph
17A8 C082      1113            push dpl
17AA C0E0      1113            push acc
17AC 9001CE    1113            mov dptr, #WARNING2
17AF 12027E    1113            lcall ?Send_Constant_String
17B2 D0E0      1113            pop acc
17B4 D082      1113            pop dpl
17B6 D083      1113            pop dph
17B8 C208      1114           clr speak_enable
17BA 753506    1115           mov FSM1_State, #6
17BD           1116   
17BD           1117       FSM1_DONE:
17BD 22        1118       ret
17BE           1119   
17BE           1120   EN
