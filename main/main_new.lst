                  2   $LIST
0000              4   
0000              5   ;-------------------;
0000              6   ;    Const Define   ;
0000              7   ;-------------------; 
0000              8   XTAL EQU 7373000
0000              9   BAUD EQU 115200
0000             10   BRVAL EQU ((XTAL/BAUD)-16)
0000             11   
0000             12   CCU_RATE      EQU 22050
0000             13   CCU_RELOAD    EQU ((65536-((XTAL/(2*CCU_RATE)))))
0000             14   
0000             15   ;TIMER0_RATE   EQU 4096    ; 4096Hz
0000             16   ;TIMER0_RELOAD EQU ((65536-(XTAL/(2*TIMER0_RATE))))
0000             17   TIMER1_RATE   EQU 100     ; 1000Hz, for a timer tick of 1ms
0000             18   TIMER1_RELOAD EQU ((65536-(XTAL/(2*TIMER1_RATE))))
0000             19   QUITTIME      EQU 60
0000             20   QUITTEMP      EQU 50
0000             21   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             22   
0000             23   number_off_set EQU 17200 ;the distance between each number
0000             24   ;number start at ff
0000             25   
0000             26   ;starting addressed of different sound tracks
0000             27   decimal_start  EQU 360000
0000             28   decimal_off_set EQU 24100
0000             29   decimal_playtime EQU 50000
0000             30   
0000             31   special_dec_start EQU 174000 ;numbers from 10 to 19
0000             32   special_off_set EQU 21500
0000             33   special_playtime EQU 21500;19000
0000             34   
0000             35   hundreds_start EQU 563000
0000             36   hundreds_off_set EQU 36000
0000             37   
0000             38   current_temp_is_start EQU 674000
0000             39   current_temp_playtime EQU 35000
0000             40   
0000             41   degree_start EQU 710000
0000             42   degree_playtime EQU 11018
0000             43   
0000             44   celsius_start EQU 732236
0000             45   celsius_playtime EQU 17000
0000             46   
0000             47   current_process_is_start EQU 757000
0000             48   current_process_is_playtime EQU 27000
0000             49            
0000             50   ramp_to_soak_start EQU 790000
0000             51   ramp_to_soak_playtime EQU 25000
0000             52   
0000             53   preheat_and_soak_start EQU 822000
0000             54   preheat_and_soak_playtime EQU 27000
0000             55   
0000             56   ramp_to_peak_start EQU 857000
0000             57   ramp_to_peak_playtime EQU 19000
0000             58   
0000             59   reflow_start EQU 885000
0000             60   reflow_playtime EQU 15000
0000             61   
0000             62   cooling_start EQU 906000
0000             63   cooling_playtime EQU 14000
0000             64   ;-------------------;
0000             65   ;    Ports Define   ;
0000             66   ;-------------------; 
0000             67   ;ADC01 equ P0.0; Read Room Temperature
0000             68   LCD_RS equ P0.1
0000             69   LCD_RW equ P0.2
0000             70   LCD_E  equ P0.3
0000             71   ;Soundout  P0.4
0000             72   LCD_D4 equ P0.5
0000             73   LCD_D5 equ P0.6
0000             74   LCD_D6 equ P0.7
0000             75   LCD_D7 equ P3.0
0000             76   ;          P3.1
0000             77   ;          P1.2
0000             78   Start  equ P1.3
0000             79   Stop   equ P1.4
0000             80   LED    equ P1.6
0000             81   ;ADC00 equ P1.7; Read Oven Temperature
0000             82   ;ADC03 equ P2.0; Read Keyboard1
0000             83   ;ADC02 equ P2.1; Read Keyboard0
0000             84   ;MOSI  equ P2.2
0000             85   ;MISO  equ P2.3
0000             86   FLASH_CE EQU P2.4
0000             87   ;SPICK equ P2.5
0000             88   ;WAVEOUT   P2.6
0000             89   OVEN   equ P2.7
0000             90   
0000             91   ;------------------------;
0000             92   ;    Interrupt Vectors   ;
0000             93   ;------------------------; 
0000             94   ; Reset vector
0000             95   org 0x0000
0000 020C62      96       ljmp MainProgram
0003             97   
0003             98   ; External interrupt 0 vector, start
0003             99   org 0x0003
0003 020DF0     100            ljmp EI0_ISR
0006            101   
0006            102   ; Timer/Counter 0 overflow interrupt vector
000B            103   org 0x000B
000B 32         104            reti
000C            105   
000C            106   ; External interrupt 1 vector, stop
0013            107   org 0x0013
0013 020DFE     108            ljmp EI1_ISR
0016            109   
0016            110   ; Timer/Counter 1 overflow interrupt vector
001B            111   org 0x001B
001B 020DC9     112            ljmp Timer1_ISR
001E            113   
001E            114   ; Serial port receive/transmit interrupt vector
0023            115   org 0x0023 
0023 32         116            reti
0024            117   
0024            118   ; CCU interrupt vector
005B            119   org 0x005b 
005B 02077D     120            ljmp CCU_ISR
005E            121   
005E            122   ;-----------------------;
005E            123   ;    Variables Define   ;
005E            124   ;-----------------------; 
005E            125   ;Variable_name: ds n
0030            126   dseg at 0x30
0030            127       Count10ms:    ds 1 ; Used to determine when half second has passed
0031            128       Time_Global:  ds 1 ; to store the time of whole process
0032            129       Time_Counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033            130   
0033            131       FSM0_State: ds 1
0034            132       FSM1_State: ds 1
0035            133   
0035            134       Profile_Num: ds 1
0036            135   
0036            136       TEMP_SOAK:  ds 4
003A            137       TIME_SOAK:  ds 4
003E            138       TEMP_RFLW:  ds 4
0042            139       TIME_RFLW:  ds 4
0046            140       TEMP_SAFE:  ds 4
004A            141       Current_Room_Temp: ds 4
004E            142            Current_Oven_Temp: ds 4
0052            143       bcd_bitnumber: ds 1
0053            144   
0053            145       individual_offest: ds 1
0054            146   
0054            147       NEW_BCD:    ds 2    ; 3 digit BCD used to store current entered number
0056            148       ;for math32.inc
0056            149       x: ds 4
005A            150       y: ds 4
005E            151       bcd: ds 5
0063            152       Count5s: ds 1
0064            153       ;z
0064            154       w:   ds 3 ; 24-bit play counter.  Decremented in CCU ISR.
0067            155            number: ds 1;
0068            156       digits: ds 1;
0069            157            tenth: ds 1;
006A            158       speak_state:       ds 1;
006B            159       ;key
006B            160       keyin: ds 1
006C            161   
006C            162   
006C            163   ;-------------------;
006C            164   ;    Flags Define   ;
006C            165   ;-------------------; 
006C            166   ;Flag_name: dbit 1
0000            167   bseg
0000            168       FSM0_State_Changed:  dbit 1
0001            169       Main_State:          dbit 1 ; 0 for setting, 1 for reflowing
0002            170       ;for math32.inc
0002            171       mf: dbit 1
0003            172       enable_time_global: dbit 1
0004            173       half_seconds_flag: dbit 1 ; 500ms in double rate mode
0005            174           nodigit: dbit 1 ; if playing from 10 to 19 then we don't need to
0006            175                       ;play the last digit
0006            176            skiphundred: dbit 1
0007            177            skiptenth: dbit 1
0008            178       speak_enable: dbit 1
0009            179   ;-----------------------;
0009            180   ;     Include Files     ;
0009            181   ;-----------------------; 
0009            182   ;$NOLIST
                 -1       $include(lcd_4bit.inc) 
005E              1   cseg
005E              2   
005E 30313233     3   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
006E 30313233     4   hex: db '0123456789abcdef',0
     34353637
     38396162
     63646566
     00
007F              5   
007F              6   ;LCD                '1234567890123456'
007F 57454C43     7   WELCOME1:        db 'WELCOME!        '   ,0
     4F4D4521
     20202020
     20202020
     00
0090 53757065     8   WELCOME2:        db 'Super Reflow!   '   ,0
     72205265
     666C6F77
     21202020
     00
00A1 53657474     9   MAIN_FACE1:      db 'Setting: Prof   '   ,0
     696E673A
     2050726F
     66202020
     00
00B2 53746172    10   MAIN_FACE2: db 'Start       Stop'   ,0
     74202020
     20202020
     53746F70
     00
00C3 53544D50    11   SETTING1:        db 'STMP:   STM:   s'   ,0
     3A202020
     53544D3A
     20202073
     00
00D4 52544D50    12   SETTING2:   db 'RTMP:   RTM:   s'   ,0
     3A202020
     52544D3A
     20202073
     00
00E5 4F4C443A    13   MODIFY_DOWN:db 'OLD:    NEW:    '   ,0
     20202020
     4E45573A
     20202020
     00
00F6 4D4F4449    14   MODIFY1:         db 'MODIFY:TEMP_SOAK'   ,0
     46593A54
     454D505F
     534F414B
     00
0107 4D4F4449    15   MODIFY2:         db 'MODIFY:TIME_SOAK'   ,0
     46593A54
     494D455F
     534F414B
     00
0118 4D4F4449    16   MODIFY3:         db 'MODIFY:TEMP_RFLW'   ,0
     46593A54
     454D505F
     52464C57
     00
0129 4D4F4449    17   MODIFY4:         db 'MODIFY:TIME_RFLW'   ,0
     46593A54
     494D455F
     52464C57
     00
013A 4D4F4449    18   MODIFY5:    db 'MODIFY:SAFE'   ,0
     46593A53
     41464500
0146 54454D50    19   WORKING:    db 'TEMP:   TIME:   '   ,0
     3A202020
     54494D45
     3A202020
     00
0157 53544D50    20   STEP1:           db 'STMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
0168 53544D3A    21   STEP2:      db 'STM:   s SOAKING'   ,0
     20202073
     20534F41
     4B494E47
     00
0179 52544D50    22   STEP3:      db 'RTMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
018A 52544D3A    23   STEP4:      db 'RTM:   s REFLOW '   ,0
     20202073
     20524546
     4C4F5720
     00
019B 5346543A    24   STEP5:      db 'SFT:     COOLING'   ,0
     20202020
     20434F4F
     4C494E47
     00
01AC 20202020    25   STEP6:      db '         FINISH '   ,0
     20202020
     2046494E
     49534820
     00
01BD 4572726F    26   WARNING1:   db 'Error Warning!  '   ,0
     72205761
     726E696E
     67212020
     00
01CE 54454D50    27   WARNING2:   db 'TEMP Sensing ERR'   ,0
     2053656E
     73696E67
     20455252
     00
01DF             28   ;---------------------------------;
01DF             29   ;           Basic Macros          ;
01DF             30   ;---------------------------------;
                 31   LCD_Initailize mac
                 32   	lcall LCD_4BIT
                 33   endmac
01DF             34   
                 35   LCD_WriteData mac
                 36   	mov a, %0
                 37   	lcall ?LCD_WriteData
                 38   endmac
01DF             39            
                 40   LCD_WriteCommand mac
                 41   	mov a, %0
                 42   	lcall ?LCD_WriteCommand
                 43   endmac
01DF             44   
                 45   LCD_Send_Constant_String mac
                 46   	push dph
                 47   	push dpl
                 48   	push acc
                 49   	mov dptr, %0
                 50   	lcall ?Send_Constant_String
                 51   	pop acc
                 52   	pop dpl
                 53   	pop dph
                 54   endmac
01DF             55   
                 56   LCD_Set_Cursor mac
                 57   	push acc
                 58   	mov a, #%1
                 59   	dec a
                 60   	lcall ?Set_Cursor_%0 ; Select column and row
                 61   	pop acc
                 62   endmac
01DF             63   
                 64   LCD_Display_BCD mac
                 65   	push ar0
                 66   	mov r0, %0
                 67   	lcall ?Display_BCD
                 68   	pop ar0
                 69   endmac
01DF             70   
                 71   LCD_Display_NUM mac
                 72   	push ar0
                 73   	mov r0, %0
                 74   	lcall ?Display_NUM
                 75   	pop ar0
                 76   endmac
01DF             77   
                 78   LCD_Display_Char mac
                 79   	push acc
                 80   	mov a, %0
                 81   	lcall ?LCD_WriteData
                 82   	pop acc
                 83   endmac
01DF             84   
                 85   Wait_Milli_Seconds mac
                 86   	push AR2
                 87   	mov R2, %0
                 88   	lcall ?Wait_Milli_Seconds
                 89   	pop AR2
                 90   endmac
01DF             91   
01DF             92   ;---------------------------------;
01DF             93   ;         Interface Macros        ;
01DF             94   ;---------------------------------;
01DF             95   
                 96   LCD_INTERFACE_WELCOME mac
                 97   	LCD_Set_Cursor(1,1)
                 98   	LCD_Send_Constant_String(#WELCOME1)
                 99   	LCD_Set_Cursor(2,1)
                100   	LCD_Send_Constant_String(#WELCOME2)
                101   endmac
01DF            102   
                103   LCD_INTERFACE_MAIN mac
                104   	LCD_Set_Cursor(1,1)
                105   	LCD_Send_Constant_String(#MAIN_FACE1)
                106   	LCD_Set_Cursor(2,1)
                107   	LCD_Send_Constant_String(#MAIN_FACE2)
                108   	LCD_Set_Cursor(1,15); Profile number
                109   	LCD_Display_BCD(Profile_Num)
                110   endmac
01DF            112   
                113   LCD_INTERFACE_SETTING mac
                114   	LCD_Set_Cursor(1,1)
                115   	LCD_Send_Constant_String(#SETTING1)
                116   	LCD_Set_Cursor(2,1)
                117   	LCD_Send_Constant_String(#SETTING2)
                118   endmac
01DF            119   
                120   LCD_INTERFACE_MODIFY1 mac
                121   	LCD_Set_Cursor(1,1)
                122   	LCD_Send_Constant_String(#MODIFY1)
                123   	LCD_Set_Cursor(2,1)
                124   	LCD_Send_Constant_String(#MODIFY_DOWN)
                125   endmac
01DF            126   
                127   LCD_INTERFACE_MODIFY2 mac
                128   	LCD_Set_Cursor(1,1)
                129   	LCD_Send_Constant_String(#MODIFY2)
                130   	LCD_Set_Cursor(2,1)
                131   	LCD_Send_Constant_String(#MODIFY_DOWN)
                132   endmac
01DF            133   
                134   LCD_INTERFACE_MODIFY3 mac
                135   	LCD_Set_Cursor(1,1)
                136   	LCD_Send_Constant_String(#MODIFY3)
                137   	LCD_Set_Cursor(2,1)
                138   	LCD_Send_Constant_String(#MODIFY_DOWN)
                139   endmac
01DF            140   
                141   LCD_INTERFACE_MODIFY4 mac
                142   	LCD_Set_Cursor(1,1)
                143   	LCD_Send_Constant_String(#MODIFY4)
                144   	LCD_Set_Cursor(2,1)
                145   	LCD_Send_Constant_String(#MODIFY_DOWN)
                146   endmac
01DF            147   
                148   LCD_INTERFACE_MODIFY5 mac
                149   	LCD_Set_Cursor(1,1)
                150   	LCD_Send_Constant_String(#MODIFY5)
                151   	LCD_Set_Cursor(2,1)
                152   	LCD_Send_Constant_String(#MODIFY_DOWN)
                153   endmac
01DF            154   
                155   LCD_INTERFACE_STEP1 mac
                156   	LCD_Set_Cursor(1,1)
                157   	LCD_Send_Constant_String(#WORKING)
                158   	LCD_Set_Cursor(2,1)
                159   	LCD_Send_Constant_String(#STEP1)
                160   endmac
01DF            161   
                162   LCD_INTERFACE_STEP2 mac
                163   	LCD_Set_Cursor(1,1)
                164   	LCD_Send_Constant_String(#WORKING)
                165   	LCD_Set_Cursor(2,1)
                166   	LCD_Send_Constant_String(#STEP2)
                167   endmac
01DF            168   
                169   LCD_INTERFACE_STEP3 mac
                170   	LCD_Set_Cursor(1,1)
                171   	LCD_Send_Constant_String(#WORKING)
                172   	LCD_Set_Cursor(2,1)
                173   	LCD_Send_Constant_String(#STEP3)
                174   endmac
01DF            175   
                176   LCD_INTERFACE_STEP4 mac
                177   	LCD_Set_Cursor(1,1)
                178   	LCD_Send_Constant_String(#WORKING)
                179   	LCD_Set_Cursor(2,1)
                180   	LCD_Send_Constant_String(#STEP4)
                181   endmac
01DF            182   
                183   LCD_INTERFACE_STEP5 mac
                184   	LCD_Set_Cursor(1,1)
                185   	LCD_Send_Constant_String(#WORKING)
                186   	LCD_Set_Cursor(2,1)
                187   	LCD_Send_Constant_String(#STEP5)
                188   endmac
01DF            189   
                190   LCD_INTERFACE_STEP6 mac
                191   	LCD_Set_Cursor(1,1)
                192   	LCD_Send_Constant_String(#WORKING)
                193   	LCD_Set_Cursor(2,1)
                194   	LCD_Send_Constant_String(#STEP6)
                195   endmac
01DF            196   
                197   LCD_INTERFACE_WARNING mac
                198   	LCD_Set_Cursor(1,1)
                199   	LCD_Send_Constant_String(#WARNING1)
                200   	LCD_Set_Cursor(2,1)
                201   	LCD_Send_Constant_String(#WARNING2)
                202   endmac
01DF            203   
01DF            204   
01DF            205   Wait10us:
01DF 7812       206       mov R0, #18
01E1 D8FE       207       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
01E3 22         208            ret
01E4            209   ;---------------------------------;
01E4            210   ; Wait 40 microseconds            ;
01E4            211   ;---------------------------------;
01E4            212   Wait40uSec:
01E4 C000       213            push AR0
01E6 784A       214            mov R0, #74
01E8            215   L0: 
01E8 D8FE       216            djnz R0, L0 ; 2 cycles->2*271.26ns*74=40us
01EA D000       217            pop AR0
01EC 22         218       ret
01ED            219   
01ED            220   ;---------------------------------;
01ED            221   ; Wait 500 microseconds           ;
01ED            222   ;---------------------------------;
01ED            223   WaitHalfSec:
01ED 7A28       224       mov R2, #40
01EF 79FA       225   H3: mov R1, #250
01F1 78B8       226   H2: mov R0, #184
01F3 D8FE       227   H1: djnz R0, H1 ; 2 machine cycles-> 2*0.27126us*184=100us
01F5 D9FA       228       djnz R1, H2 ; 100us*250=0.025s
01F7 DAF6       229       djnz R2, H3 ; 0.025s*20=0.5s
01F9 22         230       ret
01FA            231   
01FA            232   ;---------------------------------;
01FA            233   ; Wait 'R2' milliseconds          ;
01FA            234   ;---------------------------------;
01FA            235   ?Wait_Milli_Seconds:
01FA C000       236            push AR0
01FC C001       237            push AR1
01FE 790A       238   L3: mov R1, #10
0200 78B8       239   L2: mov R0, #184
0202 D8FE       240   L1: djnz R0, L1 ; 2 cycles->2*271.26ns*184=100us
0204 D9FA       241       djnz R1, L2 ; 100us*10=1ms
0206 DAF6       242       djnz R2, L3 ; number of millisecons to wait passed in R2
0208 D001       243       pop AR1
020A D000       244       pop AR0
020C 22         245       ret
020D            246            
020D            247   ;---------------------------------;
020D            248   ; Toggles the 'E' pin in the LCD  ;
020D            249   ;---------------------------------;
020D            250   LCD_pulse:
020D D283       251            setb LCD_E
020F 1201E4     252            lcall Wait40uSec
0212 C283       253            clr LCD_E
0214 1201E4     254       lcall Wait40uSec
0217 22         255       ret
0218            256   
0218            257   ;---------------------------------;
0218            258   ; Writes acc to LCD in 4-bit mode ;
0218            259   ;---------------------------------;
0218            260   LCD_byte:
0218            261            ; Write high 4 bits first
0218 A2E7       262            mov c, ACC.7
021A 92B0       263            mov LCD_D7, c
021C A2E6       264            mov c, ACC.6
021E 9287       265            mov LCD_D6, c
0220 A2E5       266            mov c, ACC.5
0222 9286       267            mov LCD_D5, c
0224 A2E4       268            mov c, ACC.4
0226 9285       269            mov LCD_D4, c
0228 12020D     270       lcall LCD_pulse
022B            271            ; Write low 4 bits next
022B A2E3       272            mov c, ACC.3
022D 92B0       273            mov LCD_D7, c
022F A2E2       274            mov c, ACC.2
0231 9287       275            mov LCD_D6, c
0233 A2E1       276            mov c, ACC.1
0235 9286       277            mov LCD_D5, c
0237 A2E0       278            mov c, ACC.0
0239 9285       279            mov LCD_D4, c
023B 12020D     280       lcall LCD_pulse
023E 22         281            ret
023F            282   
023F            283   ;---------------------------------;
023F            284   ; Write data to LCD               ;
023F            285   ;---------------------------------;
023F            286   ?LCD_WriteData:
023F D281       287            setb LCD_RS
0241 020218     288            ljmp LCD_byte
0244            289   
0244            290   ;---------------------------------;
0244            291   ; Write command to LCD            ;
0244            292   ;---------------------------------;
0244            293   ?LCD_WriteCommand:
0244 C281       294            clr LCD_RS
0246 020218     295            ljmp LCD_byte
0249            296   
0249            297   ;---------------------------------;
0249            298   ; Configure LCD in 4-bit mode     ;
0249            299   ;---------------------------------;
0249            300   LCD_4BIT:
0249 C283       301            clr LCD_E   ; Resting state of LCD's enable pin is zero
024B C282       302            clr LCD_RW  ; We are only writing to the LCD in this program
024D            303            
024D            304            ; After power on, let the LCD start up before initializing
024D C002       305            push AR2
024F 7A28       305            mov R2, #40
0251 1201FA     305            lcall ?Wait_Milli_Seconds
0254 D002       305            pop AR2
0256            306            
0256            307            ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
0256 7433       308            mov a, #0x33
0258 120244     308            lcall ?LCD_WriteCommand
025B 7433       309            mov a, #0x33
025D 120244     309            lcall ?LCD_WriteCommand
0260 7432       310            mov a, #0x32
0262 120244     310            lcall ?LCD_WriteCommand ; change to 4-bit mode
0265            311   
0265            312            ; Configure the LCD
0265 7428       313            mov a, #0x28
0267 120244     313            lcall ?LCD_WriteCommand
026A 740C       314            mov a, #0x0c
026C 120244     314            lcall ?LCD_WriteCommand
026F 7401       315            mov a, #0x01
0271 120244     315            lcall ?LCD_WriteCommand ;  Clear screen command (takes some time)
0274            316   
0274            317       ;Wait for the clear screen command to finish.
0274 C002       318            push AR2
0276 7A02       318            mov R2, #2
0278 1201FA     318            lcall ?Wait_Milli_Seconds
027B D002       318            pop AR2
027D 22         319       ret
027E            320   
027E            321   ;---------------------------------;
027E            322   ; Send a constant string to LCD   ;
027E            323   ;---------------------------------;
027E            324   ?Send_Constant_String:
027E E4         325       clr a
027F 93         326       movc a, @a+dptr
0280 6006       327       jz ?Send_Constant_String_Done
0282 12023F     328       lcall ?LCD_WriteData
0285 A3         329       inc dptr
0286 80F6       330       sjmp ?Send_Constant_String
0288            331   ?Send_Constant_String_Done:
0288 22         332       ret  
0289            333   
0289            334   ;---------------------------------;
0289            335   ; Set LCD cursor at row, column   ;
0289            336   ;---------------------------------;
0289            337   ?Set_Cursor_2:
0289 4440       338            orl a, #01000000B
028B            339   ?Set_Cursor_1:
028B 4480       340            orl a, #10000000B
028D 020244     341            ljmp ?LCD_WriteCommand ; Select column and row
0290            342   
0290            343   ;---------------------------------;
0290            344   ; Display a BCD number in the LCD ;
0290            345   ;---------------------------------;
0290            346   ?Display_BCD:
0290 C0E0       347            push acc
0292            348            ; Write most significant digit
0292 E8         349            mov a, r0
0293 C4         350            swap a
0294 540F       351            anl a, #0fh
0296 4430       352            orl a, #30h
0298 12023F     353            lcall ?LCD_WriteData
029B            354            ; write least significant digit
029B E8         355            mov a, r0
029C 540F       356            anl a, #0fh
029E 4430       357            orl a, #30h
02A0 12023F     358            lcall ?LCD_WriteData
02A3 D0E0       359            pop acc
02A5 22         360            ret
02A6            361   
02A6            362   ?Display_NUM:
02A6 C0E0       363            push acc
02A8 E8         364            mov a, R0
02A9 540F       365            anl a, #0fh
02AB 4430       366            orl a, #30h
02AD 12023F     367            lcall ?LCD_WriteData
02B0 D0E0       368            pop acc
02B2            369   
02B2 22         370            ret
                 -1       $include(math32.inc)
                559   $LIST
                 -1       $include(LPC9351.inc)
0523              1   cseg
0523              2   
0523              3   ;---------------------------------;
0523              4   ;           Basic Macros          ;
0523              5   ;---------------------------------;
                  6   Ports_Initialize mac
                  7       lcall Ports_Init
                  8   endmac
0523              9   
                 10   Clock_Double mac
                 11       lcall _Clock_Double
                 12   endmac
0523             13   
                 14   ADC_Initialize mac
                 15       lcall InitADC
                 16   endmac
0523             17   
0523             18   ;---------------------------------;
0523             19   ;            Functions            ;
0523             20   ;---------------------------------;
0523             21   _Clock_Double:
0523 C0E0        22       push acc
0525 90FFDE      23       mov dptr, #CLKCON
0528 E0          24       movx a, @dptr
0529 4408        25       orl a, #00001000B ; double the clock speed to 14.746MHz
052B F0          26       movx @dptr,a
052C D0E0        27       pop acc
052E 22          28       ret
052F             29   
052F             30   ;---------------------------------;
052F             31   ; Initial configuration of ports. ;
052F             32   ; After reset the default for the ;
052F             33   ; pins is 'Open Drain'.  This     ;
052F             34   ; routine changes them pins to    ;
052F             35   ; Quasi-bidirectional like in the ;
052F             36   ; original 8051.                  ;
052F             37   ; Notice that P1.2 and P1.3 are   ;
052F             38   ; always 'Open Drain'. If those   ;
052F             39   ; pins are to be used as output   ;
052F             40   ; they need a pull-up resistor.   ;
052F             41   ;---------------------------------;
052F             42   Ports_Init:
052F             43       ; Configure all the ports in bidirectional mode:
052F 758400      44       mov P0M1, #00H
0532 758500      45       mov P0M2, #00H
0535 759100      46       mov P1M1, #00H
0538 759200      47       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
053B 75A400      48       mov P2M1, #00H
053E 75A500      49       mov P2M2, #00H
0541 75B100      50       mov P3M1, #00H
0544 75B200      51       mov P3M2, #00H
0547 22          52            ret
0548             53   
0548             54   InitADC:
0548             55            ; ADC0_0 is connected to P1.7
0548             56            ; ADC0_1 is connected to P0.0
0548             57            ; ADC0_2 is connected to P2.1
0548             58            ; ADC0_3 is connected to P2.0
0548             59       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
0548 438401      60       orl P0M1, #00000001b
054B 5385FE      61       anl P0M2, #11111110b
054E 439180      62       orl P1M1, #10000000b
0551 53927F      63       anl P1M2, #01111111b
0554 43A403      64       orl P2M1, #00000011b
0557 53A5FC      65       anl P2M2, #11111100b
055A             66            ; Setup ADC0
055A D2C2        67            setb BURST0 ; Autoscan continuos conversion mode
055C 75A120      68            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
055F 75A30F      69            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
0562 758E05      70            mov     ADCON0,#0x05 ; Enable the converter and start immediately
0565             71            ; Wait for first conversion to complete
0565             72   InitADC_L1:
0565 E58E        73            mov     a,ADCON0
0567 30E3FB      74            jnb     acc.3,InitADC_L1
056A 22          75            ret
                 76   DO_NOTHING mac
                 77   	NOP
                 78   endmac
                 78   $LIST
                 -1       $include(serial.inc)
056B              1   CSEG
056B              2   
056B              3   
056B              4   ;---------------------------------;
056B              5   ;           Basic Macros          ;
056B              6   ;---------------------------------;
                  7   Serial_Initialize mac
                  8   	;Serial_Initialize()
                  9       lcall _Serial_Initialize
                 10   endmac
056B             11   
                 12   Serial_Send_Char mac
                 13       mov a, %0
                 14       lcall putchar
                 15   endmac
056B             16   
                 17   Serial_Read_Char mac
                 18   	;Serial_Read_Char(direct)
                 19       lcall getchar
                 20       mov %0, a
                 21   endmac
056B             22   
                 23   Serial_Send_Newline mac
                 24   	lcall Send_NewLine
                 25   endmac
056B             26   
                 27   Serial_Send_BCD mac
                 28   	push ar0
                 29   	mov r0, %0
                 30   	lcall ?Send_BCD
                 31   	pop ar0
                 32   endmac
056B             33   
                 34   Serial_Send_Constant_String mac
                 35   	mov dptr, %0
                 36   	lcall SendString
                 37   endmac
056B             38   
056B             39   ;---------------------------------;
056B             40   ; Initialize the serial port      ;
056B             41   ;---------------------------------;
056B             42   _Serial_Initialize:
056B 75BD00      43            mov     BRGCON,#0x00
056E 75BF00      44            mov     BRGR1,#high(BRVAL)
0571 75BE30      45            mov     BRGR0,#low(BRVAL)
0574 75BD03      46            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
0577 759852      47            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
057A             48            ; Make sure that TXD(P1.0) and RXD(P1.1) are configured as bidrectional I/O
057A 5391FC      49            anl     P1M1,#11111100B
057D 5392FC      50            anl     P1M2,#11111100B
0580 22          51            ret
0581             52   
0581             53   ;---------------------------------;
0581             54   ; Sends a byte via serial port    ;
0581             55   ;---------------------------------;
0581             56   putchar:
0581 109902      57            jbc     TI,putchar_L1
0584 80FB        58            sjmp putchar
0586             59   putchar_L1:
0586 F599        60            mov     SBUF,a
0588 22          61            ret
0589             62   
0589             63   SendString:
0589 E4          64       clr a
058A 93          65       movc a, @a+dptr
058B 6006        66       jz SendString_L1
058D 120581      67       lcall putchar
0590 A3          68       inc dptr
0591 80F6        69       sjmp SendString  
0593             70   SendString_L1:
0593 22          71            ret
0594             72   
0594             73   ;---------------------------------;
0594             74   ; Send a BCD number to PuTTY      ;
0594             75   ;---------------------------------;
0594             76   ?Send_BCD:
0594 C0E0        77            push acc
0596             78            ; Write most significant digit
0596 E8          79            mov a, r0
0597 C4          80            swap a
0598 540F        81            anl a, #0fh
059A 4430        82            orl a, #30h
059C 120581      83            lcall putchar
059F             84            ; write least significant digit
059F E8          85            mov a, r0
05A0 540F        86            anl a, #0fh
05A2 4430        87            orl a, #30h
05A4 120581      88            lcall putchar
05A7 D0E0        89            pop acc
05A9 22          90            ret
05AA             91   
05AA             92   Send_NewLine:
05AA 740D        93            mov a, #'\r'
05AC 120581      94            lcall putchar
05AF 740A        95            mov a, #'\n'
05B1 120581      96            lcall putchar   
05B4 22          97            ret
05B5             98   
05B5             99   
05B5            100   SendTemp0:
05B5 90005E     101            mov dptr, #HexAscii 
05B8            102            
05B8            103            
05B8            104            
05B8 E561       105            mov a, bcd+3
05BA C4         106            swap a
05BB 540F       107            anl a, #0xf
05BD 93         108            movc a, @a+dptr
05BE 120581     109            lcall putchar
05C1 E561       110            mov a, bcd+3
05C3 540F       111            anl a, #0xf
05C5 93         112            movc a, @a+dptr
05C6 120581     113            lcall putchar
05C9            114            
05C9 E560       115            mov a, bcd+2
05CB C4         116            swap a
05CC 540F       117            anl a, #0xf
05CE 93         118            movc a, @a+dptr
05CF 120581     119            lcall putchar
05D2 E560       120            mov a, bcd+2
05D4 540F       121            anl a, #0xf
05D6 93         122            movc a, @a+dptr
05D7 120581     123            lcall putchar
05DA            124            
05DA E55F       125            mov a, bcd+1
05DC C4         126            swap a
05DD 540F       127            anl a, #0xf
05DF 93         128            movc a, @a+dptr
05E0 120581     129            lcall putchar
05E3 E55F       130            mov a, bcd+1
05E5 540F       131            anl a, #0xf
05E7 93         132            movc a, @a+dptr
05E8 120581     133            lcall putchar
05EB            134   
05EB            135   
05EB E55E       136            mov a, bcd+0
05ED C4         137            swap a
05EE 540F       138            anl a, #0xf
05F0 93         139            movc a, @a+dptr
05F1 120581     140            lcall putchar
05F4 E55E       141            mov a, bcd+0
05F6 540F       142            anl a, #0xf
05F8 93         143            movc a, @a+dptr
05F9 120581     144            lcall putchar
05FC 22         145            ret
                 -1       $include(temperature.inc)
05FD              1   cseg
05FD              2   
05FD              3   
05FD              4   
05FD              5   Read_Oven_Temp:
05FD              6            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
05FD 755600       7            mov x+0, #low (0 % 0x10000) 
0600 755700       7            mov x+1, #high(0 % 0x10000) 
0603 755800       7            mov x+2, #low (0 / 0x10000) 
0606 755900       7            mov x+3, #high(0 / 0x10000) 
0609 85C756       8       mov x+0, ad0dat2
060C 7FFF         9            mov R7, #255
060E 1201DF      10       lcall Wait10us
0611             11   accumulate_loop0:
0611 85C75A      12       mov y+0, ad0dat2
0614 755B00      13       mov y+1, #0
0617 755C00      14       mov y+2, #0
061A 755D00      15       mov y+3, #0
061D 120378      16       lcall add32
0620 1201DF      17       lcall Wait10us
0623 DFEC        18            djnz R7, accumulate_loop0
0625             19            
0625             20            ; Now divide by 16 (2^4)
0625 755A10      21            mov y+0, #low (16 % 0x10000) 
0628 755B00      21            mov y+1, #high(16 % 0x10000) 
062B 755C00      21            mov y+2, #low (16 / 0x10000) 
062E 755D00      21            mov y+3, #high(16 / 0x10000) 
0631 1204BA      22            lcall div32
0634             23            ; x has now the 12-bit representation of the temperature
0634             24            
0634             25            ; Convert to temperature (C)
0634 755AE8      26            mov y+0, #low (33000 % 0x10000) 
0637 755B80      26            mov y+1, #high(33000 % 0x10000) 
063A 755C00      26            mov y+2, #low (33000 / 0x10000) 
063D 755D00      26            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
0640 12042D      27            lcall mul32
0643 755A00      28            mov y+0, #low (((1<<12)) % 0x10000) 
0646 755B10      28            mov y+1, #high(((1<<12)) % 0x10000) 
0649 755C00      28            mov y+2, #low (((1<<12)) / 0x10000) 
064C 755D00      28            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
064F 1204BA      29            lcall div32
0652 755A3C      30            mov y+0, #low (60 % 0x10000) 
0655 755B00      30            mov y+1, #high(60 % 0x10000) 
0658 755C00      30            mov y+2, #low (60 / 0x10000) 
065B 755D00      30            mov y+3, #high(60 / 0x10000) 
065E 120399      31            lcall sub32
0661             32   
0661             33            ;mov32(Current_Oven_Volt,x); store the hex value of voltage
0661             34            
0661 755A0E      35            mov y+0, #low (7438 % 0x10000) 
0664 755B1D      35            mov y+1, #high(7438 % 0x10000) 
0667 755C00      35            mov y+2, #low (7438 / 0x10000) 
066A 755D00      35            mov y+3, #high(7438 / 0x10000) 
066D 12042D      36            lcall mul32
0670 755A10      37            mov y+0, #low (10000 % 0x10000) 
0673 755B27      37            mov y+1, #high(10000 % 0x10000) 
0676 755C00      37            mov y+2, #low (10000 / 0x10000) 
0679 755D00      37            mov y+3, #high(10000 / 0x10000) 
067C 1204BA      38            lcall div32
067F 755AB4      39            mov y+0, #low (180 % 0x10000) 
0682 755B00      39            mov y+1, #high(180 % 0x10000) 
0685 755C00      39            mov y+2, #low (180 / 0x10000) 
0688 755D00      39            mov y+3, #high(180 / 0x10000) 
068B 120399      40            lcall sub32
068E             41            ;now we got the relateive temp number in hex
068E             42   
068E             43       ;mov(dst, src)
068E 854D5D      43            mov y+3, Current_Room_Temp+3
0691 854C5C      43       mov y+2, Current_Room_Temp+2
0694 854B5B      43       mov y+1, Current_Room_Temp+1
0697 854A5A      43       mov y,   Current_Room_Temp
069A 120378      44            lcall add32
069D             45            ;now we got the true value of oven in hex
069D 1202B3      46            lcall hex2bcd
06A0 1205B5      47            lcall SendTemp0; send to PC through serial port
06A3 1205AA      48            lcall Send_Newline
06A6 755A64      49            mov y+0, #low (100 % 0x10000) 
06A9 755B00      49            mov y+1, #high(100 % 0x10000) 
06AC 755C00      49            mov y+2, #low (100 / 0x10000) 
06AF 755D00      49            mov y+3, #high(100 / 0x10000) 
06B2 1204BA      50            lcall div32;divide by 100 to get the value in integer
06B5             51            ; now x contains the value in hex
06B5 755A5E      52            mov y+0, #low (350 % 0x10000) 
06B8 755B01      52            mov y+1, #high(350 % 0x10000) 
06BB 755C00      52            mov y+2, #low (350 / 0x10000) 
06BE 755D00      52            mov y+3, #high(350 / 0x10000) 
06C1 1203BB      53            lcall x_lt_y
06C4 200203      54            jb mf, Temp_OK
06C7             55            ;if not ok
06C7 0205FD      56            ljmp Read_Oven_Temp;re-read the value
06CA             57   
06CA             58            Temp_OK:
06CA             59       ;mov(dst, src)
06CA 855951      59            mov Current_Oven_Temp+3, x+3
06CD 855850      59       mov Current_Oven_Temp+2, x+2
06D0 85574F      59       mov Current_Oven_Temp+1, x+1
06D3 85564E      59       mov Current_Oven_Temp,   x
06D6 22          60            ret
06D7             61   
06D7             62   Read_Room_Temp:
06D7             63            
06D7 755600      64            mov x+0, #low (0 % 0x10000) 
06DA 755700      64            mov x+1, #high(0 % 0x10000) 
06DD 755800      64            mov x+2, #low (0 / 0x10000) 
06E0 755900      64            mov x+3, #high(0 / 0x10000) 
06E3 85C756      65       mov x+0, ad0dat2
06E6 7FFF        66            mov R7, #255
06E8 1201DF      67       lcall Wait10us
06EB             68       
06EB             69   accumulate_loop1:
06EB 85F45A      70       mov y+0, ad0dat3
06EE 755B00      71       mov y+1, #0
06F1 755C00      72       mov y+2, #0
06F4 755D00      73       mov y+3, #0
06F7 120378      74       lcall add32
06FA 1201DF      75       lcall Wait10us
06FD DFEC        76            djnz R7, accumulate_loop1
06FF             77            
06FF             78            ; Now divide by 16 (2^4)
06FF 755A10      79            mov y+0, #low (16 % 0x10000) 
0702 755B00      79            mov y+1, #high(16 % 0x10000) 
0705 755C00      79            mov y+2, #low (16 / 0x10000) 
0708 755D00      79            mov y+3, #high(16 / 0x10000) 
070B 1204BA      80            lcall div32
070E             81            ; x has now the 12-bit representation of the temperature
070E             82            
070E             83            ; Convert to temperature (C)
070E 755AE8      84            mov y+0, #low (33000 % 0x10000) 
0711 755B80      84            mov y+1, #high(33000 % 0x10000) 
0714 755C00      84            mov y+2, #low (33000 / 0x10000) 
0717 755D00      84            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
071A 12042D      85            lcall mul32
071D 755A00      86            mov y+0, #low (((1<<12)) % 0x10000) 
0720 755B10      86            mov y+1, #high(((1<<12)) % 0x10000) 
0723 755C00      86            mov y+2, #low (((1<<12)) / 0x10000) 
0726 755D00      86            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
0729 1204BA      87            lcall div32
072C 755A3C      88            mov y+0, #low (60 % 0x10000) 
072F 755B00      88            mov y+1, #high(60 % 0x10000) 
0732 755C00      88            mov y+2, #low (60 / 0x10000) 
0735 755D00      88            mov y+3, #high(60 / 0x10000) 
0738 120399      89            lcall sub32
073B             90            
073B             91            ;now we got the voltage value
073B             92            ;mov32(Current_Room_Volt,x)
073B             93            
073B 755AA4      94            mov y+0, #low (27300 % 0x10000) 
073E 755B6A      94            mov y+1, #high(27300 % 0x10000) 
0741 755C00      94            mov y+2, #low (27300 / 0x10000) 
0744 755D00      94            mov y+3, #high(27300 / 0x10000) 
0747 120399      95            lcall sub32
074A 755AF4      96            mov y+0, #low (500 % 0x10000) 
074D 755B01      96            mov y+1, #high(500 % 0x10000) 
0750 755C00      96            mov y+2, #low (500 / 0x10000) 
0753 755D00      96            mov y+3, #high(500 / 0x10000) 
0756 120399      97            lcall sub32
0759             98            ;now we got the temperature
0759             99       ;mov(dst, src)
0759 85594D      99            mov Current_Room_Temp+3, x+3
075C 85584C      99       mov Current_Room_Temp+2, x+2
075F 85574B      99       mov Current_Room_Temp+1, x+1
0762 85564A      99       mov Current_Room_Temp,   x
0765            100            
0765 22         101            ret
                 -1       $include(speaker.inc)
                462   $LIST
                 -1       $include(key.inc)
0BAF              1   cseg
0BAF              2   
0BAF              3   
0BAF              4   ;-----------------------;
0BAF              5   ;    Functions Define   ;
0BAF              6   ;-----------------------; 
0BAF              7   
0BAF              8   ;Key_Read: if read, return the button readed.
0BAF              9   ;Return 0 if read nothing.
0BAF             10   Key_Read:
0BAF C0E0        11       push acc
0BB1 120BC3      12       lcall ADC_to_PB; read lower 8 button
0BB4             13       ;mov a, keyin
0BB4             14       ;cjne a, #0, Continue_Read_Key; if nothing, continue read key
0BB4             15       ;ret; if read successfully, return
0BB4             16       ;Continue_Read_Key:
0BB4 120C14      17       lcall ADC_to_PB_1
0BB7 C002        18            push AR2
0BB9 7A96        18            mov R2, #150
0BBB 1201FA      18            lcall ?Wait_Milli_Seconds
0BBE D002        18            pop AR2
0BC0 D0E0        19            pop acc
0BC2 22          20       ret
0BC3             21   
0BC3             22   ADC_to_PB:
0BC3 756B00      23       mov keyin, #0;clear input
0BC6             24            ; Check PB6
0BC6 C3          25            clr c
0BC7 E5C5        26            mov a, AD0DAT0
0BC9 94A3        27            subb a, #(173-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
0BCB 4004        28            jc ADC_to_PB_L6
0BCD 756B07      29       mov keyin, #7
0BD0 22          30            ret
0BD1             31   ADC_to_PB_L6:
0BD1             32            ; Check PB5
0BD1 C3          33            clr c
0BD2 E5C5        34            mov a, AD0DAT0; P1.7
0BD4 9491        35            subb a, #(155-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
0BD6 4004        36            jc ADC_to_PB_L5
0BD8 756B06      37            mov keyin, #6
0BDB 22          38            ret
0BDC             39   ADC_to_PB_L5:
0BDC             40            ; Check PB4
0BDC C3          41            clr c
0BDD E5C5        42            mov a, AD0DAT0
0BDF 9478        43            subb a, #(130-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
0BE1 4004        44            jc ADC_to_PB_L4
0BE3 756B05      45            mov keyin, #5
0BE6 22          46            ret
0BE7             47   ADC_to_PB_L4:
0BE7             48            ; Check PB3
0BE7 C3          49            clr c
0BE8 E5C5        50            mov a, AD0DAT0
0BEA 9462        51            subb a, #(108-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
0BEC 4004        52            jc ADC_to_PB_L3
0BEE 756B04      53            mov keyin, #4
0BF1 22          54            ret
0BF2             55   ADC_to_PB_L3:
0BF2             56            ; Check PB2
0BF2 C3          57            clr c
0BF3 E5C5        58            mov a, AD0DAT0
0BF5 9444        59            subb a, #(78-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
0BF7 4004        60            jc ADC_to_PB_L2
0BF9 756B03      61            mov keyin, #3
0BFC 22          62            ret
0BFD             63   ADC_to_PB_L2:
0BFD             64            ; Check PB1
0BFD C3          65            clr c
0BFE E5C5        66            mov a, AD0DAT0
0C00 9433        67            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
0C02 4004        68            jc ADC_to_PB_L1
0C04 756B02      69            mov keyin, #2
0C07 22          70            ret
0C08             71   ADC_to_PB_L1:
0C08             72            ; Check PB1
0C08 C3          73            clr c
0C09 E5C5        74            mov a, AD0DAT0
0C0B 9413        75            subb a, #(29-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
0C0D 4004        76            jc ADC_to_PB_L0
0C0F 756B01      77            mov keyin, #1
0C12 22          78            ret
0C13             79   ADC_to_PB_L0:
0C13             80            ; No pusbutton pressed  
0C13 22          81            ret
0C14             82   
0C14             83   ADC_to_PB_1:
0C14             84            ; Check PB6
0C14 C3          85            clr c
0C15 E5C6        86            mov a, AD0DAT1
0C17 94C4        87            subb a, #(206-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
0C19 4004        88            jc ADC_to_PB_L6_2
0C1B 756B0E      89            mov keyin, #14
0C1E 22          90            ret
0C1F             91   ADC_to_PB_L6_2:
0C1F             92            ; Check PB5
0C1F C3          93            clr c
0C20 E5C6        94            mov a, AD0DAT1
0C22 94AF        95            subb a, #(185-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
0C24 4004        96            jc ADC_to_PB_L5_2
0C26 756B0D      97            mov keyin, #13
0C29 22          98            ret
0C2A             99   ADC_to_PB_L5_2:
0C2A            100            ; Check PB4
0C2A C3         101            clr c
0C2B E5C6       102            mov a, AD0DAT1
0C2D 9490       103            subb a, #(154-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
0C2F 4004       104            jc ADC_to_PB_L4_2
0C31 756B0C     105            mov keyin, #12
0C34 22         106            ret
0C35            107   ADC_to_PB_L4_2:
0C35            108            ; Check PB3
0C35 C3         109            clr c
0C36 E5C6       110            mov a, AD0DAT1
0C38 9471       111            subb a, #(123-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
0C3A 4004       112            jc ADC_to_PB_L3_2
0C3C 756B0B     113            mov keyin, #11
0C3F 22         114            ret
0C40            115   ADC_to_PB_L3_2:
0C40            116            ; Check PB2
0C40 C3         117            clr c
0C41 E5C6       118            mov a, AD0DAT1
0C43 9452       119            subb a, #(92-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
0C45 4004       120            jc ADC_to_PB_L2_2
0C47 756B0A     121            mov keyin, #10
0C4A 22         122            ret
0C4B            123   ADC_to_PB_L2_2:
0C4B            124            ; Check PB1
0C4B C3         125            clr c
0C4C E5C6       126            mov a, AD0DAT1
0C4E 9433       127            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
0C50 4004       128            jc ADC_to_PB_L1_2
0C52 756B09     129            mov keyin, #9
0C55 22         130            ret
0C56            131   ADC_to_PB_L1_2:
0C56            132            ; Check PB1
0C56 C3         133            clr c
0C57 E5C6       134            mov a, AD0DAT1
0C59 9414       135            subb a, #(30-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
0C5B 4004       136            jc ADC_to_PB_L01
0C5D 756B08     137            mov keyin, #8
0C60 22         138            ret
0C61            139   ADC_to_PB_L01:
0C61            140            ; No pusbutton pressed  
0C61 22         141            ret
0C62            190   ;$LIST
0C62            191   
0C62            192   cseg
0C62            193   
0C62            194   MainProgram:
0C62 75817F     195       mov SP, #0x7F
0C65 12052F     196       lcall Ports_Init
0C68 120249     197            lcall LCD_4BIT
0C6B            198            ;Serial_Initialize()
0C6B 12056B     198       lcall _Serial_Initialize
0C6E 120548     199       lcall InitADC
0C71 C0E0       200            push acc
0C73 7401       200            mov a, #1
0C75 14         200            dec a
0C76 12028B     200            lcall ?Set_Cursor_1 ; Select column and row
0C79 D0E0       200            pop acc
0C7B C083       200            push dph
0C7D C082       200            push dpl
0C7F C0E0       200            push acc
0C81 90007F     200            mov dptr, #WELCOME1
0C84 12027E     200            lcall ?Send_Constant_String
0C87 D0E0       200            pop acc
0C89 D082       200            pop dpl
0C8B D083       200            pop dph
0C8D C0E0       200            push acc
0C8F 7401       200            mov a, #1
0C91 14         200            dec a
0C92 120289     200            lcall ?Set_Cursor_2 ; Select column and row
0C95 D0E0       200            pop acc
0C97 C083       200            push dph
0C99 C082       200            push dpl
0C9B C0E0       200            push acc
0C9D 900090     200            mov dptr, #WELCOME2
0CA0 12027E     200            lcall ?Send_Constant_String
0CA3 D0E0       200            pop acc
0CA5 D082       200            pop dpl
0CA7 D083       200            pop dph
0CA9 120D8D     201       lcall Data_Initialization
0CAC 1207AE     202       lcall InitDAC
0CAF 120766     203       lcall CCU_Init
0CB2 1207BE     204            lcall Init_SPI
0CB5 120D30     205       lcall External_Interrupt0_Init
0CB8 120D33     206       lcall External_Interrupt1_Init
0CBB 753900     207       mov TEMP_SOAK+3, #0x00
0CBE 753800     208       mov TEMP_SOAK+2, #0x00
0CC1 753700     209       mov TEMP_SOAK+1, #0x00
0CC4 753696     210       mov TEMP_SOAK, #150
0CC7 754100     211       mov TEMP_RFLW+3, #0
0CCA 754000     212       mov TEMP_RFLW+2, #0
0CCD 753F00     213       mov TEMP_RFLW+1, #0
0CD0 753ED9     214       mov TEMP_RFLW, #217
0CD3 753D00     215       mov TIME_SOAK+3, #0
0CD6 753C00     216       mov TIME_SOAK+2, #0
0CD9 753B00     217       mov TIME_SOAK+1, #0
0CDC 753A3C     218       mov TIME_SOAK, #60
0CDF 754500     219       mov TIME_RFLW+3, #0
0CE2 754400     220       mov TIME_RFLW+2, #0
0CE5 754300     221       mov TIME_RFLW+1, #0
0CE8 75424B     222       mov TIME_RFLW, #75
0CEB 754900     223       mov TEMP_SAFE+3, #0
0CEE 754800     224       mov TEMP_SAFE+2, #0
0CF1 754700     225       mov TEMP_SAFE+1, #0
0CF4 75463C     226       mov TEMP_SAFE, #60
0CF7 C2C8       227       clr TMOD20 ; Stop CCU timer
0CF9 D2AF       228       setb EA   ; Enable Global interrupts
0CFB C2A7       229       clr OVEN
0CFD 1201ED     230       lcall WaitHalfSec
0D00            231   
0D00            232   Main_Loop:
0D00 200103     233       jb Main_State,loop_b
0D03            234   loop_a:; for FSM0
0D03 020E0B     235            ljmp FSM0
0D06            236   
0D06            237   loop_b: ; for FSM1
0D06 3004F7     238       jnb half_seconds_flag, Main_Loop
0D09 C204       239       clr half_seconds_flag
0D0B 0563       240       inc Count5s
0D0D E563       241       mov a, Count5s
0D0F B40509     242       cjne a, #5, skip3
0D12 756300     243       mov Count5s, #0
0D15 300803     244       jnb speak_enable, skip3
0D18 120DB9     245       lcall Speak_Process
0D1B            246       skip3:
0D1B 80E3       247            sjmp Main_Loop
0D1D            248   
0D1D            249   
0D1D            250   ;----------------------------;
0D1D            251   ;           Macros           ;
0D1D            252   ;----------------------------; 
                253   Display_3BCD mac
                254       ;Display_3BCD(bcd to display)
                255       ;now the bcd num of time is stored in bcd
                256       LCD_Display_NUM(%0+1);
                257       LCD_Display_BCD(%0);
                258   endmac
0D1D            259   
                260   Display_3BCD_from_x mac
                261       lcall hex2bcd
                262       ;now the bcd num of time is stored in bcd
                263       LCD_Display_NUM(bcd+1);
                264       LCD_Display_BCD(bcd);
                265   endmac
0D1D            266   
                267   Update_Temp mac
                268       lcall Read_Room_Temp
                269       lcall Read_Oven_Temp
                270       mov32(x, Current_Oven_Temp)
                271       mov32(y, %0)
                272       lcall x_lt_y
                273   endmac
0D1D            275   
0D1D            276   ;----------------------------;
0D1D            277   ;         Functions          ;
0D1D            278   ;----------------------------; 
0D1D            279   
0D1D            280   Timer1_Init:
0D1D E589       281            mov a, TMOD
0D1F 540F       282            anl a, #0x0f ; Clear the bits for timer 1
0D21 4410       283            orl a, #0x10 ; Configure timer 1 as 16-timer
0D23 F589       284            mov TMOD, a
0D25 758D6F     285            mov TH1, #high(TIMER1_RELOAD)
0D28 758BFF     286            mov TL1, #low(TIMER1_RELOAD)
0D2B            287            ; Enable the timer and interrupts
0D2B D2AB       288       setb ET1  ; Enable timer 1 interrupt
0D2D D28E       289       setb TR1  ; Start timer 1
0D2F 22         290            ret
0D30            291   
0D30            292   External_Interrupt0_Init:
0D30            293            ; Enable the external interrupt
0D30 D2A8       294       setb EX0  ; Enable timer 1 interrupt
0D32 22         295            ret
0D33            296   
0D33            297   External_Interrupt1_Init:
0D33            298            ; Enable the external interrupt
0D33 D2AA       299       setb EX1  ; Enable timer 1 interrupt
0D35 22         300            ret
0D36            301   
0D36            302   Display_Working_Status:
0D36 C0E0       303            push acc
0D38 7406       303            mov a, #6
0D3A 14         303            dec a
0D3B 12028B     303            lcall ?Set_Cursor_1 ; Select column and row
0D3E D0E0       303            pop acc
0D40            304       ;mov(dst, src)
0D40 855159     304            mov x+3, Current_Oven_Temp+3
0D43 855058     304       mov x+2, Current_Oven_Temp+2
0D46 854F57     304       mov x+1, Current_Oven_Temp+1
0D49 854E56     304       mov x,   Current_Oven_Temp
0D4C 1202B3     305       lcall hex2bcd
0D4F            305       ;now the bcd num of time is stored in bcd
0D4F C000       305            push ar0
0D51 A85F       305            mov r0, bcd+1
0D53 1202A6     305            lcall ?Display_NUM
0D56 D000       305            pop ar0;
0D58 C000       305            push ar0
0D5A A85E       305            mov r0, bcd
0D5C 120290     305            lcall ?Display_BCD
0D5F D000       305            pop ar0;
0D61            306   
0D61 C0E0       307            push acc
0D63 740E       307            mov a, #14
0D65 14         307            dec a
0D66 12028B     307            lcall ?Set_Cursor_1 ; Select column and row
0D69 D0E0       307            pop acc
0D6B 755900     308       mov x+3, #0
0D6E 755800     309       mov x+2, #0
0D71 755700     310       mov x+1, #0
0D74 853156     311       mov x, Time_Global
0D77 1202B3     312       lcall hex2bcd
0D7A            312       ;now the bcd num of time is stored in bcd
0D7A C000       312            push ar0
0D7C A85F       312            mov r0, bcd+1
0D7E 1202A6     312            lcall ?Display_NUM
0D81 D000       312            pop ar0;
0D83 C000       312            push ar0
0D85 A85E       312            mov r0, bcd
0D87 120290     312            lcall ?Display_BCD
0D8A D000       312            pop ar0;
0D8C 22         313       ret
0D8D            314   
0D8D            315   Data_Initialization:
0D8D 753100     316       mov Time_Global, #0x00
0D90 753300     317       mov FSM0_State, #0x00
0D93 753400     318       mov FSM1_State, #0x00
0D96 755400     319       mov NEW_BCD, #0
0D99 755500     320       mov NEW_BCD+1, #0
0D9C 756700     321       mov number, #0x0 ;;not needed
0D9F 756300     322       mov Count5s, #0x00
0DA2 756A00     323       mov speak_state, #0x00
0DA5 755203     324       mov bcd_bitnumber, #0x03
0DA8            325       
0DA8 C296       326       clr LED
0DAA C208       327       clr speak_enable
0DAC C203       328       clr enable_time_global
0DAE C205       329       clr nodigit
0DB0 C206       330            clr skiphundred
0DB2 C207       331            clr skiptenth
0DB4 C201       332       clr Main_State
0DB6 C2A7       333       clr OVEN
0DB8 22         334       ret
0DB9            335   
0DB9            336   Speak_Process:
0DB9 120A68     337       lcall current_temp_is
0DBC 854E67     338       mov number, Current_Oven_Temp+0
0DBF 120A4B     339       lcall playnumbers
0DC2 120A87     340       lcall degree
0DC5 120AA6     341       lcall celsius
0DC8 22         342       ret
0DC9            343   
0DC9            344   ;----------------------------;
0DC9            345   ;     Interrupt Services     ;
0DC9            346   ;----------------------------; 
0DC9            347   Timer1_ISR:
0DC9 758D6F     348            mov TH1, #high(TIMER1_RELOAD)
0DCC 758BFF     349            mov TL1, #low(TIMER1_RELOAD)
0DCF B2A6       350            cpl P2.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 10 ms pulse.
0DD1            351            
0DD1            352            ; The two registers used in the ISR must be saved in the stack
0DD1 C0E0       353            push acc
0DD3 C0D0       354            push psw
0DD5            355            
0DD5            356            ; Increment the 8-bit 10-mili-second counter
0DD5 0530       357            inc Count10ms
0DD7            358   
0DD7            359   Inc_Done:
0DD7            360            ; Check if half second has passed
0DD7 E530       361            mov a, Count10ms
0DD9 B4640F     362            cjne a, #100, Timer1_ISR_done ; Warning: this instruction changes the carry flag!
0DDC            363            
0DDC            364            ; 500 milliseconds have passed.  Set a flag so the main program knows
0DDC D204       365            setb half_seconds_flag ; Let the main program know half second had passed
0DDE            366       
0DDE 300302     367       jnb enable_time_global, skip1
0DE1 0531       368       inc Time_Global
0DE3            369            skip1:
0DE3 753000     370       mov Count10ms, #0
0DE6            371   
0DE6 B296       372       cpl LED
0DE8 1213B7     373       lcall FSM1;call FSM1 here
0DEB            374   
0DEB            375   Timer1_ISR_done:
0DEB D0D0       376            pop psw
0DED D0E0       377            pop acc
0DEF 32         378            reti
0DF0            379   
0DF0            380   EI0_ISR:
0DF0 C288       381       clr IT0
0DF2 D201       382       setb Main_State
0DF4 120AC5     383       lcall current_process_is
0DF7 120AE4     384       lcall ramp_to_soak
0DFA 120D1D     385       lcall Timer1_Init
0DFD 32         386       reti
0DFE            387   
0DFE            388   EI1_ISR:
0DFE C28A       389       clr IT1
0E00 C28E       390       clr TR1; disable timer 1
0E02 C2A7       391       clr OVEN
0E04 120BAA     392       lcall clear_speaking
0E07 120D8D     393       lcall Data_Initialization
0E0A 32         394       reti
0E0B            395   
0E0B            396   ;---------------------------------;
0E0B            397   ;      Finite State Machines      ;
0E0B            398   ;---------------------------------;
0E0B            399   FSM0:
0E0B            400       ;-------------------;
0E0B            401       ;    Setting FSM    ;
0E0B            402       ;-------------------;
0E0B            403   
0E0B            404       ;Checking Keyboard
0E0B            405       ;Key_Scan()
0E0B            406       FSM0_Start:
0E0B E533       407           mov a, FSM0_State
0E0D 8003       408           sjmp FSM0_State0
0E0F            409   
0E0F            410           FSM0_State1_bridge:
0E0F 020F61     411               ljmp FSM0_State1 
0E12            412           FSM0_State0:
0E12 B400FA     413               cjne a, #0, FSM0_State1_bridge
0E15            414   
0E15            415               ;display a word
0E15 C0E0       416            push acc
0E17 7401       416            mov a, #1
0E19 14         416            dec a
0E1A 12028B     416            lcall ?Set_Cursor_1 ; Select column and row
0E1D D0E0       416            pop acc
0E1F C083       416            push dph
0E21 C082       416            push dpl
0E23 C0E0       416            push acc
0E25 9000C3     416            mov dptr, #SETTING1
0E28 12027E     416            lcall ?Send_Constant_String
0E2B D0E0       416            pop acc
0E2D D082       416            pop dpl
0E2F D083       416            pop dph
0E31 C0E0       416            push acc
0E33 7401       416            mov a, #1
0E35 14         416            dec a
0E36 120289     416            lcall ?Set_Cursor_2 ; Select column and row
0E39 D0E0       416            pop acc
0E3B C083       416            push dph
0E3D C082       416            push dpl
0E3F C0E0       416            push acc
0E41 9000D4     416            mov dptr, #SETTING2
0E44 12027E     416            lcall ?Send_Constant_String
0E47 D0E0       416            pop acc
0E49 D082       416            pop dpl
0E4B D083       416            pop dph
0E4D            417   
0E4D C0E0       418            push acc
0E4F 740D       418            mov a, #13
0E51 14         418            dec a
0E52 120289     418            lcall ?Set_Cursor_2 ; Select column and row
0E55 D0E0       418            pop acc
0E57 755600     419               mov x,#0x0
0E5A 755700     420               mov x+1,#0x0
0E5D 755800     421               mov x+2,#0x0
0E60 755900     422               mov x+3,#0x0
0E63 854256     423               mov x, TIME_RFLW
0E66 1202B3     424       lcall hex2bcd
0E69            424       ;now the bcd num of time is stored in bcd
0E69 C000       424            push ar0
0E6B A85F       424            mov r0, bcd+1
0E6D 1202A6     424            lcall ?Display_NUM
0E70 D000       424            pop ar0;
0E72 C000       424            push ar0
0E74 A85E       424            mov r0, bcd
0E76 120290     424            lcall ?Display_BCD
0E79 D000       424            pop ar0;
0E7B            425   
0E7B C0E0       426            push acc
0E7D 740D       426            mov a, #13
0E7F 14         426            dec a
0E80 12028B     426            lcall ?Set_Cursor_1 ; Select column and row
0E83 D0E0       426            pop acc
0E85 755600     427               mov x,#0x0
0E88 755700     428               mov x+1,#0x0
0E8B 755800     429               mov x+2,#0x0
0E8E 755900     430               mov x+3,#0x0
0E91 853A56     431               mov x, TIME_SOAK
0E94 1202B3     432       lcall hex2bcd
0E97            432       ;now the bcd num of time is stored in bcd
0E97 C000       432            push ar0
0E99 A85F       432            mov r0, bcd+1
0E9B 1202A6     432            lcall ?Display_NUM
0E9E D000       432            pop ar0;
0EA0 C000       432            push ar0
0EA2 A85E       432            mov r0, bcd
0EA4 120290     432            lcall ?Display_BCD
0EA7 D000       432            pop ar0;
0EA9            433   
0EA9 C0E0       434            push acc
0EAB 7406       434            mov a, #6
0EAD 14         434            dec a
0EAE 120289     434            lcall ?Set_Cursor_2 ; Select column and row
0EB1 D0E0       434            pop acc
0EB3 755600     435               mov x,#0x0
0EB6 755700     436               mov x+1,#0x0
0EB9 755800     437               mov x+2,#0x0
0EBC 755900     438               mov x+3,#0x0
0EBF 853E56     439               mov x, TEMP_RFLW
0EC2 1202B3     440       lcall hex2bcd
0EC5            440       ;now the bcd num of time is stored in bcd
0EC5 C000       440            push ar0
0EC7 A85F       440            mov r0, bcd+1
0EC9 1202A6     440            lcall ?Display_NUM
0ECC D000       440            pop ar0;
0ECE C000       440            push ar0
0ED0 A85E       440            mov r0, bcd
0ED2 120290     440            lcall ?Display_BCD
0ED5 D000       440            pop ar0;
0ED7            441   
0ED7 C0E0       442            push acc
0ED9 7406       442            mov a, #6
0EDB 14         442            dec a
0EDC 12028B     442            lcall ?Set_Cursor_1 ; Select column and row
0EDF D0E0       442            pop acc
0EE1 755600     443               mov x,#0x0
0EE4 755700     444               mov x+1,#0x0
0EE7 755800     445               mov x+2,#0x0
0EEA 755900     446               mov x+3,#0x0
0EED 853656     447               mov x, TEMP_SOAK
0EF0 1202B3     448       lcall hex2bcd
0EF3            448       ;now the bcd num of time is stored in bcd
0EF3 C000       448            push ar0
0EF5 A85F       448            mov r0, bcd+1
0EF7 1202A6     448            lcall ?Display_NUM
0EFA D000       448            pop ar0;
0EFC C000       448            push ar0
0EFE A85E       448            mov r0, bcd
0F00 120290     448            lcall ?Display_BCD
0F03 D000       448            pop ar0;
0F05            449   
0F05            450   
0F05 120BAF     451               lcall Key_Read
0F08 755600     452            mov x+0, #low (0 % 0x10000) 
0F0B 755700     452            mov x+1, #high(0 % 0x10000) 
0F0E 755800     452            mov x+2, #low (0 / 0x10000) 
0F11 755900     452            mov x+3, #high(0 / 0x10000) 
0F14 856B56     453               mov x, keyin
0F17 755A0D     454            mov y+0, #low (13 % 0x10000) 
0F1A 755B00     454            mov y+1, #high(13 % 0x10000) 
0F1D 755C00     454            mov y+2, #low (13 / 0x10000) 
0F20 755D00     454            mov y+3, #high(13 / 0x10000) 
0F23 1203F3     455               lcall x_eq_y
0F26            456   
0F26 300208     457               jnb mf,FSM0_State0_down
0F29 0533       458               inc FSM0_State 
0F2B 1213B0     459               lcall change_state_flag
0F2E 0211DE     460               ljmp FSM0_Done
0F31            461           
0F31            462           FSM0_State0_down:
0F31            463   
0F31            464               ;lcall Key_Read
0F31 755600     465            mov x+0, #low (0 % 0x10000) 
0F34 755700     465            mov x+1, #high(0 % 0x10000) 
0F37 755800     465            mov x+2, #low (0 / 0x10000) 
0F3A 755900     465            mov x+3, #high(0 / 0x10000) 
0F3D 856B56     466               mov x, keyin
0F40 755A0E     467            mov y+0, #low (14 % 0x10000) 
0F43 755B00     467            mov y+1, #high(14 % 0x10000) 
0F46 755C00     467            mov y+2, #low (14 / 0x10000) 
0F49 755D00     467            mov y+3, #high(14 / 0x10000) 
0F4C 1203F3     468               lcall x_eq_y
0F4F            469   
0F4F 300209     470               jnb mf,FSM0_State0_bridge
0F52 753304     471               mov FSM0_State, #0x04 
0F55 1213B0     472               lcall change_state_flag
0F58 0211DE     473               ljmp FSM0_Done
0F5B            474           FSM0_State0_bridge:
0F5B 0211DE     475               ljmp FSM0_Done
0F5E            476   
0F5E            477           FSM0_State2_bridge:
0F5E 021001     478               ljmp FSM0_State2
0F61            479           
0F61            480           FSM0_State1:
0F61 B401FA     481               cjne a, #1, FSM0_State2_bridge
0F64            482               
0F64            483               ;print words
0F64 C0E0       484            push acc
0F66 7401       484            mov a, #1
0F68 14         484            dec a
0F69 12028B     484            lcall ?Set_Cursor_1 ; Select column and row
0F6C D0E0       484            pop acc
0F6E C083       484            push dph
0F70 C082       484            push dpl
0F72 C0E0       484            push acc
0F74 9000F6     484            mov dptr, #MODIFY1
0F77 12027E     484            lcall ?Send_Constant_String
0F7A D0E0       484            pop acc
0F7C D082       484            pop dpl
0F7E D083       484            pop dph
0F80 C0E0       484            push acc
0F82 7401       484            mov a, #1
0F84 14         484            dec a
0F85 120289     484            lcall ?Set_Cursor_2 ; Select column and row
0F88 D0E0       484            pop acc
0F8A C083       484            push dph
0F8C C082       484            push dpl
0F8E C0E0       484            push acc
0F90 9000E5     484            mov dptr, #MODIFY_DOWN
0F93 12027E     484            lcall ?Send_Constant_String
0F96 D0E0       484            pop acc
0F98 D082       484            pop dpl
0F9A D083       484            pop dph
0F9C C0E0       485            push acc
0F9E 7405       485            mov a, #5
0FA0 14         485            dec a
0FA1 120289     485            lcall ?Set_Cursor_2 ; Select column and row
0FA4 D0E0       485            pop acc
0FA6            485   
0FA6            486               ;mov x,#0x0
0FA6            487               ;mov x+1,#0x0
0FA6            488               ;mov x+2,#0x0
0FA6            489               ;mov x+3,#0x0
0FA6 853656     490               mov x,TEMP_SOAK
0FA9 1202B3     491       lcall hex2bcd
0FAC            491       ;now the bcd num of time is stored in bcd
0FAC C000       491            push ar0
0FAE A85F       491            mov r0, bcd+1
0FB0 1202A6     491            lcall ?Display_NUM
0FB3 D000       491            pop ar0;
0FB5 C000       491            push ar0
0FB7 A85E       491            mov r0, bcd
0FB9 120290     491            lcall ?Display_BCD
0FBC D000       491            pop ar0;
0FBE            492   
0FBE C0E0       493            push acc
0FC0 740D       493            mov a, #13
0FC2 14         493            dec a
0FC3 120289     493            lcall ?Set_Cursor_2 ; Select column and row
0FC6 D0E0       493            pop acc
0FC8            494       ;Display_3BCD(bcd to display)
0FC8            494       ;now the bcd num of time is stored in bcd
0FC8 C000       494            push ar0
0FCA A855       494            mov r0, NEW_BCD+1
0FCC 1202A6     494            lcall ?Display_NUM
0FCF D000       494            pop ar0;
0FD1 C000       494            push ar0
0FD3 A854       494            mov r0, NEW_BCD
0FD5 120290     494            lcall ?Display_BCD
0FD8 D000       494            pop ar0;
0FDA            495               ;LCD_Set_Cursor(1,13)
0FDA            496               ;Display_3BCD(NEW_BCD)
0FDA            497               ;Wait_Milli_Seconds(#250)
0FDA            498               ;Wait_Milli_Seconds(#250)
0FDA            499               
0FDA            500               ; the left bit of bcd
0FDA 1211E1     501               lcall check_button
0FDD            502               
0FDD 300218     503               jnb mf,normal_button_jump_2
0FE0            504               
0FE0 12120A     505               lcall write_bcd
0FE3            506           
0FE3            507               
0FE3            508               ; the middle bit of bcd
0FE3 1211E1     509               lcall check_button
0FE6 30020F     510               jnb mf,normal_button_jump_2
0FE9 12120A     511               lcall write_bcd
0FEC            512               
0FEC            513             
0FEC            514   
0FEC            515               ; the right bit of bcd
0FEC 1211E1     516               lcall check_button
0FEF 300206     517               jnb mf,normal_button_jump_2
0FF2 12120A     518               lcall write_bcd
0FF5            519   
0FF5            520   
0FF5            521               
0FF5 020FFB     522               ljmp state_1_continue_1
0FF8            523           
0FF8            524   
0FF8            525           normal_button_jump_2:
0FF8            526               
0FF8 0212DC     527               ljmp  normal_button
0FFB            528               
0FFB            529              
0FFB            530           state_1_continue_1:    
0FFB            531               ;mov FSM0_State, #0x02
0FFB            532               ;jb BUTTON, FSM0_State1_Done
0FFB            533               ;Wait_Milli_Seconds(#75)
0FFB            534               ;jb BUTTON, FSM0_State1_Done
0FFB            535               ;jnb BUTTON, $
0FFB            536               ;mov FSM0_State, #0x00
0FFB            537               
0FFB            538                    FSM0_State1_Done:
0FFB 020D00     539               ljmp Main_Loop
0FFE            540   
0FFE            541           FSM0_State3_bridge:
0FFE 0210A1     542               ljmp FSM0_State3
1001            543           FSM0_State2:
1001 B402FA     544               cjne a, #2, FSM0_State3_bridge
1004            545               ;LCD_INTERFACE_MODIFY2()
1004            546   
1004            547               ;print words
1004 C0E0       548            push acc
1006 7401       548            mov a, #1
1008 14         548            dec a
1009 12028B     548            lcall ?Set_Cursor_1 ; Select column and row
100C D0E0       548            pop acc
100E C083       548            push dph
1010 C082       548            push dpl
1012 C0E0       548            push acc
1014 900107     548            mov dptr, #MODIFY2
1017 12027E     548            lcall ?Send_Constant_String
101A D0E0       548            pop acc
101C D082       548            pop dpl
101E D083       548            pop dph
1020 C0E0       548            push acc
1022 7401       548            mov a, #1
1024 14         548            dec a
1025 120289     548            lcall ?Set_Cursor_2 ; Select column and row
1028 D0E0       548            pop acc
102A C083       548            push dph
102C C082       548            push dpl
102E C0E0       548            push acc
1030 9000E5     548            mov dptr, #MODIFY_DOWN
1033 12027E     548            lcall ?Send_Constant_String
1036 D0E0       548            pop acc
1038 D082       548            pop dpl
103A D083       548            pop dph
103C C0E0       549            push acc
103E 7405       549            mov a, #5
1040 14         549            dec a
1041 120289     549            lcall ?Set_Cursor_2 ; Select column and row
1044 D0E0       549            pop acc
1046            549   
1046            550   
1046            551               ;mov x,#0x0
1046            552               ;mov x+1,#0x0
1046            553               ;mov x+2,#0x0
1046            554               ;mov x+3,#0x0
1046 853A56     555               mov x,TIME_SOAK
1049 1202B3     556       lcall hex2bcd
104C            556       ;now the bcd num of time is stored in bcd
104C C000       556            push ar0
104E A85F       556            mov r0, bcd+1
1050 1202A6     556            lcall ?Display_NUM
1053 D000       556            pop ar0;
1055 C000       556            push ar0
1057 A85E       556            mov r0, bcd
1059 120290     556            lcall ?Display_BCD
105C D000       556            pop ar0;
105E            557   
105E C0E0       558            push acc
1060 740D       558            mov a, #13
1062 14         558            dec a
1063 120289     558            lcall ?Set_Cursor_2 ; Select column and row
1066 D0E0       558            pop acc
1068            559       ;Display_3BCD(bcd to display)
1068            559       ;now the bcd num of time is stored in bcd
1068 C000       559            push ar0
106A A855       559            mov r0, NEW_BCD+1
106C 1202A6     559            lcall ?Display_NUM
106F D000       559            pop ar0;
1071 C000       559            push ar0
1073 A854       559            mov r0, NEW_BCD
1075 120290     559            lcall ?Display_BCD
1078 D000       559            pop ar0;
107A            560               
107A            561               
107A            562               ; the left bit of bcd
107A 1211E1     563               lcall check_button
107D            564               
107D 300218     565               jnb mf,normal_button_jump_3
1080            566               
1080 12120A     567               lcall write_bcd
1083            568           
1083            569               
1083            570               ; the middle bit of bcd
1083 1211E1     571               lcall check_button
1086 30020F     572               jnb mf,normal_button_jump_3
1089 12120A     573               lcall write_bcd
108C            574               
108C            575             
108C            576   
108C            577               ; the right bit of bcd
108C 1211E1     578               lcall check_button
108F 300206     579               jnb mf,normal_button_jump_3
1092 12120A     580               lcall write_bcd
1095            581   
1095            582   
1095            583               
1095            584              
1095            585           
1095            586   
1095 02109B     587               ljmp state_2_continue_1
1098            588           normal_button_jump_3:
1098 0212DC     589               ljmp  normal_button
109B            590               
109B            591              
109B            592           state_2_continue_1:    
109B            593               ;mov FSM0_State, #0x03
109B            594               ;jb BUTTON, FSM0_State1_Done
109B            595               ;Wait_Milli_Seconds(#75)
109B            596               ;jb BUTTON, FSM0_State1_Done
109B            597               ;jnb BUTTON, $
109B            598               ;mov FSM0_State, #0x00
109B            599               
109B            600                    FSM0_State2_Done:
109B 020D00     601               ljmp Main_Loop
109E            602   
109E            603           FSM0_State4_bridge:
109E 021141     604               ljmp FSM0_State4
10A1            605   
10A1            606           FSM0_State3:
10A1 B403FA     607               cjne a, #3, FSM0_State4_bridge
10A4            608               ;LCD_INTERFACE_MODIFY2()
10A4            609   
10A4            610               ;print words
10A4 C0E0       611            push acc
10A6 7401       611            mov a, #1
10A8 14         611            dec a
10A9 12028B     611            lcall ?Set_Cursor_1 ; Select column and row
10AC D0E0       611            pop acc
10AE C083       611            push dph
10B0 C082       611            push dpl
10B2 C0E0       611            push acc
10B4 900118     611            mov dptr, #MODIFY3
10B7 12027E     611            lcall ?Send_Constant_String
10BA D0E0       611            pop acc
10BC D082       611            pop dpl
10BE D083       611            pop dph
10C0 C0E0       611            push acc
10C2 7401       611            mov a, #1
10C4 14         611            dec a
10C5 120289     611            lcall ?Set_Cursor_2 ; Select column and row
10C8 D0E0       611            pop acc
10CA C083       611            push dph
10CC C082       611            push dpl
10CE C0E0       611            push acc
10D0 9000E5     611            mov dptr, #MODIFY_DOWN
10D3 12027E     611            lcall ?Send_Constant_String
10D6 D0E0       611            pop acc
10D8 D082       611            pop dpl
10DA D083       611            pop dph
10DC C0E0       612            push acc
10DE 7405       612            mov a, #5
10E0 14         612            dec a
10E1 120289     612            lcall ?Set_Cursor_2 ; Select column and row
10E4 D0E0       612            pop acc
10E6            612   
10E6            613   
10E6            614               ;mov x,#0x0
10E6            615               ;mov x+1,#0x0
10E6            616               ;mov x+2,#0x0
10E6            617               ;mov x+3,#0x0
10E6 853E56     618               mov x,TEMP_RFLW
10E9 1202B3     619       lcall hex2bcd
10EC            619       ;now the bcd num of time is stored in bcd
10EC C000       619            push ar0
10EE A85F       619            mov r0, bcd+1
10F0 1202A6     619            lcall ?Display_NUM
10F3 D000       619            pop ar0;
10F5 C000       619            push ar0
10F7 A85E       619            mov r0, bcd
10F9 120290     619            lcall ?Display_BCD
10FC D000       619            pop ar0;
10FE            620   
10FE C0E0       621            push acc
1100 740D       621            mov a, #13
1102 14         621            dec a
1103 120289     621            lcall ?Set_Cursor_2 ; Select column and row
1106 D0E0       621            pop acc
1108            622       ;Display_3BCD(bcd to display)
1108            622       ;now the bcd num of time is stored in bcd
1108 C000       622            push ar0
110A A855       622            mov r0, NEW_BCD+1
110C 1202A6     622            lcall ?Display_NUM
110F D000       622            pop ar0;
1111 C000       622            push ar0
1113 A854       622            mov r0, NEW_BCD
1115 120290     622            lcall ?Display_BCD
1118 D000       622            pop ar0;
111A            623               
111A            624               
111A            625               ; the left bit of bcd
111A 1211E1     626               lcall check_button
111D            627               
111D 300218     628               jnb mf,normal_button_jump_4
1120            629               
1120 12120A     630               lcall write_bcd
1123            631           
1123            632               
1123            633               ; the middle bit of bcd
1123 1211E1     634               lcall check_button
1126 30020F     635               jnb mf,normal_button_jump_4
1129 12120A     636               lcall write_bcd
112C            637               
112C            638             
112C            639   
112C            640               ; the right bit of bcd
112C 1211E1     641               lcall check_button
112F 300206     642               jnb mf,normal_button_jump_4
1132 12120A     643               lcall write_bcd
1135            644   
1135            645   
1135            646               
1135            647              
1135 02113B     648               ljmp state_3_continue_1
1138            649           normal_button_jump_4:
1138 0212DC     650               ljmp  normal_button
113B            651               
113B            652              
113B            653           state_3_continue_1:    
113B            654               ;mov FSM0_State, #0x02
113B            655               ;jb BUTTON, FSM0_State1_Done
113B            656               ;Wait_Milli_Seconds(#75)
113B            657               ;jb BUTTON, FSM0_State1_Done
113B            658               ;jnb BUTTON, $
113B            659               ;mov FSM0_State, #0x00
113B            660               
113B            661                    FSM0_State3_Done:
113B 020D00     662               ljmp Main_Loop
113E            663   
113E            664           FSM0_State5_bridge:
113E 0211DE     665               ljmp FSM0_Done
1141            666           FSM0_State4:
1141 B404FA     667               cjne a, #4, FSM0_State5_bridge
1144            668               ;LCD_INTERFACE_MODIFY2()
1144            669   
1144            670               ;print words
1144 C0E0       671            push acc
1146 7401       671            mov a, #1
1148 14         671            dec a
1149 12028B     671            lcall ?Set_Cursor_1 ; Select column and row
114C D0E0       671            pop acc
114E C083       671            push dph
1150 C082       671            push dpl
1152 C0E0       671            push acc
1154 900129     671            mov dptr, #MODIFY4
1157 12027E     671            lcall ?Send_Constant_String
115A D0E0       671            pop acc
115C D082       671            pop dpl
115E D083       671            pop dph
1160 C0E0       671            push acc
1162 7401       671            mov a, #1
1164 14         671            dec a
1165 120289     671            lcall ?Set_Cursor_2 ; Select column and row
1168 D0E0       671            pop acc
116A C083       671            push dph
116C C082       671            push dpl
116E C0E0       671            push acc
1170 9000E5     671            mov dptr, #MODIFY_DOWN
1173 12027E     671            lcall ?Send_Constant_String
1176 D0E0       671            pop acc
1178 D082       671            pop dpl
117A D083       671            pop dph
117C C0E0       672            push acc
117E 7405       672            mov a, #5
1180 14         672            dec a
1181 120289     672            lcall ?Set_Cursor_2 ; Select column and row
1184 D0E0       672            pop acc
1186            672   
1186            673   
1186            674   
1186            675               ;mov x,#0x0
1186            676               ;mov x+1,#0x0
1186            677               ;mov x+2,#0x0
1186            678               ;mov x+3,#0x0
1186 854256     679               mov x,TIME_RFLW
1189 1202B3     680       lcall hex2bcd
118C            680       ;now the bcd num of time is stored in bcd
118C C000       680            push ar0
118E A85F       680            mov r0, bcd+1
1190 1202A6     680            lcall ?Display_NUM
1193 D000       680            pop ar0;
1195 C000       680            push ar0
1197 A85E       680            mov r0, bcd
1199 120290     680            lcall ?Display_BCD
119C D000       680            pop ar0;
119E            681   
119E C0E0       682            push acc
11A0 740D       682            mov a, #13
11A2 14         682            dec a
11A3 120289     682            lcall ?Set_Cursor_2 ; Select column and row
11A6 D0E0       682            pop acc
11A8            683       ;Display_3BCD(bcd to display)
11A8            683       ;now the bcd num of time is stored in bcd
11A8 C000       683            push ar0
11AA A855       683            mov r0, NEW_BCD+1
11AC 1202A6     683            lcall ?Display_NUM
11AF D000       683            pop ar0;
11B1 C000       683            push ar0
11B3 A854       683            mov r0, NEW_BCD
11B5 120290     683            lcall ?Display_BCD
11B8 D000       683            pop ar0;
11BA            684               
11BA            685               
11BA            686               ; the left bit of bcd
11BA 1211E1     687               lcall check_button
11BD            688               
11BD 300218     689               jnb mf,normal_button_jump_5
11C0            690               
11C0 12120A     691               lcall write_bcd
11C3            692           
11C3            693               
11C3            694               ; the middle bit of bcd
11C3 1211E1     695               lcall check_button
11C6 30020F     696               jnb mf,normal_button_jump_5
11C9 12120A     697               lcall write_bcd
11CC            698               
11CC            699             
11CC            700   
11CC            701               ; the right bit of bcd
11CC 1211E1     702               lcall check_button
11CF 300206     703               jnb mf,normal_button_jump_5
11D2 12120A     704               lcall write_bcd
11D5            705   
11D5            706   
11D5            707               
11D5            708              
11D5            709           
11D5            710   
11D5 0211DB     711               ljmp state_4_continue_1
11D8            712           normal_button_jump_5:
11D8 0212DC     713               ljmp  normal_button
11DB            714           state_4_continue_1:    
11DB            715               ;mov FSM0_State, #0x02
11DB            716               ;jb BUTTON, FSM0_State1_Done
11DB            717               ;Wait_Milli_Seconds(#75)
11DB            718               ;jb BUTTON, FSM0_State1_Done
11DB            719               ;jnb BUTTON, $
11DB            720               ;mov FSM0_State, #0x00
11DB            721               
11DB            722                    FSM0_State4_Done:
11DB 020D00     723               ljmp Main_Loop
11DE            724   
11DE            725           ;FSM0_State5:
11DE            726               ;cjne a, #5, FSM0_Done
11DE            727               ;LCD_INTERFACE_MODIFY5()
11DE            728   
11DE            729           FSM0_Done:
11DE 020D00     730               ljmp Main_Loop
11E1            731   
11E1            732       check_button:
11E1            733               ;scan number button
11E1 120BAF     734               lcall Key_Read
11E4            735              
11E4 755600     736            mov x+0, #low (0 % 0x10000) 
11E7 755700     736            mov x+1, #high(0 % 0x10000) 
11EA 755800     736            mov x+2, #low (0 / 0x10000) 
11ED 755900     736            mov x+3, #high(0 / 0x10000) 
11F0 856B56     737               mov x, keyin
11F3 755A0B     738            mov y+0, #low (11 % 0x10000) 
11F6 755B00     738            mov y+1, #high(11 % 0x10000) 
11F9 755C00     738            mov y+2, #low (11 / 0x10000) 
11FC 755D00     738            mov y+3, #high(11 / 0x10000) 
11FF 1203BB     739               lcall x_lt_y
1202            740               
1202 E56B       741               mov a, keyin
1204 B40002     742               cjne a,#0x00,continue_check
1207 80D8       743               sjmp check_button
1209            744       continue_check:
1209 22         745               ret
120A            746      
120A            747   
120A            748       write_bcd:
120A E552       749                   mov a , bcd_bitnumber
120C B4033D     750                   cjne a, #0x03, bcd_bit_2
120F            751                   
120F C002       752            push AR2
1211 7AFA       752            mov R2, #250
1213 1201FA     752            lcall ?Wait_Milli_Seconds
1216 D002       752            pop AR2
1218 E56B       753                   mov a, keyin
121A B40A02     754                   cjne a,#0x0A,continue_bcd
121D 7400       755                   mov a,#0x00
121F            756       continue_bcd:
121F 540F       757                   anl a, #0x0f
1221            758                        ;orl a, NEW_BCD+1
1221 F555       759                        mov NEW_BCD+1,a
1223 755202     760                   mov bcd_bitnumber, #0x02
1226            761                   ;display new_bcd
1226 C0E0       762            push acc
1228 740D       762            mov a, #13
122A 14         762            dec a
122B 120289     762            lcall ?Set_Cursor_2 ; Select column and row
122E D0E0       762            pop acc
1230            763       ;Display_3BCD(bcd to display)
1230            763       ;now the bcd num of time is stored in bcd
1230 C000       763            push ar0
1232 A855       763            mov r0, NEW_BCD+1
1234 1202A6     763            lcall ?Display_NUM
1237 D000       763            pop ar0;
1239 C000       763            push ar0
123B A854       763            mov r0, NEW_BCD
123D 120290     763            lcall ?Display_BCD
1240 D000       763            pop ar0;
1242            764   
1242 C002       765            push AR2
1244 7AFA       765            mov R2, #250
1246 1201FA     765            lcall ?Wait_Milli_Seconds
1249 D002       765            pop AR2
124B            766                   
124B 22         767                   ret
124C            768   
124C            769   
124C            770       bcd_bit_2:
124C E552       771                   mov a , bcd_bitnumber
124E B40246     772                   cjne a, #0x02, bcd_bit_1
1251 C002       773            push AR2
1253 7AFA       773            mov R2, #250
1255 1201FA     773            lcall ?Wait_Milli_Seconds
1258 D002       773            pop AR2
125A E554       774                   mov a, NEW_BCD
125C 540F       775                   anl a, #0x0f
125E F554       776                   mov NEW_BCD,a
1260 E56B       777                   mov a, keyin
1262 B40A02     778                   cjne a,#0x0A,continue_bcd_1
1265 7400       779                   mov a,#0x00
1267            780       continue_bcd_1:
1267 540F       781                   anl a, #0x0f
1269 C4         782                   swap a
126A 4554       783                        orl a, NEW_BCD
126C F554       784                        mov NEW_BCD,a
126E 755201     785                   mov bcd_bitnumber, #0x01
1271            786                   ;display new_bcd
1271 C0E0       787            push acc
1273 740D       787            mov a, #13
1275 14         787            dec a
1276 120289     787            lcall ?Set_Cursor_2 ; Select column and row
1279 D0E0       787            pop acc
127B            788       ;Display_3BCD(bcd to display)
127B            788       ;now the bcd num of time is stored in bcd
127B C000       788            push ar0
127D A855       788            mov r0, NEW_BCD+1
127F 1202A6     788            lcall ?Display_NUM
1282 D000       788            pop ar0;
1284 C000       788            push ar0
1286 A854       788            mov r0, NEW_BCD
1288 120290     788            lcall ?Display_BCD
128B D000       788            pop ar0;
128D            789   
128D C002       790            push AR2
128F 7AFA       790            mov R2, #250
1291 1201FA     790            lcall ?Wait_Milli_Seconds
1294 D002       790            pop AR2
1296            791              
1296 22         792                   ret
1297            793   
1297            794       bcd_bit_1:  
1297 C002       795            push AR2
1299 7AFA       795            mov R2, #250
129B 1201FA     795            lcall ?Wait_Milli_Seconds
129E D002       795            pop AR2
12A0 E554       796                   mov a, NEW_BCD
12A2 54F0       797                   anl a, #0xf0
12A4 F554       798                   mov NEW_BCD,a
12A6 E56B       799                   mov a, keyin
12A8 B40A02     800                   cjne a,#0x0A,continue_bcd_2
12AB 7400       801                   mov a,#0x00
12AD            802       continue_bcd_2:
12AD 540F       803                   anl a, #0x0f
12AF 4554       804                        orl a, NEW_BCD
12B1 F554       805                        mov NEW_BCD,a
12B3 755203     806                   mov bcd_bitnumber, #0x03
12B6            807                   ;display new_bcd
12B6 C0E0       808            push acc
12B8 740D       808            mov a, #13
12BA 14         808            dec a
12BB 120289     808            lcall ?Set_Cursor_2 ; Select column and row
12BE D0E0       808            pop acc
12C0            809       ;Display_3BCD(bcd to display)
12C0            809       ;now the bcd num of time is stored in bcd
12C0 C000       809            push ar0
12C2 A855       809            mov r0, NEW_BCD+1
12C4 1202A6     809            lcall ?Display_NUM
12C7 D000       809            pop ar0;
12C9 C000       809            push ar0
12CB A854       809            mov r0, NEW_BCD
12CD 120290     809            lcall ?Display_BCD
12D0 D000       809            pop ar0;
12D2            810   
12D2 C002       811            push AR2
12D4 7AFA       811            mov R2, #250
12D6 1201FA     811            lcall ?Wait_Milli_Seconds
12D9 D002       811            pop AR2
12DB            812                   
12DB 22         813                   ret
12DC            814                   
12DC            815       normal_button:
12DC E56B       816                   mov a, keyin
12DE            817                  
12DE B40B03     818                   cjne a, #11, button_c_u_d
12E1            819                   
12E1 021326     820                   ljmp scanstate
12E4            821       button_c_u_d:
12E4 E56B       822                   mov a, keyin
12E6 B40C0C     823                   cjne a,#12, button_u_d
12E9 7400       824                   mov a, #0x0
12EB F554       825                   mov NEW_BCD,a
12ED F555       826                   mov NEW_BCD+1,a
12EF 755203     827                   mov bcd_bitnumber,#0x03
12F2 0211DE     828                   ljmp FSM0_Done
12F5            829       button_u_d:
12F5 E56B       830                   mov a,keyin
12F7 B40D16     831                   cjne a,#13,button_d
12FA E533       832                   mov a, FSM0_State
12FC B40409     833                   cjne a,#0x04, state_add
12FF 753300     834                   mov FSM0_State, #0x00
1302 1213B0     835                   lcall change_state_flag
1305 0211DE     836                   ljmp FSM0_Done
1308            837       state_add:
1308 0533       838                   inc FSM0_State
130A 1213B0     839                   lcall change_state_flag
130D 0211DE     840                   ljmp FSM0_Done
1310            841   
1310            842       button_d:
1310 E533       843                   mov a, FSM0_State
1312 B40009     844                   cjne a, #0x00, state_minus
1315 753304     845                   mov FSM0_State, #0x04
1318 1213B0     846                   lcall change_state_flag
131B 0211DE     847                   ljmp FSM0_Done
131E            848   
131E            849       state_minus:
131E 1533       850                   dec FSM0_State
1320 1213B0     851                   lcall change_state_flag
1323 0211DE     852                   ljmp FSM0_Done
1326            853   
1326            854   
1326            855   
1326            856       scanstate:
1326 E533       857                   mov a, FSM0_State
1328            858                   
1328 B40003     859                   cjne a,#0x00,change_temp_soak
132B            860   
132B 0211DE     861                   ljmp FSM0_Done
132E            862       change_temp_soak:
132E B40134     863                   cjne a,#0x01,change_time_soak
1331 85545E     864                   mov bcd, NEW_BCD
1334 85555F     865                   mov bcd+1,NEW_BCD+1
1337 756000     866                   mov bcd+2,#0x0
133A 756100     867                   mov bcd+3,#0x0
133D 756200     868                   mov bcd+4,#0x0
1340            869   
1340 12033C     870                   lcall bcd2hex
1343 855636     871                   mov TEMP_SOAK,x
1346 C0E0       872            push acc
1348 7401       872            mov a, #1
134A 14         872            dec a
134B 12028B     872            lcall ?Set_Cursor_1 ; Select column and row
134E D0E0       872            pop acc
1350            873       ;Display_3BCD(bcd to display)
1350            873       ;now the bcd num of time is stored in bcd
1350 C000       873            push ar0
1352 A837       873            mov r0, TEMP_SOAK+1
1354 1202A6     873            lcall ?Display_NUM
1357 D000       873            pop ar0;
1359 C000       873            push ar0
135B A836       873            mov r0, TEMP_SOAK
135D 120290     873            lcall ?Display_BCD
1360 D000       873            pop ar0;
1362 0211DE     874                   ljmp FSM0_Done
1365            875       change_time_soak:
1365 B40215     876                   cjne a,#0x02,change_temp_reflow
1368 85545E     877                   mov bcd, NEW_BCD
136B 85555F     878                   mov bcd+1,NEW_BCD+1
136E 756100     879                   mov bcd+3,#0x0
1371 756200     880                   mov bcd+4,#0x0
1374 12033C     881                   lcall bcd2hex
1377 85563A     882                   mov TIME_SOAK,x
137A 0211DE     883                   ljmp FSM0_Done
137D            884       change_temp_reflow:
137D B40318     885                   cjne a,#0x03,change_time_reflow
1380 85545E     886                   mov bcd, NEW_BCD
1383 85555F     887                   mov bcd+1,NEW_BCD+1
1386 756000     888                   mov bcd+2,#0x0
1389 756100     889                   mov bcd+3,#0x0
138C 756200     890                   mov bcd+4,#0x0
138F 12033C     891                   lcall bcd2hex
1392 85563E     892                   mov TEMP_RFLW,x
1395 0211DE     893                   ljmp FSM0_Done
1398            894       change_time_reflow:
1398 85545E     895                   mov bcd, NEW_BCD
139B 85555F     896                   mov bcd+1,NEW_BCD+1
139E 756000     897                   mov bcd+2,#0x0
13A1 756100     898                   mov bcd+3,#0x0
13A4 756200     899                   mov bcd+4,#0x0
13A7 12033C     900                   lcall bcd2hex
13AA 855642     901                   mov TIME_RFLW,x
13AD 0211DE     902                   ljmp FSM0_Done
13B0            903       change_state_flag:
13B0 755400     904               mov NEW_BCD,#0x0
13B3 755500     905               mov NEW_BCD+1,#0x0
13B6 22         906               ret
13B7            907   
13B7            908   
13B7            909       ;---------------------------------;
13B7            910       ; FSM1 using Timer Interrupt      ;
13B7            911       ;---------------------------------;
13B7            912       ;update status and send data to LCD and PC every one/half seconds
13B7            913   FSM1:
13B7 E534       914       mov a, FSM1_State
13B9            915       FSM1_State0:
13B9 B40002     916           cjne a, #0, JUMP_FSM1_State1
13BC 8003       917           sjmp Start_FSM1_State0
13BE            918           JUMP_FSM1_State1:
13BE 021487     919           ljmp FSM1_State1
13C1            920           
13C1            921           Start_FSM1_State0:
13C1 D203       922           setb enable_time_global
13C3 D208       923           setb speak_enable
13C5 D2A7       924           setb OVEN; turn oven on
13C7 1206D7     925       lcall Read_Room_Temp
13CA 1205FD     925       lcall Read_Oven_Temp
13CD            925   
13CD            925       ;mov(dst, src)
13CD 855159     925            mov x+3, Current_Oven_Temp+3
13D0 855058     925       mov x+2, Current_Oven_Temp+2
13D3 854F57     925       mov x+1, Current_Oven_Temp+1
13D6 854E56     925       mov x,   Current_Oven_Temp
13D9            925       ;mov(dst, src)
13D9 85395D     925            mov y+3, TEMP_SOAK+3
13DC 85385C     925       mov y+2, TEMP_SOAK+2
13DF 85375B     925       mov y+1, TEMP_SOAK+1
13E2 85365A     925       mov y,   TEMP_SOAK
13E5            925   
13E5 1203BB     925       lcall x_lt_y    ;Read Temperatures
13E8 C0E0       926            push acc
13EA 7401       926            mov a, #1
13EC 14         926            dec a
13ED 12028B     926            lcall ?Set_Cursor_1 ; Select column and row
13F0 D0E0       926            pop acc
13F2 C083       926            push dph
13F4 C082       926            push dpl
13F6 C0E0       926            push acc
13F8 900146     926            mov dptr, #WORKING
13FB 12027E     926            lcall ?Send_Constant_String
13FE D0E0       926            pop acc
1400 D082       926            pop dpl
1402 D083       926            pop dph
1404 C0E0       926            push acc
1406 7401       926            mov a, #1
1408 14         926            dec a
1409 120289     926            lcall ?Set_Cursor_2 ; Select column and row
140C D0E0       926            pop acc
140E C083       926            push dph
1410 C082       926            push dpl
1412 C0E0       926            push acc
1414 900157     926            mov dptr, #STEP1
1417 12027E     926            lcall ?Send_Constant_String
141A D0E0       926            pop acc
141C D082       926            pop dpl
141E D083       926            pop dph;display interface
1420 120D36     927           lcall Display_Working_Status
1423 C0E0       928            push acc
1425 7406       928            mov a, #6
1427 14         928            dec a
1428 120289     928            lcall ?Set_Cursor_2 ; Select column and row
142B D0E0       928            pop acc
142D            929       ;mov(dst, src)
142D 853959     929            mov x+3, TEMP_SOAK+3
1430 853858     929       mov x+2, TEMP_SOAK+2
1433 853757     929       mov x+1, TEMP_SOAK+1
1436 853656     929       mov x,   TEMP_SOAK
1439 1202B3     930       lcall hex2bcd
143C            930       ;now the bcd num of time is stored in bcd
143C C000       930            push ar0
143E A85F       930            mov r0, bcd+1
1440 1202A6     930            lcall ?Display_NUM
1443 D000       930            pop ar0;
1445 C000       930            push ar0
1447 A85E       930            mov r0, bcd
1449 120290     930            lcall ?Display_BCD
144C D000       930            pop ar0;
144E            931   
144E 20020D     932           jb mf, FSM1_State0_Error_Check;check Error and continue if smaller than set time
1451            933           ;if temp greater
1451 120BAA     934           lcall clear_speaking
1454 120B03     935           lcall preheat_and_soak
1457 0534       936           inc FSM1_State; go to next state            
1459 853A32     937           mov Time_Counter, TIME_SOAK; move the TIME_SOAK in counter and count down
145C 8026       938           sjmp FSM1_State0_Done
145E            939   
145E            940           FSM1_State0_Error_Check:
145E E531       941           mov a, Time_Global
1460 B43C21     942           cjne a, #QUITTIME, FSM1_State0_Done; not time, done
1463            943           ;if time reached, check temp
1463            944       ;mov(dst, src)
1463 855159     944            mov x+3, Current_Oven_Temp+3
1466 855058     944       mov x+2, Current_Oven_Temp+2
1469 854F57     944       mov x+1, Current_Oven_Temp+1
146C 854E56     944       mov x,   Current_Oven_Temp;move current oven temp in x
146F 755D00     945           mov y+3, #0
1472 755C00     946           mov y+2, #0
1475 755B00     947           mov y+1, #0
1478 755A32     948           mov y, #QUITTEMP
147B 1203BB     949           lcall x_lt_y; check if current oven temp is smaller than quittemp
147E            950   
147E 300203     951           jnb mf, FSM1_State0_Done; the oven is working properly
1481            952           ;if not working right
1481 021771     953           ljmp FSM1_WARNING
1484            954   
1484            955           FSM1_State0_Done:
1484 0217B0     956               ljmp FSM1_DONE
1487            957   
1487            958   
1487            959       FSM1_State1:
1487 B40102     960           cjne a, #1, JUMP_FSM1_State2
148A 8003       961               sjmp Start_FSM1_State1
148C            962           JUMP_FSM1_State2:
148C 021533     963               ljmp FSM1_State2
148F            964           
148F            965           Start_FSM1_State1:
148F D5320B     966           djnz Time_Counter, FSM1_State1_Continue; decrement every 1 second
1492            967           ;time over, change state
1492 120BAA     968           lcall clear_speaking
1495 120B22     969           lcall ramp_to_peak
1498 0534       970           inc FSM1_State; increment states
149A 021530     971           ljmp FSM1_State1_Done
149D            972   
149D            973           FSM1_State1_Continue:
149D            974           ;next: check temp
149D            975           ;read temp and compare
149D 1206D7     976       lcall Read_Room_Temp
14A0 1205FD     976       lcall Read_Oven_Temp
14A3            976   
14A3            976       ;mov(dst, src)
14A3 855159     976            mov x+3, Current_Oven_Temp+3
14A6 855058     976       mov x+2, Current_Oven_Temp+2
14A9 854F57     976       mov x+1, Current_Oven_Temp+1
14AC 854E56     976       mov x,   Current_Oven_Temp
14AF            976       ;mov(dst, src)
14AF 85395D     976            mov y+3, TEMP_SOAK+3
14B2 85385C     976       mov y+2, TEMP_SOAK+2
14B5 85375B     976       mov y+1, TEMP_SOAK+1
14B8 85365A     976       mov y,   TEMP_SOAK
14BB            976   
14BB 1203BB     976       lcall x_lt_y   ;Update current temp info
14BE C0E0       977            push acc
14C0 7401       977            mov a, #1
14C2 14         977            dec a
14C3 12028B     977            lcall ?Set_Cursor_1 ; Select column and row
14C6 D0E0       977            pop acc
14C8 C083       977            push dph
14CA C082       977            push dpl
14CC C0E0       977            push acc
14CE 900146     977            mov dptr, #WORKING
14D1 12027E     977            lcall ?Send_Constant_String
14D4 D0E0       977            pop acc
14D6 D082       977            pop dpl
14D8 D083       977            pop dph
14DA C0E0       977            push acc
14DC 7401       977            mov a, #1
14DE 14         977            dec a
14DF 120289     977            lcall ?Set_Cursor_2 ; Select column and row
14E2 D0E0       977            pop acc
14E4 C083       977            push dph
14E6 C082       977            push dpl
14E8 C0E0       977            push acc
14EA 900168     977            mov dptr, #STEP2
14ED 12027E     977            lcall ?Send_Constant_String
14F0 D0E0       977            pop acc
14F2 D082       977            pop dpl
14F4 D083       977            pop dph
14F6 120D36     978           lcall Display_Working_Status; update time and temp on lcd
14F9            979           ;if temp is lower than expected, jump to ON
14F9 C0E0       980            push acc
14FB 7405       980            mov a, #5
14FD 14         980            dec a
14FE 120289     980            lcall ?Set_Cursor_2 ; Select column and row
1501 D0E0       980            pop acc
1503 755600     981            mov x+0, #low (0 % 0x10000) 
1506 755700     981            mov x+1, #high(0 % 0x10000) 
1509 755800     981            mov x+2, #low (0 / 0x10000) 
150C 755900     981            mov x+3, #high(0 / 0x10000) 
150F 853256     982           mov x, Time_Counter
1512 1202B3     983       lcall hex2bcd
1515            983       ;now the bcd num of time is stored in bcd
1515 C000       983            push ar0
1517 A85F       983            mov r0, bcd+1
1519 1202A6     983            lcall ?Display_NUM
151C D000       983            pop ar0;
151E C000       983            push ar0
1520 A85E       983            mov r0, bcd
1522 120290     983            lcall ?Display_BCD
1525 D000       983            pop ar0;
1527            984   
1527 200204     985           jb mf, FSM1_State1_ON
152A            986           ;if temp is higher, close oven
152A C2A7       987           clr OVEN 
152C 8002       988           sjmp FSM1_State1_Done
152E            989   
152E            990           FSM1_State1_ON:
152E D2A7       991           setb OVEN   ;if temp is lower, turn on oven
1530            992           FSM1_State1_Done:
1530 0217B0     993               ljmp FSM1_DONE
1533            994   
1533            995       FSM1_State2: ;temp ramp up until TEMP_RFLW
1533 B40202     996           cjne a, #2, JUMP_FSM1_State3
1536 8003       997               sjmp Start_FSM1_State2
1538            998           JUMP_FSM1_State3:
1538 0215D8     999               ljmp FSM1_State3
153B           1000   
153B           1001           Start_FSM1_State2:
153B D2A7      1002           setb OVEN; turn on oven
153D           1003   
153D           1004           ;read temperature
153D 1206D7    1005       lcall Read_Room_Temp
1540 1205FD    1005       lcall Read_Oven_Temp
1543           1005   
1543           1005       ;mov(dst, src)
1543 855159    1005            mov x+3, Current_Oven_Temp+3
1546 855058    1005       mov x+2, Current_Oven_Temp+2
1549 854F57    1005       mov x+1, Current_Oven_Temp+1
154C 854E56    1005       mov x,   Current_Oven_Temp
154F           1005       ;mov(dst, src)
154F 85415D    1005            mov y+3, TEMP_RFLW+3
1552 85405C    1005       mov y+2, TEMP_RFLW+2
1555 853F5B    1005       mov y+1, TEMP_RFLW+1
1558 853E5A    1005       mov y,   TEMP_RFLW
155B           1005   
155B 1203BB    1005       lcall x_lt_y
155E 20020E    1006           jb mf, FSM1_State2_Continue
1561           1007           ;if temp reached
1561 120BAA    1008           lcall clear_speaking
1564 120B41    1009           lcall reflow
1567 0534      1010           inc FSM1_State
1569 854232    1011           mov Time_Counter, TIME_RFLW
156C 0217B0    1012           ljmp FSM1_DONE
156F           1013   
156F           1014           FSM1_State2_Continue:
156F C0E0      1015            push acc
1571 7401      1015            mov a, #1
1573 14        1015            dec a
1574 12028B    1015            lcall ?Set_Cursor_1 ; Select column and row
1577 D0E0      1015            pop acc
1579 C083      1015            push dph
157B C082      1015            push dpl
157D C0E0      1015            push acc
157F 900146    1015            mov dptr, #WORKING
1582 12027E    1015            lcall ?Send_Constant_String
1585 D0E0      1015            pop acc
1587 D082      1015            pop dpl
1589 D083      1015            pop dph
158B C0E0      1015            push acc
158D 7401      1015            mov a, #1
158F 14        1015            dec a
1590 120289    1015            lcall ?Set_Cursor_2 ; Select column and row
1593 D0E0      1015            pop acc
1595 C083      1015            push dph
1597 C082      1015            push dpl
1599 C0E0      1015            push acc
159B 900179    1015            mov dptr, #STEP3
159E 12027E    1015            lcall ?Send_Constant_String
15A1 D0E0      1015            pop acc
15A3 D082      1015            pop dpl
15A5 D083      1015            pop dph
15A7 120D36    1016           lcall Display_Working_Status
15AA C0E0      1017            push acc
15AC 7406      1017            mov a, #6
15AE 14        1017            dec a
15AF 120289    1017            lcall ?Set_Cursor_2 ; Select column and row
15B2 D0E0      1017            pop acc
15B4           1018       ;mov(dst, src)
15B4 854159    1018            mov x+3, TEMP_RFLW+3
15B7 854058    1018       mov x+2, TEMP_RFLW+2
15BA 853F57    1018       mov x+1, TEMP_RFLW+1
15BD 853E56    1018       mov x,   TEMP_RFLW
15C0 1202B3    1019       lcall hex2bcd
15C3           1019       ;now the bcd num of time is stored in bcd
15C3 C000      1019            push ar0
15C5 A85F      1019            mov r0, bcd+1
15C7 1202A6    1019            lcall ?Display_NUM
15CA D000      1019            pop ar0;
15CC C000      1019            push ar0
15CE A85E      1019            mov r0, bcd
15D0 120290    1019            lcall ?Display_BCD
15D3 D000      1019            pop ar0;
15D5           1020   
15D5           1021           FSM1_State2_Done:
15D5 0217B0    1022               ljmp FSM1_DONE
15D8           1023           
15D8           1024            FSM1_State3: ; keep temp at TEMP_RFLW for a few time
15D8 B40302    1025           cjne a, #3, JUMP_FSM1_State4
15DB 8003      1026               sjmp Start_FSM1_State3
15DD           1027           JUMP_FSM1_State4:
15DD 021684    1028               ljmp FSM1_State4
15E0           1029           
15E0           1030           Start_FSM1_State3:
15E0 D5320B    1031           djnz Time_Counter, FSM1_State3_Continue
15E3           1032           ;if time's up
15E3 120BAA    1033           lcall clear_speaking
15E6 120B60    1034           lcall cooling
15E9 0534      1035           inc FSM1_State
15EB 021681    1036           ljmp FSM1_State3_Done
15EE           1037   
15EE           1038           FSM1_State3_Continue:
15EE C0E0      1039            push acc
15F0 7401      1039            mov a, #1
15F2 14        1039            dec a
15F3 12028B    1039            lcall ?Set_Cursor_1 ; Select column and row
15F6 D0E0      1039            pop acc
15F8 C083      1039            push dph
15FA C082      1039            push dpl
15FC C0E0      1039            push acc
15FE 900146    1039            mov dptr, #WORKING
1601 12027E    1039            lcall ?Send_Constant_String
1604 D0E0      1039            pop acc
1606 D082      1039            pop dpl
1608 D083      1039            pop dph
160A C0E0      1039            push acc
160C 7401      1039            mov a, #1
160E 14        1039            dec a
160F 120289    1039            lcall ?Set_Cursor_2 ; Select column and row
1612 D0E0      1039            pop acc
1614 C083      1039            push dph
1616 C082      1039            push dpl
1618 C0E0      1039            push acc
161A 90018A    1039            mov dptr, #STEP4
161D 12027E    1039            lcall ?Send_Constant_String
1620 D0E0      1039            pop acc
1622 D082      1039            pop dpl
1624 D083      1039            pop dph
1626 120D36    1040           lcall Display_Working_Status
1629 1206D7    1041       lcall Read_Room_Temp
162C 1205FD    1041       lcall Read_Oven_Temp
162F           1041   
162F           1041       ;mov(dst, src)
162F 855159    1041            mov x+3, Current_Oven_Temp+3
1632 855058    1041       mov x+2, Current_Oven_Temp+2
1635 854F57    1041       mov x+1, Current_Oven_Temp+1
1638 854E56    1041       mov x,   Current_Oven_Temp
163B           1041       ;mov(dst, src)
163B 85415D    1041            mov y+3, TEMP_RFLW+3
163E 85405C    1041       mov y+2, TEMP_RFLW+2
1641 853F5B    1041       mov y+1, TEMP_RFLW+1
1644 853E5A    1041       mov y,   TEMP_RFLW
1647           1041   
1647 1203BB    1041       lcall x_lt_y; update temp info, set or clr mf flag
164A C0E0      1042            push acc
164C 7405      1042            mov a, #5
164E 14        1042            dec a
164F 120289    1042            lcall ?Set_Cursor_2 ; Select column and row
1652 D0E0      1042            pop acc
1654 755600    1043            mov x+0, #low (0 % 0x10000) 
1657 755700    1043            mov x+1, #high(0 % 0x10000) 
165A 755800    1043            mov x+2, #low (0 / 0x10000) 
165D 755900    1043            mov x+3, #high(0 / 0x10000) 
1660 853256    1044           mov x, Time_Counter
1663 1202B3    1045       lcall hex2bcd
1666           1045       ;now the bcd num of time is stored in bcd
1666 C000      1045            push ar0
1668 A85F      1045            mov r0, bcd+1
166A 1202A6    1045            lcall ?Display_NUM
166D D000      1045            pop ar0;
166F C000      1045            push ar0
1671 A85E      1045            mov r0, bcd
1673 120290    1045            lcall ?Display_BCD
1676 D000      1045            pop ar0;
1678           1046   
1678           1047           ;if temp is lower than expected, jump to ON
1678 200204    1048           jb mf, FSM1_State3_ON
167B           1049           ;if temp is higher, close oven
167B C2A7      1050           clr OVEN 
167D 8002      1051           sjmp FSM1_State3_Done
167F           1052   
167F           1053           FSM1_State3_ON:
167F D2A7      1054           setb OVEN   ;if temp is lower, turn on oven
1681           1055           FSM1_State3_Done:
1681 0217B0    1056               ljmp FSM1_DONE
1684           1057           
1684           1058   
1684           1059       
1684           1060       FSM1_State4:; cool down until safe temp
1684 B40402    1061           cjne a, #4, JUMP_FSM1_State5
1687 8003      1062               sjmp Start_FSM1_State4
1689           1063           JUMP_FSM1_State5:
1689 021726    1064               ljmp FSM1_State5
168C           1065           
168C           1066           Start_FSM1_State4:
168C C2A7      1067           clr OVEN
168E           1068           ;read temperature
168E 1206D7    1069       lcall Read_Room_Temp
1691 1205FD    1069       lcall Read_Oven_Temp
1694           1069   
1694           1069       ;mov(dst, src)
1694 855159    1069            mov x+3, Current_Oven_Temp+3
1697 855058    1069       mov x+2, Current_Oven_Temp+2
169A 854F57    1069       mov x+1, Current_Oven_Temp+1
169D 854E56    1069       mov x,   Current_Oven_Temp
16A0           1069       ;mov(dst, src)
16A0 85495D    1069            mov y+3, TEMP_SAFE+3
16A3 85485C    1069       mov y+2, TEMP_SAFE+2
16A6 85475B    1069       mov y+1, TEMP_SAFE+1
16A9 85465A    1069       mov y,   TEMP_SAFE
16AC           1069   
16AC 1203BB    1069       lcall x_lt_y
16AF           1070           ;if temp is smaller than TEMP_SAFE, go state 5
16AF 300205    1071           jnb mf, FSM1_State4_Continue
16B2           1072           ;if temp is smaller than expected
16B2 0534      1073           inc FSM1_State
16B4 753200    1074           mov Time_Counter, #0
16B7           1075   
16B7           1076           FSM1_State4_Continue:
16B7 C0E0      1077            push acc
16B9 7401      1077            mov a, #1
16BB 14        1077            dec a
16BC 12028B    1077            lcall ?Set_Cursor_1 ; Select column and row
16BF D0E0      1077            pop acc
16C1 C083      1077            push dph
16C3 C082      1077            push dpl
16C5 C0E0      1077            push acc
16C7 900146    1077            mov dptr, #WORKING
16CA 12027E    1077            lcall ?Send_Constant_String
16CD D0E0      1077            pop acc
16CF D082      1077            pop dpl
16D1 D083      1077            pop dph
16D3 C0E0      1077            push acc
16D5 7401      1077            mov a, #1
16D7 14        1077            dec a
16D8 120289    1077            lcall ?Set_Cursor_2 ; Select column and row
16DB D0E0      1077            pop acc
16DD C083      1077            push dph
16DF C082      1077            push dpl
16E1 C0E0      1077            push acc
16E3 90019B    1077            mov dptr, #STEP5
16E6 12027E    1077            lcall ?Send_Constant_String
16E9 D0E0      1077            pop acc
16EB D082      1077            pop dpl
16ED D083      1077            pop dph
16EF 120D36    1078           lcall Display_Working_Status
16F2 C0E0      1079            push acc
16F4 7405      1079            mov a, #5
16F6 14        1079            dec a
16F7 120289    1079            lcall ?Set_Cursor_2 ; Select column and row
16FA D0E0      1079            pop acc
16FC 755600    1080            mov x+0, #low (0 % 0x10000) 
16FF 755700    1080            mov x+1, #high(0 % 0x10000) 
1702 755800    1080            mov x+2, #low (0 / 0x10000) 
1705 755900    1080            mov x+3, #high(0 / 0x10000) 
1708 854656    1081           mov x, TEMP_SAFE
170B 1202B3    1082           lcall hex2bcd
170E 1202B3    1083       lcall hex2bcd
1711           1083       ;now the bcd num of time is stored in bcd
1711 C000      1083            push ar0
1713 A85F      1083            mov r0, bcd+1
1715 1202A6    1083            lcall ?Display_NUM
1718 D000      1083            pop ar0;
171A C000      1083            push ar0
171C A85E      1083            mov r0, bcd
171E 120290    1083            lcall ?Display_BCD
1721 D000      1083            pop ar0;
1723           1084   
1723           1085           FSM1_State4_Done:
1723 0217B0    1086               ljmp FSM1_DONE
1726           1087   
1726           1088       FSM1_State5: ; already cool done, display something, play some music
1726 B40502    1089            cjne a, #5, JUMP_FSM1_DOne
1729 8003      1090               sjmp Start_FSM1_State5
172B           1091           JUMP_FSM1_Done:
172B 0217B0    1092               ljmp FSM1_Done
172E           1093               
172E           1094           Start_FSM1_State5:
172E C2A7      1095           clr OVEN; double check oven is not on
1730 C203      1096           clr enable_time_global; stop counting
1732 C208      1097           clr speak_enable
1734 C0E0      1098            push acc
1736 7401      1098            mov a, #1
1738 14        1098            dec a
1739 12028B    1098            lcall ?Set_Cursor_1 ; Select column and row
173C D0E0      1098            pop acc
173E C083      1098            push dph
1740 C082      1098            push dpl
1742 C0E0      1098            push acc
1744 900146    1098            mov dptr, #WORKING
1747 12027E    1098            lcall ?Send_Constant_String
174A D0E0      1098            pop acc
174C D082      1098            pop dpl
174E D083      1098            pop dph
1750 C0E0      1098            push acc
1752 7401      1098            mov a, #1
1754 14        1098            dec a
1755 120289    1098            lcall ?Set_Cursor_2 ; Select column and row
1758 D0E0      1098            pop acc
175A C083      1098            push dph
175C C082      1098            push dpl
175E C0E0      1098            push acc
1760 9001AC    1098            mov dptr, #STEP6
1763 12027E    1098            lcall ?Send_Constant_String
1766 D0E0      1098            pop acc
1768 D082      1098            pop dpl
176A D083      1098            pop dph
176C 120D36    1099           lcall Display_Working_Status
176F 803F      1100           sjmp FSM1_Done
1771           1101   
1771           1102   
1771           1103       FSM1_WARNING:
1771 C2A7      1104           clr OVEN
1773 C0E0      1105            push acc
1775 7401      1105            mov a, #1
1777 14        1105            dec a
1778 12028B    1105            lcall ?Set_Cursor_1 ; Select column and row
177B D0E0      1105            pop acc
177D C083      1105            push dph
177F C082      1105            push dpl
1781 C0E0      1105            push acc
1783 9001BD    1105            mov dptr, #WARNING1
1786 12027E    1105            lcall ?Send_Constant_String
1789 D0E0      1105            pop acc
178B D082      1105            pop dpl
178D D083      1105            pop dph
178F C0E0      1105            push acc
1791 7401      1105            mov a, #1
1793 14        1105            dec a
1794 120289    1105            lcall ?Set_Cursor_2 ; Select column and row
1797 D0E0      1105            pop acc
1799 C083      1105            push dph
179B C082      1105            push dpl
179D C0E0      1105            push acc
179F 9001CE    1105            mov dptr, #WARNING2
17A2 12027E    1105            lcall ?Send_Constant_String
17A5 D0E0      1105            pop acc
17A7 D082      1105            pop dpl
17A9 D083      1105            pop dph
17AB C208      1106           clr speak_enable
17AD 753406    1107           mov FSM1_State, #6
17B0           1108   
17B0           1109       FSM1_DONE:
17B0 22        1110       ret
17B1           1111   
17B1           1112   EN
