                  2   $LIST
0000              4   
0000              5   ;-------------------;
0000              6   ;    Const Define   ;
0000              7   ;-------------------; 
0000              8   XTAL EQU 7373000
0000              9   BAUD EQU 115200
0000             10   BRVAL EQU ((XTAL/BAUD)-16)
0000             11   
0000             12   CCU_RATE      EQU 22050
0000             13   CCU_RELOAD    EQU ((65536-((XTAL/(2*CCU_RATE)))))
0000             14   
0000             15   ;TIMER0_RATE   EQU 4096    ; 4096Hz
0000             16   ;TIMER0_RELOAD EQU ((65536-(XTAL/(2*TIMER0_RATE))))
0000             17   TIMER1_RATE   EQU 100     ; 1000Hz, for a timer tick of 1ms
0000             18   TIMER1_RELOAD EQU ((65536-(XTAL/(2*TIMER1_RATE))))
0000             19   QUITTIME      EQU 60
0000             20   QUITTEMP      EQU 50
0000             21   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             22   
0000             23   number_off_set EQU 17200 ;the distance between each number
0000             24   ;number start at ff
0000             25   
0000             26   ;starting addressed of different sound tracks
0000             27   decimal_start  EQU 360000
0000             28   decimal_off_set EQU 24100
0000             29   decimal_playtime EQU 50000
0000             30   
0000             31   special_dec_start EQU 174000 ;numbers from 10 to 19
0000             32   special_off_set EQU 21500
0000             33   special_playtime EQU 21500;19000
0000             34   
0000             35   hundreds_start EQU 563000
0000             36   hundreds_off_set EQU 36000
0000             37   
0000             38   current_temp_is_start EQU 674000
0000             39   current_temp_playtime EQU 35000
0000             40   
0000             41   degree_start EQU 710000
0000             42   degree_playtime EQU 11018
0000             43   
0000             44   celsius_start EQU 732236
0000             45   celsius_playtime EQU 17000
0000             46   
0000             47   current_process_is_start EQU 757000
0000             48   current_process_is_playtime EQU 27000
0000             49            
0000             50   ramp_to_soak_start EQU 790000
0000             51   ramp_to_soak_playtime EQU 25000
0000             52   
0000             53   preheat_and_soak_start EQU 822000
0000             54   preheat_and_soak_playtime EQU 27000
0000             55   
0000             56   ramp_to_peak_start EQU 857000
0000             57   ramp_to_peak_playtime EQU 19000
0000             58   
0000             59   reflow_start EQU 885000
0000             60   reflow_playtime EQU 15000
0000             61   
0000             62   cooling_start EQU 906000
0000             63   cooling_playtime EQU 14000
0000             64   ;-------------------;
0000             65   ;    Ports Define   ;
0000             66   ;-------------------; 
0000             67   ;ADC01 equ P0.0; Read Room Temperature
0000             68   LCD_RS equ P0.1
0000             69   LCD_RW equ P0.2
0000             70   LCD_E  equ P0.3
0000             71   ;Soundout  P0.4
0000             72   LCD_D4 equ P0.5
0000             73   LCD_D5 equ P0.6
0000             74   LCD_D6 equ P0.7
0000             75   LCD_D7 equ P3.0
0000             76   ;          P3.1
0000             77   ;          P1.2
0000             78   Start  equ P1.3
0000             79   Stop   equ P1.4
0000             80   LED    equ P1.6
0000             81   ;ADC00 equ P1.7; Read Oven Temperature
0000             82   ;ADC03 equ P2.0; Read Keyboard1
0000             83   ;ADC02 equ P2.1; Read Keyboard0
0000             84   ;MOSI  equ P2.2
0000             85   ;MISO  equ P2.3
0000             86   FLASH_CE EQU P2.4
0000             87   ;SPICK equ P2.5
0000             88   ;WAVEOUT   P2.6
0000             89   OVEN   equ P2.7
0000             90   
0000             91   ;------------------------;
0000             92   ;    Interrupt Vectors   ;
0000             93   ;------------------------; 
0000             94   ; Reset vector
0000             95   org 0x0000
0000 020C62      96       ljmp MainProgram
0003             97   
0003             98   ; External interrupt 0 vector, start
0003             99   org 0x0003
0003 020E29     100            ljmp EI0_ISR
0006            101   
0006            102   ; Timer/Counter 0 overflow interrupt vector
000B            103   org 0x000B
000B 32         104            reti
000C            105   
000C            106   ; External interrupt 1 vector, stop
0013            107   org 0x0013
0013 020E37     108            ljmp EI1_ISR
0016            109   
0016            110   ; Timer/Counter 1 overflow interrupt vector
001B            111   org 0x001B
001B 020E02     112            ljmp Timer1_ISR
001E            113   
001E            114   ; Serial port receive/transmit interrupt vector
0023            115   org 0x0023 
0023 32         116            reti
0024            117   
0024            118   ; CCU interrupt vector
005B            119   org 0x005b 
005B 02077D     120            ljmp CCU_ISR
005E            121   
005E            122   ;-----------------------;
005E            123   ;    Variables Define   ;
005E            124   ;-----------------------; 
005E            125   ;Variable_name: ds n
0030            126   dseg at 0x30
0030            127       Count10ms:    ds 1 ; Used to determine when half second has passed
0031            128       Time_Global:  ds 1 ; to store the time of whole process
0032            129       Time_Counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033            130   
0033            131       FSM0_State: ds 1
0034            132       FSM1_State: ds 1
0035            133   
0035            134       Profile_Num: ds 1
0036            135   
0036            136       TEMP_SOAK:  ds 4
003A            137       TIME_SOAK:  ds 4
003E            138       TEMP_RFLW:  ds 4
0042            139       TIME_RFLW:  ds 4
0046            140       TEMP_SAFE:  ds 4
004A            141       Current_Room_Temp: ds 4
004E            142            Current_Oven_Temp: ds 4
0052            143       bcd_bitnumber: ds 1
0053            144   
0053            145       Cursor:     ds 1
0054            146       NEW_BCD:    ds 2    ; 3 digit BCD used to store current entered number
0056            147       NEW_HEX:    ds 4    ; 32 bit number of new entered number
005A            148       ;for math32.inc
005A            149       x: ds 4
005E            150       y: ds 4
0062            151       bcd: ds 5
0067            152       Count5s: ds 1
0068            153       ;z
0068            154       w:   ds 3 ; 24-bit play counter.  Decremented in CCU ISR.
006B            155            number: ds 1;
006C            156       digits: ds 1;
006D            157            tenth: ds 1;
006E            158            individual_offest: ds 1;
006F            159       speak_state:       ds 1;
0070            160       ;key
0070            161       keyin: ds 1
0071            162   
0071            163   
0071            164   ;-------------------;
0071            165   ;    Flags Define   ;
0071            166   ;-------------------; 
0071            167   ;Flag_name: dbit 1
0000            168   bseg
0000            169       FSM0_State_Changed:  dbit 1
0001            170       Main_State:          dbit 1 ; 0 for setting, 1 for reflowing
0002            171       ;for math32.inc
0002            172       mf: dbit 1
0003            173       enable_time_global: dbit 1
0004            174       half_seconds_flag: dbit 1 ; 500ms in double rate mode
0005            175           nodigit: dbit 1 ; if playing from 10 to 19 then we don't need to
0006            176                       ;play the last digit
0006            177            skiphundred: dbit 1
0007            178            skiptenth: dbit 1
0008            179       speak_enable: dbit 1
0009            180   ;-----------------------;
0009            181   ;     Include Files     ;
0009            182   ;-----------------------; 
0009            183   ;$NOLIST
                 -1       $include(lcd_4bit.inc) 
005E              1   cseg
005E              2   
005E 30313233     3   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
006E 30313233     4   hex: db '0123456789abcdef',0
     34353637
     38396162
     63646566
     00
007F              5   
007F              6   ;LCD                '1234567890123456'
007F 57454C43     7   WELCOME1:        db 'WELCOME!        '   ,0
     4F4D4521
     20202020
     20202020
     00
0090 53757065     8   WELCOME2:        db 'Super Reflow!   '   ,0
     72205265
     666C6F77
     21202020
     00
00A1 53657474     9   MAIN_FACE1:      db 'Setting: Prof   '   ,0
     696E673A
     2050726F
     66202020
     00
00B2 53746172    10   MAIN_FACE2: db 'Start       Stop'   ,0
     74202020
     20202020
     53746F70
     00
00C3 53544D50    11   SETTING1:        db 'STMP:   STM:   s'   ,0
     3A202020
     53544D3A
     20202073
     00
00D4 52544D50    12   SETTING2:   db 'RTMP:   RTM:   s'   ,0
     3A202020
     52544D3A
     20202073
     00
00E5 4F4C443A    13   MODIFY_DOWN:db 'OLD:    NEW:    '   ,0
     20202020
     4E45573A
     20202020
     00
00F6 4D4F4449    14   MODIFY1:         db 'MODIFY:TEMP_SOAK'   ,0
     46593A54
     454D505F
     534F414B
     00
0107 4D4F4449    15   MODIFY2:         db 'MODIFY:TIME_SOAK'   ,0
     46593A54
     494D455F
     534F414B
     00
0118 4D4F4449    16   MODIFY3:         db 'MODIFY:TEMP_RFLW'   ,0
     46593A54
     454D505F
     52464C57
     00
0129 4D4F4449    17   MODIFY4:         db 'MODIFY:TIME_RFLW'   ,0
     46593A54
     494D455F
     52464C57
     00
013A 4D4F4449    18   MODIFY5:    db 'MODIFY:SAFE'   ,0
     46593A53
     41464500
0146 54454D50    19   WORKING:    db 'TEMP:   TIME:   '   ,0
     3A202020
     54494D45
     3A202020
     00
0157 53544D50    20   STEP1:           db 'STMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
0168 53544D3A    21   STEP2:      db 'STM:   s SOAKING'   ,0
     20202073
     20534F41
     4B494E47
     00
0179 52544D50    22   STEP3:      db 'RTMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
018A 52544D3A    23   STEP4:      db 'RTM:   s REFLOW '   ,0
     20202073
     20524546
     4C4F5720
     00
019B 5346543A    24   STEP5:      db 'SFT:     COOLING'   ,0
     20202020
     20434F4F
     4C494E47
     00
01AC 20202020    25   STEP6:      db '         FINISH '   ,0
     20202020
     2046494E
     49534820
     00
01BD 4572726F    26   WARNING1:   db 'Error Warning!  '   ,0
     72205761
     726E696E
     67212020
     00
01CE 54454D50    27   WARNING2:   db 'TEMP Sensing ERR'   ,0
     2053656E
     73696E67
     20455252
     00
01DF             28   ;---------------------------------;
01DF             29   ;           Basic Macros          ;
01DF             30   ;---------------------------------;
                 31   LCD_Initailize mac
                 32   	lcall LCD_4BIT
                 33   endmac
01DF             34   
                 35   LCD_WriteData mac
                 36   	mov a, %0
                 37   	lcall ?LCD_WriteData
                 38   endmac
01DF             39            
                 40   LCD_WriteCommand mac
                 41   	mov a, %0
                 42   	lcall ?LCD_WriteCommand
                 43   endmac
01DF             44   
                 45   LCD_Send_Constant_String mac
                 46   	push dph
                 47   	push dpl
                 48   	push acc
                 49   	mov dptr, %0
                 50   	lcall ?Send_Constant_String
                 51   	pop acc
                 52   	pop dpl
                 53   	pop dph
                 54   endmac
01DF             55   
                 56   LCD_Set_Cursor mac
                 57   	push acc
                 58   	mov a, #%1
                 59   	dec a
                 60   	lcall ?Set_Cursor_%0 ; Select column and row
                 61   	pop acc
                 62   endmac
01DF             63   
                 64   LCD_Display_BCD mac
                 65   	push ar0
                 66   	mov r0, %0
                 67   	lcall ?Display_BCD
                 68   	pop ar0
                 69   endmac
01DF             70   
                 71   LCD_Display_NUM mac
                 72   	push ar0
                 73   	mov r0, %0
                 74   	lcall ?Display_NUM
                 75   	pop ar0
                 76   endmac
01DF             77   
                 78   LCD_Display_Char mac
                 79   	push acc
                 80   	mov a, %0
                 81   	lcall ?LCD_WriteData
                 82   	pop acc
                 83   endmac
01DF             84   
                 85   Wait_Milli_Seconds mac
                 86   	push AR2
                 87   	mov R2, %0
                 88   	lcall ?Wait_Milli_Seconds
                 89   	pop AR2
                 90   endmac
01DF             91   
01DF             92   ;---------------------------------;
01DF             93   ;         Interface Macros        ;
01DF             94   ;---------------------------------;
01DF             95   
                 96   LCD_INTERFACE_WELCOME mac
                 97   	LCD_Set_Cursor(1,1)
                 98   	LCD_Send_Constant_String(#WELCOME1)
                 99   	LCD_Set_Cursor(2,1)
                100   	LCD_Send_Constant_String(#WELCOME2)
                101   endmac
01DF            102   
                103   LCD_INTERFACE_MAIN mac
                104   	LCD_Set_Cursor(1,1)
                105   	LCD_Send_Constant_String(#MAIN_FACE1)
                106   	LCD_Set_Cursor(2,1)
                107   	LCD_Send_Constant_String(#MAIN_FACE2)
                108   	LCD_Set_Cursor(1,15); Profile number
                109   	LCD_Display_BCD(Profile_Num)
                110   endmac
01DF            112   
                113   LCD_INTERFACE_SETTING mac
                114   	LCD_Set_Cursor(1,1)
                115   	LCD_Send_Constant_String(#SETTING1)
                116   	LCD_Set_Cursor(2,1)
                117   	LCD_Send_Constant_String(#SETTING2)
                118   endmac
01DF            119   
                120   LCD_INTERFACE_MODIFY1 mac
                121   	LCD_Set_Cursor(1,1)
                122   	LCD_Send_Constant_String(#MODIFY1)
                123   	LCD_Set_Cursor(2,1)
                124   	LCD_Send_Constant_String(#MODIFY_DOWN)
                125   endmac
01DF            126   
                127   LCD_INTERFACE_MODIFY2 mac
                128   	LCD_Set_Cursor(1,1)
                129   	LCD_Send_Constant_String(#MODIFY2)
                130   	LCD_Set_Cursor(2,1)
                131   	LCD_Send_Constant_String(#MODIFY_DOWN)
                132   endmac
01DF            133   
                134   LCD_INTERFACE_MODIFY3 mac
                135   	LCD_Set_Cursor(1,1)
                136   	LCD_Send_Constant_String(#MODIFY3)
                137   	LCD_Set_Cursor(2,1)
                138   	LCD_Send_Constant_String(#MODIFY_DOWN)
                139   endmac
01DF            140   
                141   LCD_INTERFACE_MODIFY4 mac
                142   	LCD_Set_Cursor(1,1)
                143   	LCD_Send_Constant_String(#MODIFY4)
                144   	LCD_Set_Cursor(2,1)
                145   	LCD_Send_Constant_String(#MODIFY_DOWN)
                146   endmac
01DF            147   
                148   LCD_INTERFACE_MODIFY5 mac
                149   	LCD_Set_Cursor(1,1)
                150   	LCD_Send_Constant_String(#MODIFY5)
                151   	LCD_Set_Cursor(2,1)
                152   	LCD_Send_Constant_String(#MODIFY_DOWN)
                153   endmac
01DF            154   
                155   LCD_INTERFACE_STEP1 mac
                156   	LCD_Set_Cursor(1,1)
                157   	LCD_Send_Constant_String(#WORKING)
                158   	LCD_Set_Cursor(2,1)
                159   	LCD_Send_Constant_String(#STEP1)
                160   endmac
01DF            161   
                162   LCD_INTERFACE_STEP2 mac
                163   	LCD_Set_Cursor(1,1)
                164   	LCD_Send_Constant_String(#WORKING)
                165   	LCD_Set_Cursor(2,1)
                166   	LCD_Send_Constant_String(#STEP2)
                167   endmac
01DF            168   
                169   LCD_INTERFACE_STEP3 mac
                170   	LCD_Set_Cursor(1,1)
                171   	LCD_Send_Constant_String(#WORKING)
                172   	LCD_Set_Cursor(2,1)
                173   	LCD_Send_Constant_String(#STEP3)
                174   endmac
01DF            175   
                176   LCD_INTERFACE_STEP4 mac
                177   	LCD_Set_Cursor(1,1)
                178   	LCD_Send_Constant_String(#WORKING)
                179   	LCD_Set_Cursor(2,1)
                180   	LCD_Send_Constant_String(#STEP4)
                181   endmac
01DF            182   
                183   LCD_INTERFACE_STEP5 mac
                184   	LCD_Set_Cursor(1,1)
                185   	LCD_Send_Constant_String(#WORKING)
                186   	LCD_Set_Cursor(2,1)
                187   	LCD_Send_Constant_String(#STEP5)
                188   endmac
01DF            189   
                190   LCD_INTERFACE_STEP6 mac
                191   	LCD_Set_Cursor(1,1)
                192   	LCD_Send_Constant_String(#WORKING)
                193   	LCD_Set_Cursor(2,1)
                194   	LCD_Send_Constant_String(#STEP6)
                195   endmac
01DF            196   
                197   LCD_INTERFACE_WARNING mac
                198   	LCD_Set_Cursor(1,1)
                199   	LCD_Send_Constant_String(#WARNING1)
                200   	LCD_Set_Cursor(2,1)
                201   	LCD_Send_Constant_String(#WARNING2)
                202   endmac
01DF            203   
01DF            204   
01DF            205   Wait10us:
01DF 7812       206       mov R0, #18
01E1 D8FE       207       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
01E3 22         208            ret
01E4            209   ;---------------------------------;
01E4            210   ; Wait 40 microseconds            ;
01E4            211   ;---------------------------------;
01E4            212   Wait40uSec:
01E4 C000       213            push AR0
01E6 784A       214            mov R0, #74
01E8            215   L0: 
01E8 D8FE       216            djnz R0, L0 ; 2 cycles->2*271.26ns*74=40us
01EA D000       217            pop AR0
01EC 22         218       ret
01ED            219   
01ED            220   ;---------------------------------;
01ED            221   ; Wait 500 microseconds           ;
01ED            222   ;---------------------------------;
01ED            223   WaitHalfSec:
01ED 7A28       224       mov R2, #40
01EF 79FA       225   H3: mov R1, #250
01F1 78B8       226   H2: mov R0, #184
01F3 D8FE       227   H1: djnz R0, H1 ; 2 machine cycles-> 2*0.27126us*184=100us
01F5 D9FA       228       djnz R1, H2 ; 100us*250=0.025s
01F7 DAF6       229       djnz R2, H3 ; 0.025s*20=0.5s
01F9 22         230       ret
01FA            231   
01FA            232   ;---------------------------------;
01FA            233   ; Wait 'R2' milliseconds          ;
01FA            234   ;---------------------------------;
01FA            235   ?Wait_Milli_Seconds:
01FA C000       236            push AR0
01FC C001       237            push AR1
01FE 790A       238   L3: mov R1, #10
0200 78B8       239   L2: mov R0, #184
0202 D8FE       240   L1: djnz R0, L1 ; 2 cycles->2*271.26ns*184=100us
0204 D9FA       241       djnz R1, L2 ; 100us*10=1ms
0206 DAF6       242       djnz R2, L3 ; number of millisecons to wait passed in R2
0208 D001       243       pop AR1
020A D000       244       pop AR0
020C 22         245       ret
020D            246            
020D            247   ;---------------------------------;
020D            248   ; Toggles the 'E' pin in the LCD  ;
020D            249   ;---------------------------------;
020D            250   LCD_pulse:
020D D283       251            setb LCD_E
020F 1201E4     252            lcall Wait40uSec
0212 C283       253            clr LCD_E
0214 1201E4     254       lcall Wait40uSec
0217 22         255       ret
0218            256   
0218            257   ;---------------------------------;
0218            258   ; Writes acc to LCD in 4-bit mode ;
0218            259   ;---------------------------------;
0218            260   LCD_byte:
0218            261            ; Write high 4 bits first
0218 A2E7       262            mov c, ACC.7
021A 92B0       263            mov LCD_D7, c
021C A2E6       264            mov c, ACC.6
021E 9287       265            mov LCD_D6, c
0220 A2E5       266            mov c, ACC.5
0222 9286       267            mov LCD_D5, c
0224 A2E4       268            mov c, ACC.4
0226 9285       269            mov LCD_D4, c
0228 12020D     270       lcall LCD_pulse
022B            271            ; Write low 4 bits next
022B A2E3       272            mov c, ACC.3
022D 92B0       273            mov LCD_D7, c
022F A2E2       274            mov c, ACC.2
0231 9287       275            mov LCD_D6, c
0233 A2E1       276            mov c, ACC.1
0235 9286       277            mov LCD_D5, c
0237 A2E0       278            mov c, ACC.0
0239 9285       279            mov LCD_D4, c
023B 12020D     280       lcall LCD_pulse
023E 22         281            ret
023F            282   
023F            283   ;---------------------------------;
023F            284   ; Write data to LCD               ;
023F            285   ;---------------------------------;
023F            286   ?LCD_WriteData:
023F D281       287            setb LCD_RS
0241 020218     288            ljmp LCD_byte
0244            289   
0244            290   ;---------------------------------;
0244            291   ; Write command to LCD            ;
0244            292   ;---------------------------------;
0244            293   ?LCD_WriteCommand:
0244 C281       294            clr LCD_RS
0246 020218     295            ljmp LCD_byte
0249            296   
0249            297   ;---------------------------------;
0249            298   ; Configure LCD in 4-bit mode     ;
0249            299   ;---------------------------------;
0249            300   LCD_4BIT:
0249 C283       301            clr LCD_E   ; Resting state of LCD's enable pin is zero
024B C282       302            clr LCD_RW  ; We are only writing to the LCD in this program
024D            303            
024D            304            ; After power on, let the LCD start up before initializing
024D C002       305            push AR2
024F 7A28       305            mov R2, #40
0251 1201FA     305            lcall ?Wait_Milli_Seconds
0254 D002       305            pop AR2
0256            306            
0256            307            ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
0256 7433       308            mov a, #0x33
0258 120244     308            lcall ?LCD_WriteCommand
025B 7433       309            mov a, #0x33
025D 120244     309            lcall ?LCD_WriteCommand
0260 7432       310            mov a, #0x32
0262 120244     310            lcall ?LCD_WriteCommand ; change to 4-bit mode
0265            311   
0265            312            ; Configure the LCD
0265 7428       313            mov a, #0x28
0267 120244     313            lcall ?LCD_WriteCommand
026A 740C       314            mov a, #0x0c
026C 120244     314            lcall ?LCD_WriteCommand
026F 7401       315            mov a, #0x01
0271 120244     315            lcall ?LCD_WriteCommand ;  Clear screen command (takes some time)
0274            316   
0274            317       ;Wait for the clear screen command to finish.
0274 C002       318            push AR2
0276 7A02       318            mov R2, #2
0278 1201FA     318            lcall ?Wait_Milli_Seconds
027B D002       318            pop AR2
027D 22         319       ret
027E            320   
027E            321   ;---------------------------------;
027E            322   ; Send a constant string to LCD   ;
027E            323   ;---------------------------------;
027E            324   ?Send_Constant_String:
027E E4         325       clr a
027F 93         326       movc a, @a+dptr
0280 6006       327       jz ?Send_Constant_String_Done
0282 12023F     328       lcall ?LCD_WriteData
0285 A3         329       inc dptr
0286 80F6       330       sjmp ?Send_Constant_String
0288            331   ?Send_Constant_String_Done:
0288 22         332       ret  
0289            333   
0289            334   ;---------------------------------;
0289            335   ; Set LCD cursor at row, column   ;
0289            336   ;---------------------------------;
0289            337   ?Set_Cursor_2:
0289 4440       338            orl a, #01000000B
028B            339   ?Set_Cursor_1:
028B 4480       340            orl a, #10000000B
028D 020244     341            ljmp ?LCD_WriteCommand ; Select column and row
0290            342   
0290            343   ;---------------------------------;
0290            344   ; Display a BCD number in the LCD ;
0290            345   ;---------------------------------;
0290            346   ?Display_BCD:
0290 C0E0       347            push acc
0292            348            ; Write most significant digit
0292 E8         349            mov a, r0
0293 C4         350            swap a
0294 540F       351            anl a, #0fh
0296 4430       352            orl a, #30h
0298 12023F     353            lcall ?LCD_WriteData
029B            354            ; write least significant digit
029B E8         355            mov a, r0
029C 540F       356            anl a, #0fh
029E 4430       357            orl a, #30h
02A0 12023F     358            lcall ?LCD_WriteData
02A3 D0E0       359            pop acc
02A5 22         360            ret
02A6            361   
02A6            362   ?Display_NUM:
02A6 C0E0       363            push acc
02A8 E8         364            mov a, R0
02A9 540F       365            anl a, #0fh
02AB 4430       366            orl a, #30h
02AD 12023F     367            lcall ?LCD_WriteData
02B0 D0E0       368            pop acc
02B2            369   
02B2 22         370            ret
                 -1       $include(math32.inc)
                559   $LIST
                 -1       $include(LPC9351.inc)
0523              1   cseg
0523              2   
0523              3   ;---------------------------------;
0523              4   ;           Basic Macros          ;
0523              5   ;---------------------------------;
                  6   Ports_Initialize mac
                  7       lcall Ports_Init
                  8   endmac
0523              9   
                 10   Clock_Double mac
                 11       lcall _Clock_Double
                 12   endmac
0523             13   
                 14   ADC_Initialize mac
                 15       lcall InitADC
                 16   endmac
0523             17   
0523             18   ;---------------------------------;
0523             19   ;            Functions            ;
0523             20   ;---------------------------------;
0523             21   _Clock_Double:
0523 C0E0        22       push acc
0525 90FFDE      23       mov dptr, #CLKCON
0528 E0          24       movx a, @dptr
0529 4408        25       orl a, #00001000B ; double the clock speed to 14.746MHz
052B F0          26       movx @dptr,a
052C D0E0        27       pop acc
052E 22          28       ret
052F             29   
052F             30   ;---------------------------------;
052F             31   ; Initial configuration of ports. ;
052F             32   ; After reset the default for the ;
052F             33   ; pins is 'Open Drain'.  This     ;
052F             34   ; routine changes them pins to    ;
052F             35   ; Quasi-bidirectional like in the ;
052F             36   ; original 8051.                  ;
052F             37   ; Notice that P1.2 and P1.3 are   ;
052F             38   ; always 'Open Drain'. If those   ;
052F             39   ; pins are to be used as output   ;
052F             40   ; they need a pull-up resistor.   ;
052F             41   ;---------------------------------;
052F             42   Ports_Init:
052F             43       ; Configure all the ports in bidirectional mode:
052F 758400      44       mov P0M1, #00H
0532 758500      45       mov P0M2, #00H
0535 759100      46       mov P1M1, #00H
0538 759200      47       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
053B 75A400      48       mov P2M1, #00H
053E 75A500      49       mov P2M2, #00H
0541 75B100      50       mov P3M1, #00H
0544 75B200      51       mov P3M2, #00H
0547 22          52            ret
0548             53   
0548             54   InitADC:
0548             55            ; ADC0_0 is connected to P1.7
0548             56            ; ADC0_1 is connected to P0.0
0548             57            ; ADC0_2 is connected to P2.1
0548             58            ; ADC0_3 is connected to P2.0
0548             59       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
0548 438401      60       orl P0M1, #00000001b
054B 5385FE      61       anl P0M2, #11111110b
054E 439180      62       orl P1M1, #10000000b
0551 53927F      63       anl P1M2, #01111111b
0554 43A403      64       orl P2M1, #00000011b
0557 53A5FC      65       anl P2M2, #11111100b
055A             66            ; Setup ADC0
055A D2C2        67            setb BURST0 ; Autoscan continuos conversion mode
055C 75A120      68            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
055F 75A30F      69            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
0562 758E05      70            mov     ADCON0,#0x05 ; Enable the converter and start immediately
0565             71            ; Wait for first conversion to complete
0565             72   InitADC_L1:
0565 E58E        73            mov     a,ADCON0
0567 30E3FB      74            jnb     acc.3,InitADC_L1
056A 22          75            ret
                 76   DO_NOTHING mac
                 77   	NOP
                 78   endmac
                 78   $LIST
                 -1       $include(serial.inc)
056B              1   CSEG
056B              2   
056B              3   
056B              4   ;---------------------------------;
056B              5   ;           Basic Macros          ;
056B              6   ;---------------------------------;
                  7   Serial_Initialize mac
                  8   	;Serial_Initialize()
                  9       lcall _Serial_Initialize
                 10   endmac
056B             11   
                 12   Serial_Send_Char mac
                 13       mov a, %0
                 14       lcall putchar
                 15   endmac
056B             16   
                 17   Serial_Read_Char mac
                 18   	;Serial_Read_Char(direct)
                 19       lcall getchar
                 20       mov %0, a
                 21   endmac
056B             22   
                 23   Serial_Send_Newline mac
                 24   	lcall Send_NewLine
                 25   endmac
056B             26   
                 27   Serial_Send_BCD mac
                 28   	push ar0
                 29   	mov r0, %0
                 30   	lcall ?Send_BCD
                 31   	pop ar0
                 32   endmac
056B             33   
                 34   Serial_Send_Constant_String mac
                 35   	mov dptr, %0
                 36   	lcall SendString
                 37   endmac
056B             38   
056B             39   ;---------------------------------;
056B             40   ; Initialize the serial port      ;
056B             41   ;---------------------------------;
056B             42   _Serial_Initialize:
056B 75BD00      43            mov     BRGCON,#0x00
056E 75BF00      44            mov     BRGR1,#high(BRVAL)
0571 75BE30      45            mov     BRGR0,#low(BRVAL)
0574 75BD03      46            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
0577 759852      47            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
057A             48            ; Make sure that TXD(P1.0) and RXD(P1.1) are configured as bidrectional I/O
057A 5391FC      49            anl     P1M1,#11111100B
057D 5392FC      50            anl     P1M2,#11111100B
0580 22          51            ret
0581             52   
0581             53   ;---------------------------------;
0581             54   ; Sends a byte via serial port    ;
0581             55   ;---------------------------------;
0581             56   putchar:
0581 109902      57            jbc     TI,putchar_L1
0584 80FB        58            sjmp putchar
0586             59   putchar_L1:
0586 F599        60            mov     SBUF,a
0588 22          61            ret
0589             62   
0589             63   SendString:
0589 E4          64       clr a
058A 93          65       movc a, @a+dptr
058B 6006        66       jz SendString_L1
058D 120581      67       lcall putchar
0590 A3          68       inc dptr
0591 80F6        69       sjmp SendString  
0593             70   SendString_L1:
0593 22          71            ret
0594             72   
0594             73   ;---------------------------------;
0594             74   ; Send a BCD number to PuTTY      ;
0594             75   ;---------------------------------;
0594             76   ?Send_BCD:
0594 C0E0        77            push acc
0596             78            ; Write most significant digit
0596 E8          79            mov a, r0
0597 C4          80            swap a
0598 540F        81            anl a, #0fh
059A 4430        82            orl a, #30h
059C 120581      83            lcall putchar
059F             84            ; write least significant digit
059F E8          85            mov a, r0
05A0 540F        86            anl a, #0fh
05A2 4430        87            orl a, #30h
05A4 120581      88            lcall putchar
05A7 D0E0        89            pop acc
05A9 22          90            ret
05AA             91   
05AA             92   Send_NewLine:
05AA 740D        93            mov a, #'\r'
05AC 120581      94            lcall putchar
05AF 740A        95            mov a, #'\n'
05B1 120581      96            lcall putchar   
05B4 22          97            ret
05B5             98   
05B5             99   
05B5            100   SendTemp0:
05B5 90005E     101            mov dptr, #HexAscii 
05B8            102            
05B8            103            
05B8            104            
05B8 E565       105            mov a, bcd+3
05BA C4         106            swap a
05BB 540F       107            anl a, #0xf
05BD 93         108            movc a, @a+dptr
05BE 120581     109            lcall putchar
05C1 E565       110            mov a, bcd+3
05C3 540F       111            anl a, #0xf
05C5 93         112            movc a, @a+dptr
05C6 120581     113            lcall putchar
05C9            114            
05C9 E564       115            mov a, bcd+2
05CB C4         116            swap a
05CC 540F       117            anl a, #0xf
05CE 93         118            movc a, @a+dptr
05CF 120581     119            lcall putchar
05D2 E564       120            mov a, bcd+2
05D4 540F       121            anl a, #0xf
05D6 93         122            movc a, @a+dptr
05D7 120581     123            lcall putchar
05DA            124            
05DA E563       125            mov a, bcd+1
05DC C4         126            swap a
05DD 540F       127            anl a, #0xf
05DF 93         128            movc a, @a+dptr
05E0 120581     129            lcall putchar
05E3 E563       130            mov a, bcd+1
05E5 540F       131            anl a, #0xf
05E7 93         132            movc a, @a+dptr
05E8 120581     133            lcall putchar
05EB            134   
05EB            135   
05EB E562       136            mov a, bcd+0
05ED C4         137            swap a
05EE 540F       138            anl a, #0xf
05F0 93         139            movc a, @a+dptr
05F1 120581     140            lcall putchar
05F4 E562       141            mov a, bcd+0
05F6 540F       142            anl a, #0xf
05F8 93         143            movc a, @a+dptr
05F9 120581     144            lcall putchar
05FC 22         145            ret
                 -1       $include(temperature.inc)
05FD              1   cseg
05FD              2   
05FD              3   
05FD              4   
05FD              5   Read_Oven_Temp:
05FD              6            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
05FD 755A00       7            mov x+0, #low (0 % 0x10000) 
0600 755B00       7            mov x+1, #high(0 % 0x10000) 
0603 755C00       7            mov x+2, #low (0 / 0x10000) 
0606 755D00       7            mov x+3, #high(0 / 0x10000) 
0609 85C75A       8       mov x+0, ad0dat2
060C 7FFF         9            mov R7, #255
060E 1201DF      10       lcall Wait10us
0611             11   accumulate_loop0:
0611 85C75E      12       mov y+0, ad0dat2
0614 755F00      13       mov y+1, #0
0617 756000      14       mov y+2, #0
061A 756100      15       mov y+3, #0
061D 120378      16       lcall add32
0620 1201DF      17       lcall Wait10us
0623 DFEC        18            djnz R7, accumulate_loop0
0625             19            
0625             20            ; Now divide by 16 (2^4)
0625 755E10      21            mov y+0, #low (16 % 0x10000) 
0628 755F00      21            mov y+1, #high(16 % 0x10000) 
062B 756000      21            mov y+2, #low (16 / 0x10000) 
062E 756100      21            mov y+3, #high(16 / 0x10000) 
0631 1204BA      22            lcall div32
0634             23            ; x has now the 12-bit representation of the temperature
0634             24            
0634             25            ; Convert to temperature (C)
0634 755EE8      26            mov y+0, #low (33000 % 0x10000) 
0637 755F80      26            mov y+1, #high(33000 % 0x10000) 
063A 756000      26            mov y+2, #low (33000 / 0x10000) 
063D 756100      26            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
0640 12042D      27            lcall mul32
0643 755E00      28            mov y+0, #low (((1<<12)) % 0x10000) 
0646 755F10      28            mov y+1, #high(((1<<12)) % 0x10000) 
0649 756000      28            mov y+2, #low (((1<<12)) / 0x10000) 
064C 756100      28            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
064F 1204BA      29            lcall div32
0652 755E3C      30            mov y+0, #low (60 % 0x10000) 
0655 755F00      30            mov y+1, #high(60 % 0x10000) 
0658 756000      30            mov y+2, #low (60 / 0x10000) 
065B 756100      30            mov y+3, #high(60 / 0x10000) 
065E 120399      31            lcall sub32
0661             32   
0661             33            ;mov32(Current_Oven_Volt,x); store the hex value of voltage
0661             34            
0661 755E0E      35            mov y+0, #low (7438 % 0x10000) 
0664 755F1D      35            mov y+1, #high(7438 % 0x10000) 
0667 756000      35            mov y+2, #low (7438 / 0x10000) 
066A 756100      35            mov y+3, #high(7438 / 0x10000) 
066D 12042D      36            lcall mul32
0670 755E10      37            mov y+0, #low (10000 % 0x10000) 
0673 755F27      37            mov y+1, #high(10000 % 0x10000) 
0676 756000      37            mov y+2, #low (10000 / 0x10000) 
0679 756100      37            mov y+3, #high(10000 / 0x10000) 
067C 1204BA      38            lcall div32
067F 755EB4      39            mov y+0, #low (180 % 0x10000) 
0682 755F00      39            mov y+1, #high(180 % 0x10000) 
0685 756000      39            mov y+2, #low (180 / 0x10000) 
0688 756100      39            mov y+3, #high(180 / 0x10000) 
068B 120399      40            lcall sub32
068E             41            ;now we got the relateive temp number in hex
068E             42   
068E             43       ;mov(dst, src)
068E 854D61      43            mov y+3, Current_Room_Temp+3
0691 854C60      43       mov y+2, Current_Room_Temp+2
0694 854B5F      43       mov y+1, Current_Room_Temp+1
0697 854A5E      43       mov y,   Current_Room_Temp
069A 120378      44            lcall add32
069D             45            ;now we got the true value of oven in hex
069D 1202B3      46            lcall hex2bcd
06A0 1205B5      47            lcall SendTemp0; send to PC through serial port
06A3 1205AA      48            lcall Send_Newline
06A6 755E64      49            mov y+0, #low (100 % 0x10000) 
06A9 755F00      49            mov y+1, #high(100 % 0x10000) 
06AC 756000      49            mov y+2, #low (100 / 0x10000) 
06AF 756100      49            mov y+3, #high(100 / 0x10000) 
06B2 1204BA      50            lcall div32;divide by 100 to get the value in integer
06B5             51            ; now x contains the value in hex
06B5 755E5E      52            mov y+0, #low (350 % 0x10000) 
06B8 755F01      52            mov y+1, #high(350 % 0x10000) 
06BB 756000      52            mov y+2, #low (350 / 0x10000) 
06BE 756100      52            mov y+3, #high(350 / 0x10000) 
06C1 1203BB      53            lcall x_lt_y
06C4 200203      54            jb mf, Temp_OK
06C7             55            ;if not ok
06C7 0205FD      56            ljmp Read_Oven_Temp;re-read the value
06CA             57   
06CA             58            Temp_OK:
06CA             59       ;mov(dst, src)
06CA 855D51      59            mov Current_Oven_Temp+3, x+3
06CD 855C50      59       mov Current_Oven_Temp+2, x+2
06D0 855B4F      59       mov Current_Oven_Temp+1, x+1
06D3 855A4E      59       mov Current_Oven_Temp,   x
06D6 22          60            ret
06D7             61   
06D7             62   Read_Room_Temp:
06D7             63            
06D7 755A00      64            mov x+0, #low (0 % 0x10000) 
06DA 755B00      64            mov x+1, #high(0 % 0x10000) 
06DD 755C00      64            mov x+2, #low (0 / 0x10000) 
06E0 755D00      64            mov x+3, #high(0 / 0x10000) 
06E3 85C75A      65       mov x+0, ad0dat2
06E6 7FFF        66            mov R7, #255
06E8 1201DF      67       lcall Wait10us
06EB             68       
06EB             69   accumulate_loop1:
06EB 85F45E      70       mov y+0, ad0dat3
06EE 755F00      71       mov y+1, #0
06F1 756000      72       mov y+2, #0
06F4 756100      73       mov y+3, #0
06F7 120378      74       lcall add32
06FA 1201DF      75       lcall Wait10us
06FD DFEC        76            djnz R7, accumulate_loop1
06FF             77            
06FF             78            ; Now divide by 16 (2^4)
06FF 755E10      79            mov y+0, #low (16 % 0x10000) 
0702 755F00      79            mov y+1, #high(16 % 0x10000) 
0705 756000      79            mov y+2, #low (16 / 0x10000) 
0708 756100      79            mov y+3, #high(16 / 0x10000) 
070B 1204BA      80            lcall div32
070E             81            ; x has now the 12-bit representation of the temperature
070E             82            
070E             83            ; Convert to temperature (C)
070E 755EE8      84            mov y+0, #low (33000 % 0x10000) 
0711 755F80      84            mov y+1, #high(33000 % 0x10000) 
0714 756000      84            mov y+2, #low (33000 / 0x10000) 
0717 756100      84            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
071A 12042D      85            lcall mul32
071D 755E00      86            mov y+0, #low (((1<<12)) % 0x10000) 
0720 755F10      86            mov y+1, #high(((1<<12)) % 0x10000) 
0723 756000      86            mov y+2, #low (((1<<12)) / 0x10000) 
0726 756100      86            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
0729 1204BA      87            lcall div32
072C 755E3C      88            mov y+0, #low (60 % 0x10000) 
072F 755F00      88            mov y+1, #high(60 % 0x10000) 
0732 756000      88            mov y+2, #low (60 / 0x10000) 
0735 756100      88            mov y+3, #high(60 / 0x10000) 
0738 120399      89            lcall sub32
073B             90            
073B             91            ;now we got the voltage value
073B             92            ;mov32(Current_Room_Volt,x)
073B             93            
073B 755EA4      94            mov y+0, #low (27300 % 0x10000) 
073E 755F6A      94            mov y+1, #high(27300 % 0x10000) 
0741 756000      94            mov y+2, #low (27300 / 0x10000) 
0744 756100      94            mov y+3, #high(27300 / 0x10000) 
0747 120399      95            lcall sub32
074A 755EF4      96            mov y+0, #low (500 % 0x10000) 
074D 755F01      96            mov y+1, #high(500 % 0x10000) 
0750 756000      96            mov y+2, #low (500 / 0x10000) 
0753 756100      96            mov y+3, #high(500 / 0x10000) 
0756 120399      97            lcall sub32
0759             98            ;now we got the temperature
0759             99       ;mov(dst, src)
0759 855D4D      99            mov Current_Room_Temp+3, x+3
075C 855C4C      99       mov Current_Room_Temp+2, x+2
075F 855B4B      99       mov Current_Room_Temp+1, x+1
0762 855A4A      99       mov Current_Room_Temp,   x
0765            100            
0765 22         101            ret
                 -1       $include(speaker.inc)
                462   $LIST
                 -1       $include(key.inc)
0BAF              1   cseg
0BAF              2   
0BAF              3   
0BAF              4   ;-----------------------;
0BAF              5   ;    Functions Define   ;
0BAF              6   ;-----------------------; 
0BAF              7   
0BAF              8   ;Key_Read: if read, return the button readed.
0BAF              9   ;Return 0 if read nothing.
0BAF             10   Key_Read:
0BAF C0E0        11       push acc
0BB1 120BC3      12       lcall ADC_to_PB; read lower 8 button
0BB4             13       ;mov a, keyin
0BB4             14       ;cjne a, #0, Continue_Read_Key; if nothing, continue read key
0BB4             15       ;ret; if read successfully, return
0BB4             16       ;Continue_Read_Key:
0BB4 120C14      17       lcall ADC_to_PB_1
0BB7 C002        18            push AR2
0BB9 7A96        18            mov R2, #150
0BBB 1201FA      18            lcall ?Wait_Milli_Seconds
0BBE D002        18            pop AR2
0BC0 D0E0        19            pop acc
0BC2 22          20       ret
0BC3             21   
0BC3             22   ADC_to_PB:
0BC3 757000      23       mov keyin, #0;clear input
0BC6             24            ; Check PB6
0BC6 C3          25            clr c
0BC7 E5C5        26            mov a, AD0DAT0
0BC9 94A3        27            subb a, #(173-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
0BCB 4004        28            jc ADC_to_PB_L6
0BCD 757007      29       mov keyin, #7
0BD0 22          30            ret
0BD1             31   ADC_to_PB_L6:
0BD1             32            ; Check PB5
0BD1 C3          33            clr c
0BD2 E5C5        34            mov a, AD0DAT0; P1.7
0BD4 9491        35            subb a, #(155-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
0BD6 4004        36            jc ADC_to_PB_L5
0BD8 757006      37            mov keyin, #6
0BDB 22          38            ret
0BDC             39   ADC_to_PB_L5:
0BDC             40            ; Check PB4
0BDC C3          41            clr c
0BDD E5C5        42            mov a, AD0DAT0
0BDF 9478        43            subb a, #(130-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
0BE1 4004        44            jc ADC_to_PB_L4
0BE3 757005      45            mov keyin, #5
0BE6 22          46            ret
0BE7             47   ADC_to_PB_L4:
0BE7             48            ; Check PB3
0BE7 C3          49            clr c
0BE8 E5C5        50            mov a, AD0DAT0
0BEA 9462        51            subb a, #(108-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
0BEC 4004        52            jc ADC_to_PB_L3
0BEE 757004      53            mov keyin, #4
0BF1 22          54            ret
0BF2             55   ADC_to_PB_L3:
0BF2             56            ; Check PB2
0BF2 C3          57            clr c
0BF3 E5C5        58            mov a, AD0DAT0
0BF5 9444        59            subb a, #(78-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
0BF7 4004        60            jc ADC_to_PB_L2
0BF9 757003      61            mov keyin, #3
0BFC 22          62            ret
0BFD             63   ADC_to_PB_L2:
0BFD             64            ; Check PB1
0BFD C3          65            clr c
0BFE E5C5        66            mov a, AD0DAT0
0C00 9433        67            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
0C02 4004        68            jc ADC_to_PB_L1
0C04 757002      69            mov keyin, #2
0C07 22          70            ret
0C08             71   ADC_to_PB_L1:
0C08             72            ; Check PB1
0C08 C3          73            clr c
0C09 E5C5        74            mov a, AD0DAT0
0C0B 9413        75            subb a, #(29-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
0C0D 4004        76            jc ADC_to_PB_L0
0C0F 757001      77            mov keyin, #1
0C12 22          78            ret
0C13             79   ADC_to_PB_L0:
0C13             80            ; No pusbutton pressed  
0C13 22          81            ret
0C14             82   
0C14             83   ADC_to_PB_1:
0C14             84            ; Check PB6
0C14 C3          85            clr c
0C15 E5C6        86            mov a, AD0DAT1
0C17 94C4        87            subb a, #(206-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
0C19 4004        88            jc ADC_to_PB_L6_2
0C1B 75700E      89            mov keyin, #14
0C1E 22          90            ret
0C1F             91   ADC_to_PB_L6_2:
0C1F             92            ; Check PB5
0C1F C3          93            clr c
0C20 E5C6        94            mov a, AD0DAT1
0C22 94AF        95            subb a, #(185-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
0C24 4004        96            jc ADC_to_PB_L5_2
0C26 75700D      97            mov keyin, #13
0C29 22          98            ret
0C2A             99   ADC_to_PB_L5_2:
0C2A            100            ; Check PB4
0C2A C3         101            clr c
0C2B E5C6       102            mov a, AD0DAT1
0C2D 9490       103            subb a, #(154-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
0C2F 4004       104            jc ADC_to_PB_L4_2
0C31 75700C     105            mov keyin, #12
0C34 22         106            ret
0C35            107   ADC_to_PB_L4_2:
0C35            108            ; Check PB3
0C35 C3         109            clr c
0C36 E5C6       110            mov a, AD0DAT1
0C38 9471       111            subb a, #(123-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
0C3A 4004       112            jc ADC_to_PB_L3_2
0C3C 75700B     113            mov keyin, #11
0C3F 22         114            ret
0C40            115   ADC_to_PB_L3_2:
0C40            116            ; Check PB2
0C40 C3         117            clr c
0C41 E5C6       118            mov a, AD0DAT1
0C43 9452       119            subb a, #(92-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
0C45 4004       120            jc ADC_to_PB_L2_2
0C47 75700A     121            mov keyin, #10
0C4A 22         122            ret
0C4B            123   ADC_to_PB_L2_2:
0C4B            124            ; Check PB1
0C4B C3         125            clr c
0C4C E5C6       126            mov a, AD0DAT1
0C4E 9433       127            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
0C50 4004       128            jc ADC_to_PB_L1_2
0C52 757009     129            mov keyin, #9
0C55 22         130            ret
0C56            131   ADC_to_PB_L1_2:
0C56            132            ; Check PB1
0C56 C3         133            clr c
0C57 E5C6       134            mov a, AD0DAT1
0C59 9414       135            subb a, #(30-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
0C5B 4004       136            jc ADC_to_PB_L01
0C5D 757008     137            mov keyin, #8
0C60 22         138            ret
0C61            139   ADC_to_PB_L01:
0C61            140            ; No pusbutton pressed  
0C61 22         141            ret
0C62            191   ;$LIST
0C62            192   
0C62            193   cseg
0C62            194   
0C62            195   MainProgram:
0C62 75817F     196       mov SP, #0x7F
0C65 12052F     197       lcall Ports_Init
0C68 120249     198            lcall LCD_4BIT
0C6B            199            ;Serial_Initialize()
0C6B 12056B     199       lcall _Serial_Initialize
0C6E 120548     200       lcall InitADC
0C71 C0E0       201            push acc
0C73 7401       201            mov a, #1
0C75 14         201            dec a
0C76 12028B     201            lcall ?Set_Cursor_1 ; Select column and row
0C79 D0E0       201            pop acc
0C7B C083       201            push dph
0C7D C082       201            push dpl
0C7F C0E0       201            push acc
0C81 90007F     201            mov dptr, #WELCOME1
0C84 12027E     201            lcall ?Send_Constant_String
0C87 D0E0       201            pop acc
0C89 D082       201            pop dpl
0C8B D083       201            pop dph
0C8D C0E0       201            push acc
0C8F 7401       201            mov a, #1
0C91 14         201            dec a
0C92 120289     201            lcall ?Set_Cursor_2 ; Select column and row
0C95 D0E0       201            pop acc
0C97 C083       201            push dph
0C99 C082       201            push dpl
0C9B C0E0       201            push acc
0C9D 900090     201            mov dptr, #WELCOME2
0CA0 12027E     201            lcall ?Send_Constant_String
0CA3 D0E0       201            pop acc
0CA5 D082       201            pop dpl
0CA7 D083       201            pop dph
0CA9 120D90     202       lcall Data_Initialization
0CAC 1207AE     203       lcall InitDAC
0CAF 120766     204       lcall CCU_Init
0CB2 1207BE     205            lcall Init_SPI
0CB5 120D33     206       lcall External_Interrupt0_Init
0CB8 120D36     207       lcall External_Interrupt1_Init
0CBB 753900     208       mov TEMP_SOAK+3, #0x00
0CBE 753800     209       mov TEMP_SOAK+2, #0x00
0CC1 753700     210       mov TEMP_SOAK+1, #0x00
0CC4 753696     211       mov TEMP_SOAK, #150
0CC7 754100     212       mov TEMP_RFLW+3, #0
0CCA 754000     213       mov TEMP_RFLW+2, #0
0CCD 753F00     214       mov TEMP_RFLW+1, #0
0CD0 753ED9     215       mov TEMP_RFLW, #217
0CD3 753D00     216       mov TIME_SOAK+3, #0
0CD6 753C00     217       mov TIME_SOAK+2, #0
0CD9 753B00     218       mov TIME_SOAK+1, #0
0CDC 753A3C     219       mov TIME_SOAK, #60
0CDF 754500     220       mov TIME_RFLW+3, #0
0CE2 754400     221       mov TIME_RFLW+2, #0
0CE5 754300     222       mov TIME_RFLW+1, #0
0CE8 75424B     223       mov TIME_RFLW, #75
0CEB 754900     224       mov TEMP_SAFE+3, #0
0CEE 754800     225       mov TEMP_SAFE+2, #0
0CF1 754700     226       mov TEMP_SAFE+1, #0
0CF4 75463C     227       mov TEMP_SAFE, #60
0CF7 C2C8       228       clr TMOD20 ; Stop CCU timer
0CF9 D2AF       229       setb EA   ; Enable Global interrupts
0CFB C2A7       230       clr OVEN
0CFD 755203     231       mov bcd_bitnumber, #0x03
0D00 1201ED     232       lcall WaitHalfSec
0D03            233   
0D03            234   Main_Loop:
0D03 200103     235       jb Main_State,loop_b
0D06            236   loop_a:; for FSM0
0D06 020E42     237            ljmp FSM0
0D09            238   
0D09            239   loop_b: ; for FSM1
0D09 3004F7     240       jnb half_seconds_flag, Main_Loop
0D0C C204       241       clr half_seconds_flag
0D0E 0567       242       inc Count5s
0D10 E567       243       mov a, Count5s
0D12 B40509     244       cjne a, #5, skip3
0D15 756700     245       mov Count5s, #0
0D18 300803     246       jnb speak_enable, skip3
0D1B 120DF2     247       lcall Speak_Process
0D1E            248       skip3:
0D1E 80E3       249            sjmp Main_Loop
0D20            250   
0D20            251   
0D20            252   ;----------------------------;
0D20            253   ;           Macros           ;
0D20            254   ;----------------------------; 
                255   Display_3BCD mac
                256       ;Display_3BCD(bcd to display)
                257       ;now the bcd num of time is stored in bcd
                258       LCD_Display_NUM(%0+1);
                259       LCD_Display_BCD(%0);
                260   endmac
0D20            261   
                262   Display_3BCD_from_x mac
                263       lcall hex2bcd
                264       ;now the bcd num of time is stored in bcd
                265       LCD_Display_NUM(bcd+1);
                266       LCD_Display_BCD(bcd);
                267   endmac
0D20            268   
                269   Update_Temp mac
                270       lcall Read_Room_Temp
                271       lcall Read_Oven_Temp
                272       mov32(x, Current_Oven_Temp)
                273       mov32(y, %0)
                274       lcall x_lt_y
                275   endmac
0D20            277   
0D20            278   ;----------------------------;
0D20            279   ;         Functions          ;
0D20            280   ;----------------------------; 
0D20            281   
0D20            282   Timer1_Init:
0D20 E589       283            mov a, TMOD
0D22 540F       284            anl a, #0x0f ; Clear the bits for timer 1
0D24 4410       285            orl a, #0x10 ; Configure timer 1 as 16-timer
0D26 F589       286            mov TMOD, a
0D28 758D6F     287            mov TH1, #high(TIMER1_RELOAD)
0D2B 758BFF     288            mov TL1, #low(TIMER1_RELOAD)
0D2E            289            ; Enable the timer and interrupts
0D2E D2AB       290       setb ET1  ; Enable timer 1 interrupt
0D30 D28E       291       setb TR1  ; Start timer 1
0D32 22         292            ret
0D33            293   
0D33            294   External_Interrupt0_Init:
0D33            295            ; Enable the external interrupt
0D33 D2A8       296       setb EX0  ; Enable timer 1 interrupt
0D35 22         297            ret
0D36            298   
0D36            299   External_Interrupt1_Init:
0D36            300            ; Enable the external interrupt
0D36 D2AA       301       setb EX1  ; Enable timer 1 interrupt
0D38 22         302            ret
0D39            303   
0D39            304   Display_Working_Status:
0D39 C0E0       305            push acc
0D3B 7406       305            mov a, #6
0D3D 14         305            dec a
0D3E 12028B     305            lcall ?Set_Cursor_1 ; Select column and row
0D41 D0E0       305            pop acc
0D43            306       ;mov(dst, src)
0D43 85515D     306            mov x+3, Current_Oven_Temp+3
0D46 85505C     306       mov x+2, Current_Oven_Temp+2
0D49 854F5B     306       mov x+1, Current_Oven_Temp+1
0D4C 854E5A     306       mov x,   Current_Oven_Temp
0D4F 1202B3     307       lcall hex2bcd
0D52            307       ;now the bcd num of time is stored in bcd
0D52 C000       307            push ar0
0D54 A863       307            mov r0, bcd+1
0D56 1202A6     307            lcall ?Display_NUM
0D59 D000       307            pop ar0;
0D5B C000       307            push ar0
0D5D A862       307            mov r0, bcd
0D5F 120290     307            lcall ?Display_BCD
0D62 D000       307            pop ar0;
0D64            308   
0D64 C0E0       309            push acc
0D66 740E       309            mov a, #14
0D68 14         309            dec a
0D69 12028B     309            lcall ?Set_Cursor_1 ; Select column and row
0D6C D0E0       309            pop acc
0D6E 755D00     310       mov x+3, #0
0D71 755C00     311       mov x+2, #0
0D74 755B00     312       mov x+1, #0
0D77 85315A     313       mov x, Time_Global
0D7A 1202B3     314       lcall hex2bcd
0D7D            314       ;now the bcd num of time is stored in bcd
0D7D C000       314            push ar0
0D7F A863       314            mov r0, bcd+1
0D81 1202A6     314            lcall ?Display_NUM
0D84 D000       314            pop ar0;
0D86 C000       314            push ar0
0D88 A862       314            mov r0, bcd
0D8A 120290     314            lcall ?Display_BCD
0D8D D000       314            pop ar0;
0D8F 22         315       ret
0D90            316   
0D90            317   Data_Initialization:
0D90 753100     318       mov Time_Global, #0x00
0D93 753300     319       mov FSM0_State, #0
0D96 753400     320       mov FSM1_State, #0
0D99 755400     321       mov NEW_BCD, #0
0D9C 755500     322       mov NEW_BCD+1, #0
0D9F 756B00     323       mov number, #0x0 ;;not needed
0DA2 756E00     324       mov individual_offest, #0x0
0DA5 756700     325       mov Count5s, #0x00
0DA8 756F00     326       mov speak_state, #0x00
0DAB            327       
0DAB C296       328       clr LED
0DAD C208       329       clr speak_enable
0DAF C203       330       clr enable_time_global
0DB1 C205       331       clr nodigit
0DB3 C206       332            clr skiphundred
0DB5 C207       333            clr skiptenth
0DB7 C201       334       clr Main_State
0DB9            335   
0DB9 C0E0       336            push acc
0DBB 7401       336            mov a, #1
0DBD 14         336            dec a
0DBE 12028B     336            lcall ?Set_Cursor_1 ; Select column and row
0DC1 D0E0       336            pop acc
0DC3 C083       336            push dph
0DC5 C082       336            push dpl
0DC7 C0E0       336            push acc
0DC9 90007F     336            mov dptr, #WELCOME1
0DCC 12027E     336            lcall ?Send_Constant_String
0DCF D0E0       336            pop acc
0DD1 D082       336            pop dpl
0DD3 D083       336            pop dph
0DD5 C0E0       336            push acc
0DD7 7401       336            mov a, #1
0DD9 14         336            dec a
0DDA 120289     336            lcall ?Set_Cursor_2 ; Select column and row
0DDD D0E0       336            pop acc
0DDF C083       336            push dph
0DE1 C082       336            push dpl
0DE3 C0E0       336            push acc
0DE5 900090     336            mov dptr, #WELCOME2
0DE8 12027E     336            lcall ?Send_Constant_String
0DEB D0E0       336            pop acc
0DED D082       336            pop dpl
0DEF D083       336            pop dph
0DF1 22         337       ret
0DF2            338   
0DF2            339   Speak_Process:
0DF2 120A68     340       lcall current_temp_is
0DF5 854E6B     341       mov number, Current_Oven_Temp+0
0DF8 120A4B     342       lcall playnumbers
0DFB 120A87     343       lcall degree
0DFE 120AA6     344       lcall celsius
0E01 22         345       ret
0E02            346   
0E02            347   ;----------------------------;
0E02            348   ;     Interrupt Services     ;
0E02            349   ;----------------------------; 
0E02            350   Timer1_ISR:
0E02 758D6F     351            mov TH1, #high(TIMER1_RELOAD)
0E05 758BFF     352            mov TL1, #low(TIMER1_RELOAD)
0E08 B2A6       353            cpl P2.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 10 ms pulse.
0E0A            354            
0E0A            355            ; The two registers used in the ISR must be saved in the stack
0E0A C0E0       356            push acc
0E0C C0D0       357            push psw
0E0E            358            
0E0E            359            ; Increment the 8-bit 10-mili-second counter
0E0E 0530       360            inc Count10ms
0E10            361   
0E10            362   Inc_Done:
0E10            363            ; Check if half second has passed
0E10 E530       364            mov a, Count10ms
0E12 B4640F     365            cjne a, #100, Timer1_ISR_done ; Warning: this instruction changes the carry flag!
0E15            366            
0E15            367            ; 500 milliseconds have passed.  Set a flag so the main program knows
0E15 D204       368            setb half_seconds_flag ; Let the main program know half second had passed
0E17            369       
0E17 300302     370       jnb enable_time_global, skip1
0E1A 0531       371       inc Time_Global
0E1C            372            skip1:
0E1C 753000     373       mov Count10ms, #0
0E1F            374   
0E1F B296       375       cpl LED
0E21 1213EE     376       lcall FSM1;call FSM1 here
0E24            377   
0E24            378   Timer1_ISR_done:
0E24 D0D0       379            pop psw
0E26 D0E0       380            pop acc
0E28 32         381            reti
0E29            382   
0E29            383   EI0_ISR:
0E29 C288       384       clr IT0
0E2B D201       385       setb Main_State
0E2D 120AC5     386       lcall current_process_is
0E30 120AE4     387       lcall ramp_to_soak
0E33 120D20     388       lcall Timer1_Init
0E36 32         389       reti
0E37            390   
0E37            391   EI1_ISR:
0E37 C28A       392       clr IT1
0E39 C28E       393       clr TR1; disable  timer 1
0E3B 120BAA     394       lcall clear_speaking
0E3E 120D90     395       lcall Data_Initialization
0E41 32         396       reti
0E42            397   
0E42            398   ;---------------------------------;
0E42            399   ;      Finite State Machines      ;
0E42            400   ;---------------------------------;
0E42            401   FSM0:
0E42            402       ;-------------------;
0E42            403       ;    Setting FSM    ;
0E42            404       ;-------------------;
0E42            405   
0E42            406       ;Checking Keyboard
0E42            407       ;Key_Scan()
0E42            408       FSM0_Start:
0E42 E533       409           mov a, FSM0_State
0E44 8003       410           sjmp FSM0_State0
0E46            411   
0E46            412           FSM0_State1_bridge:
0E46 020F98     413               ljmp FSM0_State1 
0E49            414           FSM0_State0:
0E49 B400FA     415               cjne a, #0, FSM0_State1_bridge
0E4C            416   
0E4C            417               ;display a word
0E4C C0E0       418            push acc
0E4E 7401       418            mov a, #1
0E50 14         418            dec a
0E51 12028B     418            lcall ?Set_Cursor_1 ; Select column and row
0E54 D0E0       418            pop acc
0E56 C083       418            push dph
0E58 C082       418            push dpl
0E5A C0E0       418            push acc
0E5C 9000C3     418            mov dptr, #SETTING1
0E5F 12027E     418            lcall ?Send_Constant_String
0E62 D0E0       418            pop acc
0E64 D082       418            pop dpl
0E66 D083       418            pop dph
0E68 C0E0       418            push acc
0E6A 7401       418            mov a, #1
0E6C 14         418            dec a
0E6D 120289     418            lcall ?Set_Cursor_2 ; Select column and row
0E70 D0E0       418            pop acc
0E72 C083       418            push dph
0E74 C082       418            push dpl
0E76 C0E0       418            push acc
0E78 9000D4     418            mov dptr, #SETTING2
0E7B 12027E     418            lcall ?Send_Constant_String
0E7E D0E0       418            pop acc
0E80 D082       418            pop dpl
0E82 D083       418            pop dph
0E84            419   
0E84 C0E0       420            push acc
0E86 740D       420            mov a, #13
0E88 14         420            dec a
0E89 120289     420            lcall ?Set_Cursor_2 ; Select column and row
0E8C D0E0       420            pop acc
0E8E 755A00     421               mov x,#0x0
0E91 755B00     422               mov x+1,#0x0
0E94 755C00     423               mov x+2,#0x0
0E97 755D00     424               mov x+3,#0x0
0E9A 85425A     425               mov x, TIME_RFLW
0E9D 1202B3     426       lcall hex2bcd
0EA0            426       ;now the bcd num of time is stored in bcd
0EA0 C000       426            push ar0
0EA2 A863       426            mov r0, bcd+1
0EA4 1202A6     426            lcall ?Display_NUM
0EA7 D000       426            pop ar0;
0EA9 C000       426            push ar0
0EAB A862       426            mov r0, bcd
0EAD 120290     426            lcall ?Display_BCD
0EB0 D000       426            pop ar0;
0EB2            427   
0EB2 C0E0       428            push acc
0EB4 740D       428            mov a, #13
0EB6 14         428            dec a
0EB7 12028B     428            lcall ?Set_Cursor_1 ; Select column and row
0EBA D0E0       428            pop acc
0EBC 755A00     429               mov x,#0x0
0EBF 755B00     430               mov x+1,#0x0
0EC2 755C00     431               mov x+2,#0x0
0EC5 755D00     432               mov x+3,#0x0
0EC8 853A5A     433               mov x, TIME_SOAK
0ECB 1202B3     434       lcall hex2bcd
0ECE            434       ;now the bcd num of time is stored in bcd
0ECE C000       434            push ar0
0ED0 A863       434            mov r0, bcd+1
0ED2 1202A6     434            lcall ?Display_NUM
0ED5 D000       434            pop ar0;
0ED7 C000       434            push ar0
0ED9 A862       434            mov r0, bcd
0EDB 120290     434            lcall ?Display_BCD
0EDE D000       434            pop ar0;
0EE0            435   
0EE0 C0E0       436            push acc
0EE2 7406       436            mov a, #6
0EE4 14         436            dec a
0EE5 120289     436            lcall ?Set_Cursor_2 ; Select column and row
0EE8 D0E0       436            pop acc
0EEA 755A00     437               mov x,#0x0
0EED 755B00     438               mov x+1,#0x0
0EF0 755C00     439               mov x+2,#0x0
0EF3 755D00     440               mov x+3,#0x0
0EF6 853E5A     441               mov x, TEMP_RFLW
0EF9 1202B3     442       lcall hex2bcd
0EFC            442       ;now the bcd num of time is stored in bcd
0EFC C000       442            push ar0
0EFE A863       442            mov r0, bcd+1
0F00 1202A6     442            lcall ?Display_NUM
0F03 D000       442            pop ar0;
0F05 C000       442            push ar0
0F07 A862       442            mov r0, bcd
0F09 120290     442            lcall ?Display_BCD
0F0C D000       442            pop ar0;
0F0E            443   
0F0E C0E0       444            push acc
0F10 7406       444            mov a, #6
0F12 14         444            dec a
0F13 12028B     444            lcall ?Set_Cursor_1 ; Select column and row
0F16 D0E0       444            pop acc
0F18 755A00     445               mov x,#0x0
0F1B 755B00     446               mov x+1,#0x0
0F1E 755C00     447               mov x+2,#0x0
0F21 755D00     448               mov x+3,#0x0
0F24 85365A     449               mov x, TEMP_SOAK
0F27 1202B3     450       lcall hex2bcd
0F2A            450       ;now the bcd num of time is stored in bcd
0F2A C000       450            push ar0
0F2C A863       450            mov r0, bcd+1
0F2E 1202A6     450            lcall ?Display_NUM
0F31 D000       450            pop ar0;
0F33 C000       450            push ar0
0F35 A862       450            mov r0, bcd
0F37 120290     450            lcall ?Display_BCD
0F3A D000       450            pop ar0;
0F3C            451   
0F3C            452   
0F3C 120BAF     453               lcall Key_Read
0F3F 755A00     454            mov x+0, #low (0 % 0x10000) 
0F42 755B00     454            mov x+1, #high(0 % 0x10000) 
0F45 755C00     454            mov x+2, #low (0 / 0x10000) 
0F48 755D00     454            mov x+3, #high(0 / 0x10000) 
0F4B 85705A     455               mov x, keyin
0F4E 755E0D     456            mov y+0, #low (13 % 0x10000) 
0F51 755F00     456            mov y+1, #high(13 % 0x10000) 
0F54 756000     456            mov y+2, #low (13 / 0x10000) 
0F57 756100     456            mov y+3, #high(13 / 0x10000) 
0F5A 1203F3     457               lcall x_eq_y
0F5D            458   
0F5D 300208     459               jnb mf,FSM0_State0_down
0F60 0533       460               inc FSM0_State 
0F62 1213E7     461               lcall change_state_flag
0F65 021215     462               ljmp FSM0_Done
0F68            463           
0F68            464           FSM0_State0_down:
0F68            465   
0F68            466               ;lcall Key_Read
0F68 755A00     467            mov x+0, #low (0 % 0x10000) 
0F6B 755B00     467            mov x+1, #high(0 % 0x10000) 
0F6E 755C00     467            mov x+2, #low (0 / 0x10000) 
0F71 755D00     467            mov x+3, #high(0 / 0x10000) 
0F74 85705A     468               mov x, keyin
0F77 755E0E     469            mov y+0, #low (14 % 0x10000) 
0F7A 755F00     469            mov y+1, #high(14 % 0x10000) 
0F7D 756000     469            mov y+2, #low (14 / 0x10000) 
0F80 756100     469            mov y+3, #high(14 / 0x10000) 
0F83 1203F3     470               lcall x_eq_y
0F86            471   
0F86 300209     472               jnb mf,FSM0_State0_bridge
0F89 753304     473               mov FSM0_State, #0x04 
0F8C 1213E7     474               lcall change_state_flag
0F8F 021215     475               ljmp FSM0_Done
0F92            476           FSM0_State0_bridge:
0F92 021215     477               ljmp FSM0_Done
0F95            478   
0F95            479           FSM0_State2_bridge:
0F95 021038     480               ljmp FSM0_State2
0F98            481           
0F98            482           FSM0_State1:
0F98 B401FA     483               cjne a, #1, FSM0_State2_bridge
0F9B            484               
0F9B            485               ;print words
0F9B C0E0       486            push acc
0F9D 7401       486            mov a, #1
0F9F 14         486            dec a
0FA0 12028B     486            lcall ?Set_Cursor_1 ; Select column and row
0FA3 D0E0       486            pop acc
0FA5 C083       486            push dph
0FA7 C082       486            push dpl
0FA9 C0E0       486            push acc
0FAB 9000F6     486            mov dptr, #MODIFY1
0FAE 12027E     486            lcall ?Send_Constant_String
0FB1 D0E0       486            pop acc
0FB3 D082       486            pop dpl
0FB5 D083       486            pop dph
0FB7 C0E0       486            push acc
0FB9 7401       486            mov a, #1
0FBB 14         486            dec a
0FBC 120289     486            lcall ?Set_Cursor_2 ; Select column and row
0FBF D0E0       486            pop acc
0FC1 C083       486            push dph
0FC3 C082       486            push dpl
0FC5 C0E0       486            push acc
0FC7 9000E5     486            mov dptr, #MODIFY_DOWN
0FCA 12027E     486            lcall ?Send_Constant_String
0FCD D0E0       486            pop acc
0FCF D082       486            pop dpl
0FD1 D083       486            pop dph
0FD3 C0E0       487            push acc
0FD5 7405       487            mov a, #5
0FD7 14         487            dec a
0FD8 120289     487            lcall ?Set_Cursor_2 ; Select column and row
0FDB D0E0       487            pop acc
0FDD            487   
0FDD            488               ;mov x,#0x0
0FDD            489               ;mov x+1,#0x0
0FDD            490               ;mov x+2,#0x0
0FDD            491               ;mov x+3,#0x0
0FDD 85365A     492               mov x,TEMP_SOAK
0FE0 1202B3     493       lcall hex2bcd
0FE3            493       ;now the bcd num of time is stored in bcd
0FE3 C000       493            push ar0
0FE5 A863       493            mov r0, bcd+1
0FE7 1202A6     493            lcall ?Display_NUM
0FEA D000       493            pop ar0;
0FEC C000       493            push ar0
0FEE A862       493            mov r0, bcd
0FF0 120290     493            lcall ?Display_BCD
0FF3 D000       493            pop ar0;
0FF5            494   
0FF5 C0E0       495            push acc
0FF7 740D       495            mov a, #13
0FF9 14         495            dec a
0FFA 120289     495            lcall ?Set_Cursor_2 ; Select column and row
0FFD D0E0       495            pop acc
0FFF            496       ;Display_3BCD(bcd to display)
0FFF            496       ;now the bcd num of time is stored in bcd
0FFF C000       496            push ar0
1001 A855       496            mov r0, NEW_BCD+1
1003 1202A6     496            lcall ?Display_NUM
1006 D000       496            pop ar0;
1008 C000       496            push ar0
100A A854       496            mov r0, NEW_BCD
100C 120290     496            lcall ?Display_BCD
100F D000       496            pop ar0;
1011            497               ;LCD_Set_Cursor(1,13)
1011            498               ;Display_3BCD(NEW_BCD)
1011            499               ;Wait_Milli_Seconds(#250)
1011            500               ;Wait_Milli_Seconds(#250)
1011            501               
1011            502               ; the left bit of bcd
1011 121218     503               lcall check_button
1014            504               
1014 300218     505               jnb mf,normal_button_jump_2
1017            506               
1017 121241     507               lcall write_bcd
101A            508           
101A            509               
101A            510               ; the middle bit of bcd
101A 121218     511               lcall check_button
101D 30020F     512               jnb mf,normal_button_jump_2
1020 121241     513               lcall write_bcd
1023            514               
1023            515             
1023            516   
1023            517               ; the right bit of bcd
1023 121218     518               lcall check_button
1026 300206     519               jnb mf,normal_button_jump_2
1029 121241     520               lcall write_bcd
102C            521   
102C            522   
102C            523               
102C 021032     524               ljmp state_1_continue_1
102F            525           
102F            526   
102F            527           normal_button_jump_2:
102F            528               
102F 021313     529               ljmp  normal_button
1032            530               
1032            531              
1032            532           state_1_continue_1:    
1032            533               ;mov FSM0_State, #0x02
1032            534               ;jb BUTTON, FSM0_State1_Done
1032            535               ;Wait_Milli_Seconds(#75)
1032            536               ;jb BUTTON, FSM0_State1_Done
1032            537               ;jnb BUTTON, $
1032            538               ;mov FSM0_State, #0x00
1032            539               
1032            540                    FSM0_State1_Done:
1032 020D03     541               ljmp Main_Loop
1035            542   
1035            543           FSM0_State3_bridge:
1035 0210D8     544               ljmp FSM0_State3
1038            545           FSM0_State2:
1038 B402FA     546               cjne a, #2, FSM0_State3_bridge
103B            547               ;LCD_INTERFACE_MODIFY2()
103B            548   
103B            549               ;print words
103B C0E0       550            push acc
103D 7401       550            mov a, #1
103F 14         550            dec a
1040 12028B     550            lcall ?Set_Cursor_1 ; Select column and row
1043 D0E0       550            pop acc
1045 C083       550            push dph
1047 C082       550            push dpl
1049 C0E0       550            push acc
104B 900107     550            mov dptr, #MODIFY2
104E 12027E     550            lcall ?Send_Constant_String
1051 D0E0       550            pop acc
1053 D082       550            pop dpl
1055 D083       550            pop dph
1057 C0E0       550            push acc
1059 7401       550            mov a, #1
105B 14         550            dec a
105C 120289     550            lcall ?Set_Cursor_2 ; Select column and row
105F D0E0       550            pop acc
1061 C083       550            push dph
1063 C082       550            push dpl
1065 C0E0       550            push acc
1067 9000E5     550            mov dptr, #MODIFY_DOWN
106A 12027E     550            lcall ?Send_Constant_String
106D D0E0       550            pop acc
106F D082       550            pop dpl
1071 D083       550            pop dph
1073 C0E0       551            push acc
1075 7405       551            mov a, #5
1077 14         551            dec a
1078 120289     551            lcall ?Set_Cursor_2 ; Select column and row
107B D0E0       551            pop acc
107D            551   
107D            552   
107D            553               ;mov x,#0x0
107D            554               ;mov x+1,#0x0
107D            555               ;mov x+2,#0x0
107D            556               ;mov x+3,#0x0
107D 853A5A     557               mov x,TIME_SOAK
1080 1202B3     558       lcall hex2bcd
1083            558       ;now the bcd num of time is stored in bcd
1083 C000       558            push ar0
1085 A863       558            mov r0, bcd+1
1087 1202A6     558            lcall ?Display_NUM
108A D000       558            pop ar0;
108C C000       558            push ar0
108E A862       558            mov r0, bcd
1090 120290     558            lcall ?Display_BCD
1093 D000       558            pop ar0;
1095            559   
1095 C0E0       560            push acc
1097 740D       560            mov a, #13
1099 14         560            dec a
109A 120289     560            lcall ?Set_Cursor_2 ; Select column and row
109D D0E0       560            pop acc
109F            561       ;Display_3BCD(bcd to display)
109F            561       ;now the bcd num of time is stored in bcd
109F C000       561            push ar0
10A1 A855       561            mov r0, NEW_BCD+1
10A3 1202A6     561            lcall ?Display_NUM
10A6 D000       561            pop ar0;
10A8 C000       561            push ar0
10AA A854       561            mov r0, NEW_BCD
10AC 120290     561            lcall ?Display_BCD
10AF D000       561            pop ar0;
10B1            562               
10B1            563               
10B1            564               ; the left bit of bcd
10B1 121218     565               lcall check_button
10B4            566               
10B4 300218     567               jnb mf,normal_button_jump_3
10B7            568               
10B7 121241     569               lcall write_bcd
10BA            570           
10BA            571               
10BA            572               ; the middle bit of bcd
10BA 121218     573               lcall check_button
10BD 30020F     574               jnb mf,normal_button_jump_3
10C0 121241     575               lcall write_bcd
10C3            576               
10C3            577             
10C3            578   
10C3            579               ; the right bit of bcd
10C3 121218     580               lcall check_button
10C6 300206     581               jnb mf,normal_button_jump_3
10C9 121241     582               lcall write_bcd
10CC            583   
10CC            584   
10CC            585               
10CC            586              
10CC            587           
10CC            588   
10CC 0210D2     589               ljmp state_2_continue_1
10CF            590           normal_button_jump_3:
10CF 021313     591               ljmp  normal_button
10D2            592               
10D2            593              
10D2            594           state_2_continue_1:    
10D2            595               ;mov FSM0_State, #0x03
10D2            596               ;jb BUTTON, FSM0_State1_Done
10D2            597               ;Wait_Milli_Seconds(#75)
10D2            598               ;jb BUTTON, FSM0_State1_Done
10D2            599               ;jnb BUTTON, $
10D2            600               ;mov FSM0_State, #0x00
10D2            601               
10D2            602                    FSM0_State2_Done:
10D2 020D03     603               ljmp Main_Loop
10D5            604   
10D5            605           FSM0_State4_bridge:
10D5 021178     606               ljmp FSM0_State4
10D8            607   
10D8            608           FSM0_State3:
10D8 B403FA     609               cjne a, #3, FSM0_State4_bridge
10DB            610               ;LCD_INTERFACE_MODIFY2()
10DB            611   
10DB            612               ;print words
10DB C0E0       613            push acc
10DD 7401       613            mov a, #1
10DF 14         613            dec a
10E0 12028B     613            lcall ?Set_Cursor_1 ; Select column and row
10E3 D0E0       613            pop acc
10E5 C083       613            push dph
10E7 C082       613            push dpl
10E9 C0E0       613            push acc
10EB 900118     613            mov dptr, #MODIFY3
10EE 12027E     613            lcall ?Send_Constant_String
10F1 D0E0       613            pop acc
10F3 D082       613            pop dpl
10F5 D083       613            pop dph
10F7 C0E0       613            push acc
10F9 7401       613            mov a, #1
10FB 14         613            dec a
10FC 120289     613            lcall ?Set_Cursor_2 ; Select column and row
10FF D0E0       613            pop acc
1101 C083       613            push dph
1103 C082       613            push dpl
1105 C0E0       613            push acc
1107 9000E5     613            mov dptr, #MODIFY_DOWN
110A 12027E     613            lcall ?Send_Constant_String
110D D0E0       613            pop acc
110F D082       613            pop dpl
1111 D083       613            pop dph
1113 C0E0       614            push acc
1115 7405       614            mov a, #5
1117 14         614            dec a
1118 120289     614            lcall ?Set_Cursor_2 ; Select column and row
111B D0E0       614            pop acc
111D            614   
111D            615   
111D            616               ;mov x,#0x0
111D            617               ;mov x+1,#0x0
111D            618               ;mov x+2,#0x0
111D            619               ;mov x+3,#0x0
111D 853E5A     620               mov x,TEMP_RFLW
1120 1202B3     621       lcall hex2bcd
1123            621       ;now the bcd num of time is stored in bcd
1123 C000       621            push ar0
1125 A863       621            mov r0, bcd+1
1127 1202A6     621            lcall ?Display_NUM
112A D000       621            pop ar0;
112C C000       621            push ar0
112E A862       621            mov r0, bcd
1130 120290     621            lcall ?Display_BCD
1133 D000       621            pop ar0;
1135            622   
1135 C0E0       623            push acc
1137 740D       623            mov a, #13
1139 14         623            dec a
113A 120289     623            lcall ?Set_Cursor_2 ; Select column and row
113D D0E0       623            pop acc
113F            624       ;Display_3BCD(bcd to display)
113F            624       ;now the bcd num of time is stored in bcd
113F C000       624            push ar0
1141 A855       624            mov r0, NEW_BCD+1
1143 1202A6     624            lcall ?Display_NUM
1146 D000       624            pop ar0;
1148 C000       624            push ar0
114A A854       624            mov r0, NEW_BCD
114C 120290     624            lcall ?Display_BCD
114F D000       624            pop ar0;
1151            625               
1151            626               
1151            627               ; the left bit of bcd
1151 121218     628               lcall check_button
1154            629               
1154 300218     630               jnb mf,normal_button_jump_4
1157            631               
1157 121241     632               lcall write_bcd
115A            633           
115A            634               
115A            635               ; the middle bit of bcd
115A 121218     636               lcall check_button
115D 30020F     637               jnb mf,normal_button_jump_4
1160 121241     638               lcall write_bcd
1163            639               
1163            640             
1163            641   
1163            642               ; the right bit of bcd
1163 121218     643               lcall check_button
1166 300206     644               jnb mf,normal_button_jump_4
1169 121241     645               lcall write_bcd
116C            646   
116C            647   
116C            648               
116C            649              
116C 021172     650               ljmp state_3_continue_1
116F            651           normal_button_jump_4:
116F 021313     652               ljmp  normal_button
1172            653               
1172            654              
1172            655           state_3_continue_1:    
1172            656               ;mov FSM0_State, #0x02
1172            657               ;jb BUTTON, FSM0_State1_Done
1172            658               ;Wait_Milli_Seconds(#75)
1172            659               ;jb BUTTON, FSM0_State1_Done
1172            660               ;jnb BUTTON, $
1172            661               ;mov FSM0_State, #0x00
1172            662               
1172            663                    FSM0_State3_Done:
1172 020D03     664               ljmp Main_Loop
1175            665   
1175            666           FSM0_State5_bridge:
1175 021215     667               ljmp FSM0_Done
1178            668           FSM0_State4:
1178 B404FA     669               cjne a, #4, FSM0_State5_bridge
117B            670               ;LCD_INTERFACE_MODIFY2()
117B            671   
117B            672               ;print words
117B C0E0       673            push acc
117D 7401       673            mov a, #1
117F 14         673            dec a
1180 12028B     673            lcall ?Set_Cursor_1 ; Select column and row
1183 D0E0       673            pop acc
1185 C083       673            push dph
1187 C082       673            push dpl
1189 C0E0       673            push acc
118B 900129     673            mov dptr, #MODIFY4
118E 12027E     673            lcall ?Send_Constant_String
1191 D0E0       673            pop acc
1193 D082       673            pop dpl
1195 D083       673            pop dph
1197 C0E0       673            push acc
1199 7401       673            mov a, #1
119B 14         673            dec a
119C 120289     673            lcall ?Set_Cursor_2 ; Select column and row
119F D0E0       673            pop acc
11A1 C083       673            push dph
11A3 C082       673            push dpl
11A5 C0E0       673            push acc
11A7 9000E5     673            mov dptr, #MODIFY_DOWN
11AA 12027E     673            lcall ?Send_Constant_String
11AD D0E0       673            pop acc
11AF D082       673            pop dpl
11B1 D083       673            pop dph
11B3 C0E0       674            push acc
11B5 7405       674            mov a, #5
11B7 14         674            dec a
11B8 120289     674            lcall ?Set_Cursor_2 ; Select column and row
11BB D0E0       674            pop acc
11BD            674   
11BD            675   
11BD            676   
11BD            677               ;mov x,#0x0
11BD            678               ;mov x+1,#0x0
11BD            679               ;mov x+2,#0x0
11BD            680               ;mov x+3,#0x0
11BD 85425A     681               mov x,TIME_RFLW
11C0 1202B3     682       lcall hex2bcd
11C3            682       ;now the bcd num of time is stored in bcd
11C3 C000       682            push ar0
11C5 A863       682            mov r0, bcd+1
11C7 1202A6     682            lcall ?Display_NUM
11CA D000       682            pop ar0;
11CC C000       682            push ar0
11CE A862       682            mov r0, bcd
11D0 120290     682            lcall ?Display_BCD
11D3 D000       682            pop ar0;
11D5            683   
11D5 C0E0       684            push acc
11D7 740D       684            mov a, #13
11D9 14         684            dec a
11DA 120289     684            lcall ?Set_Cursor_2 ; Select column and row
11DD D0E0       684            pop acc
11DF            685       ;Display_3BCD(bcd to display)
11DF            685       ;now the bcd num of time is stored in bcd
11DF C000       685            push ar0
11E1 A855       685            mov r0, NEW_BCD+1
11E3 1202A6     685            lcall ?Display_NUM
11E6 D000       685            pop ar0;
11E8 C000       685            push ar0
11EA A854       685            mov r0, NEW_BCD
11EC 120290     685            lcall ?Display_BCD
11EF D000       685            pop ar0;
11F1            686               
11F1            687               
11F1            688               ; the left bit of bcd
11F1 121218     689               lcall check_button
11F4            690               
11F4 300218     691               jnb mf,normal_button_jump_5
11F7            692               
11F7 121241     693               lcall write_bcd
11FA            694           
11FA            695               
11FA            696               ; the middle bit of bcd
11FA 121218     697               lcall check_button
11FD 30020F     698               jnb mf,normal_button_jump_5
1200 121241     699               lcall write_bcd
1203            700               
1203            701             
1203            702   
1203            703               ; the right bit of bcd
1203 121218     704               lcall check_button
1206 300206     705               jnb mf,normal_button_jump_5
1209 121241     706               lcall write_bcd
120C            707   
120C            708   
120C            709               
120C            710              
120C            711           
120C            712   
120C 021212     713               ljmp state_4_continue_1
120F            714           normal_button_jump_5:
120F 021313     715               ljmp  normal_button
1212            716           state_4_continue_1:    
1212            717               ;mov FSM0_State, #0x02
1212            718               ;jb BUTTON, FSM0_State1_Done
1212            719               ;Wait_Milli_Seconds(#75)
1212            720               ;jb BUTTON, FSM0_State1_Done
1212            721               ;jnb BUTTON, $
1212            722               ;mov FSM0_State, #0x00
1212            723               
1212            724                    FSM0_State4_Done:
1212 020D03     725               ljmp Main_Loop
1215            726   
1215            727           ;FSM0_State5:
1215            728               ;cjne a, #5, FSM0_Done
1215            729               ;LCD_INTERFACE_MODIFY5()
1215            730   
1215            731           FSM0_Done:
1215 020D03     732               ljmp Main_Loop
1218            733   
1218            734       check_button:
1218            735               ;scan number button
1218 120BAF     736               lcall Key_Read
121B            737              
121B 755A00     738            mov x+0, #low (0 % 0x10000) 
121E 755B00     738            mov x+1, #high(0 % 0x10000) 
1221 755C00     738            mov x+2, #low (0 / 0x10000) 
1224 755D00     738            mov x+3, #high(0 / 0x10000) 
1227 85705A     739               mov x, keyin
122A 755E0B     740            mov y+0, #low (11 % 0x10000) 
122D 755F00     740            mov y+1, #high(11 % 0x10000) 
1230 756000     740            mov y+2, #low (11 / 0x10000) 
1233 756100     740            mov y+3, #high(11 / 0x10000) 
1236 1203BB     741               lcall x_lt_y
1239            742               
1239 E570       743               mov a, keyin
123B B40002     744               cjne a,#0x00,continue_check
123E 80D8       745               sjmp check_button
1240            746       continue_check:
1240 22         747               ret
1241            748      
1241            749   
1241            750       write_bcd:
1241 E552       751                   mov a , bcd_bitnumber
1243 B4033D     752                   cjne a, #0x03, bcd_bit_2
1246            753                   
1246 C002       754            push AR2
1248 7AFA       754            mov R2, #250
124A 1201FA     754            lcall ?Wait_Milli_Seconds
124D D002       754            pop AR2
124F E570       755                   mov a, keyin
1251 B40A02     756                   cjne a,#0x0A,continue_bcd
1254 7400       757                   mov a,#0x00
1256            758       continue_bcd:
1256 540F       759                   anl a, #0x0f
1258            760                        ;orl a, NEW_BCD+1
1258 F555       761                        mov NEW_BCD+1,a
125A 755202     762                   mov bcd_bitnumber, #0x02
125D            763                   ;display new_bcd
125D C0E0       764            push acc
125F 740D       764            mov a, #13
1261 14         764            dec a
1262 120289     764            lcall ?Set_Cursor_2 ; Select column and row
1265 D0E0       764            pop acc
1267            765       ;Display_3BCD(bcd to display)
1267            765       ;now the bcd num of time is stored in bcd
1267 C000       765            push ar0
1269 A855       765            mov r0, NEW_BCD+1
126B 1202A6     765            lcall ?Display_NUM
126E D000       765            pop ar0;
1270 C000       765            push ar0
1272 A854       765            mov r0, NEW_BCD
1274 120290     765            lcall ?Display_BCD
1277 D000       765            pop ar0;
1279            766   
1279 C002       767            push AR2
127B 7AFA       767            mov R2, #250
127D 1201FA     767            lcall ?Wait_Milli_Seconds
1280 D002       767            pop AR2
1282            768                   
1282 22         769                   ret
1283            770   
1283            771   
1283            772       bcd_bit_2:
1283 E552       773                   mov a , bcd_bitnumber
1285 B40246     774                   cjne a, #0x02, bcd_bit_1
1288 C002       775            push AR2
128A 7AFA       775            mov R2, #250
128C 1201FA     775            lcall ?Wait_Milli_Seconds
128F D002       775            pop AR2
1291 E554       776                   mov a, NEW_BCD
1293 540F       777                   anl a, #0x0f
1295 F554       778                   mov NEW_BCD,a
1297 E570       779                   mov a, keyin
1299 B40A02     780                   cjne a,#0x0A,continue_bcd_1
129C 7400       781                   mov a,#0x00
129E            782       continue_bcd_1:
129E 540F       783                   anl a, #0x0f
12A0 C4         784                   swap a
12A1 4554       785                        orl a, NEW_BCD
12A3 F554       786                        mov NEW_BCD,a
12A5 755201     787                   mov bcd_bitnumber, #0x01
12A8            788                   ;display new_bcd
12A8 C0E0       789            push acc
12AA 740D       789            mov a, #13
12AC 14         789            dec a
12AD 120289     789            lcall ?Set_Cursor_2 ; Select column and row
12B0 D0E0       789            pop acc
12B2            790       ;Display_3BCD(bcd to display)
12B2            790       ;now the bcd num of time is stored in bcd
12B2 C000       790            push ar0
12B4 A855       790            mov r0, NEW_BCD+1
12B6 1202A6     790            lcall ?Display_NUM
12B9 D000       790            pop ar0;
12BB C000       790            push ar0
12BD A854       790            mov r0, NEW_BCD
12BF 120290     790            lcall ?Display_BCD
12C2 D000       790            pop ar0;
12C4            791   
12C4 C002       792            push AR2
12C6 7AFA       792            mov R2, #250
12C8 1201FA     792            lcall ?Wait_Milli_Seconds
12CB D002       792            pop AR2
12CD            793              
12CD 22         794                   ret
12CE            795   
12CE            796       bcd_bit_1:  
12CE C002       797            push AR2
12D0 7AFA       797            mov R2, #250
12D2 1201FA     797            lcall ?Wait_Milli_Seconds
12D5 D002       797            pop AR2
12D7 E554       798                   mov a, NEW_BCD
12D9 54F0       799                   anl a, #0xf0
12DB F554       800                   mov NEW_BCD,a
12DD E570       801                   mov a, keyin
12DF B40A02     802                   cjne a,#0x0A,continue_bcd_2
12E2 7400       803                   mov a,#0x00
12E4            804       continue_bcd_2:
12E4 540F       805                   anl a, #0x0f
12E6 4554       806                        orl a, NEW_BCD
12E8 F554       807                        mov NEW_BCD,a
12EA 755203     808                   mov bcd_bitnumber, #0x03
12ED            809                   ;display new_bcd
12ED C0E0       810            push acc
12EF 740D       810            mov a, #13
12F1 14         810            dec a
12F2 120289     810            lcall ?Set_Cursor_2 ; Select column and row
12F5 D0E0       810            pop acc
12F7            811       ;Display_3BCD(bcd to display)
12F7            811       ;now the bcd num of time is stored in bcd
12F7 C000       811            push ar0
12F9 A855       811            mov r0, NEW_BCD+1
12FB 1202A6     811            lcall ?Display_NUM
12FE D000       811            pop ar0;
1300 C000       811            push ar0
1302 A854       811            mov r0, NEW_BCD
1304 120290     811            lcall ?Display_BCD
1307 D000       811            pop ar0;
1309            812   
1309 C002       813            push AR2
130B 7AFA       813            mov R2, #250
130D 1201FA     813            lcall ?Wait_Milli_Seconds
1310 D002       813            pop AR2
1312            814                   
1312 22         815                   ret
1313            816                   
1313            817       normal_button:
1313 E570       818                   mov a, keyin
1315            819                  
1315 B40B03     820                   cjne a, #11, button_c_u_d
1318            821                   
1318 02135D     822                   ljmp scanstate
131B            823       button_c_u_d:
131B E570       824                   mov a, keyin
131D B40C0C     825                   cjne a,#12, button_u_d
1320 7400       826                   mov a, #0x0
1322 F554       827                   mov NEW_BCD,a
1324 F555       828                   mov NEW_BCD+1,a
1326 755203     829                   mov bcd_bitnumber,#0x03
1329 021215     830                   ljmp FSM0_Done
132C            831       button_u_d:
132C E570       832                   mov a,keyin
132E B40D16     833                   cjne a,#13,button_d
1331 E533       834                   mov a, FSM0_State
1333 B40409     835                   cjne a,#0x04, state_add
1336 753300     836                   mov FSM0_State, #0x00
1339 1213E7     837                   lcall change_state_flag
133C 021215     838                   ljmp FSM0_Done
133F            839       state_add:
133F 0533       840                   inc FSM0_State
1341 1213E7     841                   lcall change_state_flag
1344 021215     842                   ljmp FSM0_Done
1347            843   
1347            844       button_d:
1347 E533       845                   mov a, FSM0_State
1349 B40009     846                   cjne a, #0x00, state_minus
134C 753304     847                   mov FSM0_State, #0x04
134F 1213E7     848                   lcall change_state_flag
1352 021215     849                   ljmp FSM0_Done
1355            850   
1355            851       state_minus:
1355 1533       852                   dec FSM0_State
1357 1213E7     853                   lcall change_state_flag
135A 021215     854                   ljmp FSM0_Done
135D            855   
135D            856   
135D            857   
135D            858       scanstate:
135D E533       859                   mov a, FSM0_State
135F            860                   
135F B40003     861                   cjne a,#0x00,change_temp_soak
1362            862   
1362 021215     863                   ljmp FSM0_Done
1365            864       change_temp_soak:
1365 B40134     865                   cjne a,#0x01,change_time_soak
1368 855462     866                   mov bcd, NEW_BCD
136B 855563     867                   mov bcd+1,NEW_BCD+1
136E 756400     868                   mov bcd+2,#0x0
1371 756500     869                   mov bcd+3,#0x0
1374 756600     870                   mov bcd+4,#0x0
1377            871   
1377 12033C     872                   lcall bcd2hex
137A 855A36     873                   mov TEMP_SOAK,x
137D C0E0       874            push acc
137F 7401       874            mov a, #1
1381 14         874            dec a
1382 12028B     874            lcall ?Set_Cursor_1 ; Select column and row
1385 D0E0       874            pop acc
1387            875       ;Display_3BCD(bcd to display)
1387            875       ;now the bcd num of time is stored in bcd
1387 C000       875            push ar0
1389 A837       875            mov r0, TEMP_SOAK+1
138B 1202A6     875            lcall ?Display_NUM
138E D000       875            pop ar0;
1390 C000       875            push ar0
1392 A836       875            mov r0, TEMP_SOAK
1394 120290     875            lcall ?Display_BCD
1397 D000       875            pop ar0;
1399 021215     876                   ljmp FSM0_Done
139C            877       change_time_soak:
139C B40215     878                   cjne a,#0x02,change_temp_reflow
139F 855462     879                   mov bcd, NEW_BCD
13A2 855563     880                   mov bcd+1,NEW_BCD+1
13A5 756500     881                   mov bcd+3,#0x0
13A8 756600     882                   mov bcd+4,#0x0
13AB 12033C     883                   lcall bcd2hex
13AE 855A3A     884                   mov TIME_SOAK,x
13B1 021215     885                   ljmp FSM0_Done
13B4            886       change_temp_reflow:
13B4 B40318     887                   cjne a,#0x03,change_time_reflow
13B7 855462     888                   mov bcd, NEW_BCD
13BA 855563     889                   mov bcd+1,NEW_BCD+1
13BD 756400     890                   mov bcd+2,#0x0
13C0 756500     891                   mov bcd+3,#0x0
13C3 756600     892                   mov bcd+4,#0x0
13C6 12033C     893                   lcall bcd2hex
13C9 855A3E     894                   mov TEMP_RFLW,x
13CC 021215     895                   ljmp FSM0_Done
13CF            896       change_time_reflow:
13CF 855462     897                   mov bcd, NEW_BCD
13D2 855563     898                   mov bcd+1,NEW_BCD+1
13D5 756400     899                   mov bcd+2,#0x0
13D8 756500     900                   mov bcd+3,#0x0
13DB 756600     901                   mov bcd+4,#0x0
13DE 12033C     902                   lcall bcd2hex
13E1 855A42     903                   mov TIME_RFLW,x
13E4 021215     904                   ljmp FSM0_Done
13E7            905       change_state_flag:
13E7 755400     906               mov NEW_BCD,#0x0
13EA 755500     907               mov NEW_BCD+1,#0x0
13ED 22         908               ret
13EE            909   
13EE            910   
13EE            911       ;---------------------------------;
13EE            912       ; FSM1 using Timer Interrupt      ;
13EE            913       ;---------------------------------;
13EE            914       ;update status and send data to LCD and PC every one/half seconds
13EE            915   FSM1:
13EE E534       916       mov a, FSM1_State
13F0            917       FSM1_State0:
13F0 B40002     918           cjne a, #0, JUMP_FSM1_State1
13F3 8003       919           sjmp Start_FSM1_State0
13F5            920           JUMP_FSM1_State1:
13F5 0214BE     921           ljmp FSM1_State1
13F8            922           
13F8            923           Start_FSM1_State0:
13F8 D203       924           setb enable_time_global
13FA D208       925           setb speak_enable
13FC D2A7       926           setb OVEN; turn oven on
13FE 1206D7     927       lcall Read_Room_Temp
1401 1205FD     927       lcall Read_Oven_Temp
1404            927   
1404            927       ;mov(dst, src)
1404 85515D     927            mov x+3, Current_Oven_Temp+3
1407 85505C     927       mov x+2, Current_Oven_Temp+2
140A 854F5B     927       mov x+1, Current_Oven_Temp+1
140D 854E5A     927       mov x,   Current_Oven_Temp
1410            927       ;mov(dst, src)
1410 853961     927            mov y+3, TEMP_SOAK+3
1413 853860     927       mov y+2, TEMP_SOAK+2
1416 85375F     927       mov y+1, TEMP_SOAK+1
1419 85365E     927       mov y,   TEMP_SOAK
141C            927   
141C 1203BB     927       lcall x_lt_y    ;Read Temperatures
141F C0E0       928            push acc
1421 7401       928            mov a, #1
1423 14         928            dec a
1424 12028B     928            lcall ?Set_Cursor_1 ; Select column and row
1427 D0E0       928            pop acc
1429 C083       928            push dph
142B C082       928            push dpl
142D C0E0       928            push acc
142F 900146     928            mov dptr, #WORKING
1432 12027E     928            lcall ?Send_Constant_String
1435 D0E0       928            pop acc
1437 D082       928            pop dpl
1439 D083       928            pop dph
143B C0E0       928            push acc
143D 7401       928            mov a, #1
143F 14         928            dec a
1440 120289     928            lcall ?Set_Cursor_2 ; Select column and row
1443 D0E0       928            pop acc
1445 C083       928            push dph
1447 C082       928            push dpl
1449 C0E0       928            push acc
144B 900157     928            mov dptr, #STEP1
144E 12027E     928            lcall ?Send_Constant_String
1451 D0E0       928            pop acc
1453 D082       928            pop dpl
1455 D083       928            pop dph;display interface
1457 120D39     929           lcall Display_Working_Status
145A C0E0       930            push acc
145C 7406       930            mov a, #6
145E 14         930            dec a
145F 120289     930            lcall ?Set_Cursor_2 ; Select column and row
1462 D0E0       930            pop acc
1464            931       ;mov(dst, src)
1464 85395D     931            mov x+3, TEMP_SOAK+3
1467 85385C     931       mov x+2, TEMP_SOAK+2
146A 85375B     931       mov x+1, TEMP_SOAK+1
146D 85365A     931       mov x,   TEMP_SOAK
1470 1202B3     932       lcall hex2bcd
1473            932       ;now the bcd num of time is stored in bcd
1473 C000       932            push ar0
1475 A863       932            mov r0, bcd+1
1477 1202A6     932            lcall ?Display_NUM
147A D000       932            pop ar0;
147C C000       932            push ar0
147E A862       932            mov r0, bcd
1480 120290     932            lcall ?Display_BCD
1483 D000       932            pop ar0;
1485            933   
1485 20020D     934           jb mf, FSM1_State0_Error_Check;check Error and continue if smaller than set time
1488            935           ;if temp greater
1488 120BAA     936           lcall clear_speaking
148B 120B03     937           lcall preheat_and_soak
148E 0534       938           inc FSM1_State; go to next state            
1490 853A32     939           mov Time_Counter, TIME_SOAK; move the TIME_SOAK in counter and count down
1493 8026       940           sjmp FSM1_State0_Done
1495            941   
1495            942           FSM1_State0_Error_Check:
1495 E531       943           mov a, Time_Global
1497 B43C21     944           cjne a, #QUITTIME, FSM1_State0_Done; not time, done
149A            945           ;if time reached, check temp
149A            946       ;mov(dst, src)
149A 85515D     946            mov x+3, Current_Oven_Temp+3
149D 85505C     946       mov x+2, Current_Oven_Temp+2
14A0 854F5B     946       mov x+1, Current_Oven_Temp+1
14A3 854E5A     946       mov x,   Current_Oven_Temp;move current oven temp in x
14A6 756100     947           mov y+3, #0
14A9 756000     948           mov y+2, #0
14AC 755F00     949           mov y+1, #0
14AF 755E32     950           mov y, #QUITTEMP
14B2 1203BB     951           lcall x_lt_y; check if current oven temp is smaller than quittemp
14B5            952   
14B5 300203     953           jnb mf, FSM1_State0_Done; the oven is working properly
14B8            954           ;if not working right
14B8 0217A8     955           ljmp FSM1_WARNING
14BB            956   
14BB            957   
14BB            958   
14BB            959           FSM1_State0_Done:
14BB 0217E7     960               ljmp FSM1_DONE
14BE            961   
14BE            962   
14BE            963       FSM1_State1:
14BE B40102     964           cjne a, #1, JUMP_FSM1_State2
14C1 8003       965               sjmp Start_FSM1_State1
14C3            966           JUMP_FSM1_State2:
14C3 02156A     967               ljmp FSM1_State2
14C6            968           
14C6            969           Start_FSM1_State1:
14C6 D5320B     970           djnz Time_Counter, FSM1_State1_Continue; decrement every 1 second
14C9            971           ;time over, change state
14C9 120BAA     972           lcall clear_speaking
14CC 120B22     973           lcall ramp_to_peak
14CF 0534       974           inc FSM1_State; increment states
14D1 021567     975           ljmp FSM1_State1_Done
14D4            976   
14D4            977           FSM1_State1_Continue:
14D4            978           ;next: check temp
14D4            979           ;read temp and compare
14D4 1206D7     980       lcall Read_Room_Temp
14D7 1205FD     980       lcall Read_Oven_Temp
14DA            980   
14DA            980       ;mov(dst, src)
14DA 85515D     980            mov x+3, Current_Oven_Temp+3
14DD 85505C     980       mov x+2, Current_Oven_Temp+2
14E0 854F5B     980       mov x+1, Current_Oven_Temp+1
14E3 854E5A     980       mov x,   Current_Oven_Temp
14E6            980       ;mov(dst, src)
14E6 853961     980            mov y+3, TEMP_SOAK+3
14E9 853860     980       mov y+2, TEMP_SOAK+2
14EC 85375F     980       mov y+1, TEMP_SOAK+1
14EF 85365E     980       mov y,   TEMP_SOAK
14F2            980   
14F2 1203BB     980       lcall x_lt_y   ;Update current temp info
14F5 C0E0       981            push acc
14F7 7401       981            mov a, #1
14F9 14         981            dec a
14FA 12028B     981            lcall ?Set_Cursor_1 ; Select column and row
14FD D0E0       981            pop acc
14FF C083       981            push dph
1501 C082       981            push dpl
1503 C0E0       981            push acc
1505 900146     981            mov dptr, #WORKING
1508 12027E     981            lcall ?Send_Constant_String
150B D0E0       981            pop acc
150D D082       981            pop dpl
150F D083       981            pop dph
1511 C0E0       981            push acc
1513 7401       981            mov a, #1
1515 14         981            dec a
1516 120289     981            lcall ?Set_Cursor_2 ; Select column and row
1519 D0E0       981            pop acc
151B C083       981            push dph
151D C082       981            push dpl
151F C0E0       981            push acc
1521 900168     981            mov dptr, #STEP2
1524 12027E     981            lcall ?Send_Constant_String
1527 D0E0       981            pop acc
1529 D082       981            pop dpl
152B D083       981            pop dph
152D 120D39     982           lcall Display_Working_Status; update time and temp on lcd
1530            983           ;if temp is lower than expected, jump to ON
1530 C0E0       984            push acc
1532 7405       984            mov a, #5
1534 14         984            dec a
1535 120289     984            lcall ?Set_Cursor_2 ; Select column and row
1538 D0E0       984            pop acc
153A 755A00     985            mov x+0, #low (0 % 0x10000) 
153D 755B00     985            mov x+1, #high(0 % 0x10000) 
1540 755C00     985            mov x+2, #low (0 / 0x10000) 
1543 755D00     985            mov x+3, #high(0 / 0x10000) 
1546 85325A     986           mov x, Time_Counter
1549 1202B3     987       lcall hex2bcd
154C            987       ;now the bcd num of time is stored in bcd
154C C000       987            push ar0
154E A863       987            mov r0, bcd+1
1550 1202A6     987            lcall ?Display_NUM
1553 D000       987            pop ar0;
1555 C000       987            push ar0
1557 A862       987            mov r0, bcd
1559 120290     987            lcall ?Display_BCD
155C D000       987            pop ar0;
155E            988   
155E 200204     989           jb mf, FSM1_State1_ON
1561            990           ;if temp is higher, close oven
1561 C2A7       991           clr OVEN 
1563 8002       992           sjmp FSM1_State1_Done
1565            993   
1565            994           FSM1_State1_ON:
1565 D2A7       995           setb OVEN   ;if temp is lower, turn on oven
1567            996           FSM1_State1_Done:
1567 0217E7     997               ljmp FSM1_DONE
156A            998   
156A            999       FSM1_State2: ;temp ramp up until TEMP_RFLW
156A B40202    1000           cjne a, #2, JUMP_FSM1_State3
156D 8003      1001               sjmp Start_FSM1_State2
156F           1002           JUMP_FSM1_State3:
156F 02160F    1003               ljmp FSM1_State3
1572           1004   
1572           1005           Start_FSM1_State2:
1572 D2A7      1006           setb OVEN; turn on oven
1574           1007   
1574           1008           ;read temperature
1574 1206D7    1009       lcall Read_Room_Temp
1577 1205FD    1009       lcall Read_Oven_Temp
157A           1009   
157A           1009       ;mov(dst, src)
157A 85515D    1009            mov x+3, Current_Oven_Temp+3
157D 85505C    1009       mov x+2, Current_Oven_Temp+2
1580 854F5B    1009       mov x+1, Current_Oven_Temp+1
1583 854E5A    1009       mov x,   Current_Oven_Temp
1586           1009       ;mov(dst, src)
1586 854161    1009            mov y+3, TEMP_RFLW+3
1589 854060    1009       mov y+2, TEMP_RFLW+2
158C 853F5F    1009       mov y+1, TEMP_RFLW+1
158F 853E5E    1009       mov y,   TEMP_RFLW
1592           1009   
1592 1203BB    1009       lcall x_lt_y
1595 20020E    1010           jb mf, FSM1_State2_Continue
1598           1011           ;if temp reached
1598 120BAA    1012           lcall clear_speaking
159B 120B41    1013           lcall reflow
159E 0534      1014           inc FSM1_State
15A0 854232    1015           mov Time_Counter, TIME_RFLW
15A3 0217E7    1016           ljmp FSM1_DONE
15A6           1017   
15A6           1018           FSM1_State2_Continue:
15A6 C0E0      1019            push acc
15A8 7401      1019            mov a, #1
15AA 14        1019            dec a
15AB 12028B    1019            lcall ?Set_Cursor_1 ; Select column and row
15AE D0E0      1019            pop acc
15B0 C083      1019            push dph
15B2 C082      1019            push dpl
15B4 C0E0      1019            push acc
15B6 900146    1019            mov dptr, #WORKING
15B9 12027E    1019            lcall ?Send_Constant_String
15BC D0E0      1019            pop acc
15BE D082      1019            pop dpl
15C0 D083      1019            pop dph
15C2 C0E0      1019            push acc
15C4 7401      1019            mov a, #1
15C6 14        1019            dec a
15C7 120289    1019            lcall ?Set_Cursor_2 ; Select column and row
15CA D0E0      1019            pop acc
15CC C083      1019            push dph
15CE C082      1019            push dpl
15D0 C0E0      1019            push acc
15D2 900179    1019            mov dptr, #STEP3
15D5 12027E    1019            lcall ?Send_Constant_String
15D8 D0E0      1019            pop acc
15DA D082      1019            pop dpl
15DC D083      1019            pop dph
15DE 120D39    1020           lcall Display_Working_Status
15E1 C0E0      1021            push acc
15E3 7406      1021            mov a, #6
15E5 14        1021            dec a
15E6 120289    1021            lcall ?Set_Cursor_2 ; Select column and row
15E9 D0E0      1021            pop acc
15EB           1022       ;mov(dst, src)
15EB 85415D    1022            mov x+3, TEMP_RFLW+3
15EE 85405C    1022       mov x+2, TEMP_RFLW+2
15F1 853F5B    1022       mov x+1, TEMP_RFLW+1
15F4 853E5A    1022       mov x,   TEMP_RFLW
15F7 1202B3    1023       lcall hex2bcd
15FA           1023       ;now the bcd num of time is stored in bcd
15FA C000      1023            push ar0
15FC A863      1023            mov r0, bcd+1
15FE 1202A6    1023            lcall ?Display_NUM
1601 D000      1023            pop ar0;
1603 C000      1023            push ar0
1605 A862      1023            mov r0, bcd
1607 120290    1023            lcall ?Display_BCD
160A D000      1023            pop ar0;
160C           1024   
160C           1025           FSM1_State2_Done:
160C 0217E7    1026               ljmp FSM1_DONE
160F           1027           
160F           1028            FSM1_State3: ; keep temp at TEMP_RFLW for a few time
160F B40302    1029           cjne a, #3, JUMP_FSM1_State4
1612 8003      1030               sjmp Start_FSM1_State3
1614           1031           JUMP_FSM1_State4:
1614 0216BB    1032               ljmp FSM1_State4
1617           1033           
1617           1034           Start_FSM1_State3:
1617 D5320B    1035           djnz Time_Counter, FSM1_State3_Continue
161A           1036           ;if time's up
161A 120BAA    1037           lcall clear_speaking
161D 120B60    1038           lcall cooling
1620 0534      1039           inc FSM1_State
1622 0216B8    1040           ljmp FSM1_State3_Done
1625           1041   
1625           1042           FSM1_State3_Continue:
1625 C0E0      1043            push acc
1627 7401      1043            mov a, #1
1629 14        1043            dec a
162A 12028B    1043            lcall ?Set_Cursor_1 ; Select column and row
162D D0E0      1043            pop acc
162F C083      1043            push dph
1631 C082      1043            push dpl
1633 C0E0      1043            push acc
1635 900146    1043            mov dptr, #WORKING
1638 12027E    1043            lcall ?Send_Constant_String
163B D0E0      1043            pop acc
163D D082      1043            pop dpl
163F D083      1043            pop dph
1641 C0E0      1043            push acc
1643 7401      1043            mov a, #1
1645 14        1043            dec a
1646 120289    1043            lcall ?Set_Cursor_2 ; Select column and row
1649 D0E0      1043            pop acc
164B C083      1043            push dph
164D C082      1043            push dpl
164F C0E0      1043            push acc
1651 90018A    1043            mov dptr, #STEP4
1654 12027E    1043            lcall ?Send_Constant_String
1657 D0E0      1043            pop acc
1659 D082      1043            pop dpl
165B D083      1043            pop dph
165D 120D39    1044           lcall Display_Working_Status
1660 1206D7    1045       lcall Read_Room_Temp
1663 1205FD    1045       lcall Read_Oven_Temp
1666           1045   
1666           1045       ;mov(dst, src)
1666 85515D    1045            mov x+3, Current_Oven_Temp+3
1669 85505C    1045       mov x+2, Current_Oven_Temp+2
166C 854F5B    1045       mov x+1, Current_Oven_Temp+1
166F 854E5A    1045       mov x,   Current_Oven_Temp
1672           1045       ;mov(dst, src)
1672 854161    1045            mov y+3, TEMP_RFLW+3
1675 854060    1045       mov y+2, TEMP_RFLW+2
1678 853F5F    1045       mov y+1, TEMP_RFLW+1
167B 853E5E    1045       mov y,   TEMP_RFLW
167E           1045   
167E 1203BB    1045       lcall x_lt_y; update temp info, set or clr mf flag
1681 C0E0      1046            push acc
1683 7405      1046            mov a, #5
1685 14        1046            dec a
1686 120289    1046            lcall ?Set_Cursor_2 ; Select column and row
1689 D0E0      1046            pop acc
168B 755A00    1047            mov x+0, #low (0 % 0x10000) 
168E 755B00    1047            mov x+1, #high(0 % 0x10000) 
1691 755C00    1047            mov x+2, #low (0 / 0x10000) 
1694 755D00    1047            mov x+3, #high(0 / 0x10000) 
1697 85325A    1048           mov x, Time_Counter
169A 1202B3    1049       lcall hex2bcd
169D           1049       ;now the bcd num of time is stored in bcd
169D C000      1049            push ar0
169F A863      1049            mov r0, bcd+1
16A1 1202A6    1049            lcall ?Display_NUM
16A4 D000      1049            pop ar0;
16A6 C000      1049            push ar0
16A8 A862      1049            mov r0, bcd
16AA 120290    1049            lcall ?Display_BCD
16AD D000      1049            pop ar0;
16AF           1050   
16AF           1051           ;if temp is lower than expected, jump to ON
16AF 200204    1052           jb mf, FSM1_State3_ON
16B2           1053           ;if temp is higher, close oven
16B2 C2A7      1054           clr OVEN 
16B4 8002      1055           sjmp FSM1_State3_Done
16B6           1056   
16B6           1057           FSM1_State3_ON:
16B6 D2A7      1058           setb OVEN   ;if temp is lower, turn on oven
16B8           1059           FSM1_State3_Done:
16B8 0217E7    1060               ljmp FSM1_DONE
16BB           1061           
16BB           1062   
16BB           1063       
16BB           1064       FSM1_State4:; cool down until safe temp
16BB B40402    1065           cjne a, #4, JUMP_FSM1_State5
16BE 8003      1066               sjmp Start_FSM1_State4
16C0           1067           JUMP_FSM1_State5:
16C0 02175D    1068               ljmp FSM1_State5
16C3           1069           
16C3           1070           Start_FSM1_State4:
16C3 C2A7      1071           clr OVEN
16C5           1072           ;read temperature
16C5 1206D7    1073       lcall Read_Room_Temp
16C8 1205FD    1073       lcall Read_Oven_Temp
16CB           1073   
16CB           1073       ;mov(dst, src)
16CB 85515D    1073            mov x+3, Current_Oven_Temp+3
16CE 85505C    1073       mov x+2, Current_Oven_Temp+2
16D1 854F5B    1073       mov x+1, Current_Oven_Temp+1
16D4 854E5A    1073       mov x,   Current_Oven_Temp
16D7           1073       ;mov(dst, src)
16D7 854961    1073            mov y+3, TEMP_SAFE+3
16DA 854860    1073       mov y+2, TEMP_SAFE+2
16DD 85475F    1073       mov y+1, TEMP_SAFE+1
16E0 85465E    1073       mov y,   TEMP_SAFE
16E3           1073   
16E3 1203BB    1073       lcall x_lt_y
16E6           1074           ;if temp is smaller than TEMP_SAFE, go state 5
16E6 300205    1075           jnb mf, FSM1_State4_Continue
16E9           1076           ;if temp is smaller than expected
16E9 0534      1077           inc FSM1_State
16EB 753200    1078           mov Time_Counter, #0
16EE           1079   
16EE           1080           FSM1_State4_Continue:
16EE C0E0      1081            push acc
16F0 7401      1081            mov a, #1
16F2 14        1081            dec a
16F3 12028B    1081            lcall ?Set_Cursor_1 ; Select column and row
16F6 D0E0      1081            pop acc
16F8 C083      1081            push dph
16FA C082      1081            push dpl
16FC C0E0      1081            push acc
16FE 900146    1081            mov dptr, #WORKING
1701 12027E    1081            lcall ?Send_Constant_String
1704 D0E0      1081            pop acc
1706 D082      1081            pop dpl
1708 D083      1081            pop dph
170A C0E0      1081            push acc
170C 7401      1081            mov a, #1
170E 14        1081            dec a
170F 120289    1081            lcall ?Set_Cursor_2 ; Select column and row
1712 D0E0      1081            pop acc
1714 C083      1081            push dph
1716 C082      1081            push dpl
1718 C0E0      1081            push acc
171A 90019B    1081            mov dptr, #STEP5
171D 12027E    1081            lcall ?Send_Constant_String
1720 D0E0      1081            pop acc
1722 D082      1081            pop dpl
1724 D083      1081            pop dph
1726 120D39    1082           lcall Display_Working_Status
1729 C0E0      1083            push acc
172B 7405      1083            mov a, #5
172D 14        1083            dec a
172E 120289    1083            lcall ?Set_Cursor_2 ; Select column and row
1731 D0E0      1083            pop acc
1733 755A00    1084            mov x+0, #low (0 % 0x10000) 
1736 755B00    1084            mov x+1, #high(0 % 0x10000) 
1739 755C00    1084            mov x+2, #low (0 / 0x10000) 
173C 755D00    1084            mov x+3, #high(0 / 0x10000) 
173F 85465A    1085           mov x, TEMP_SAFE
1742 1202B3    1086           lcall hex2bcd
1745 1202B3    1087       lcall hex2bcd
1748           1087       ;now the bcd num of time is stored in bcd
1748 C000      1087            push ar0
174A A863      1087            mov r0, bcd+1
174C 1202A6    1087            lcall ?Display_NUM
174F D000      1087            pop ar0;
1751 C000      1087            push ar0
1753 A862      1087            mov r0, bcd
1755 120290    1087            lcall ?Display_BCD
1758 D000      1087            pop ar0;
175A           1088   
175A           1089           FSM1_State4_Done:
175A 0217E7    1090               ljmp FSM1_DONE
175D           1091   
175D           1092       FSM1_State5: ; already cool done, display something, play some music
175D B40502    1093            cjne a, #5, JUMP_FSM1_DOne
1760 8003      1094               sjmp Start_FSM1_State5
1762           1095           JUMP_FSM1_Done:
1762 0217E7    1096               ljmp FSM1_Done
1765           1097               
1765           1098           Start_FSM1_State5:
1765 C2A7      1099           clr OVEN; double check oven is not on
1767 C203      1100           clr enable_time_global; stop counting
1769 C208      1101           clr speak_enable
176B C0E0      1102            push acc
176D 7401      1102            mov a, #1
176F 14        1102            dec a
1770 12028B    1102            lcall ?Set_Cursor_1 ; Select column and row
1773 D0E0      1102            pop acc
1775 C083      1102            push dph
1777 C082      1102            push dpl
1779 C0E0      1102            push acc
177B 900146    1102            mov dptr, #WORKING
177E 12027E    1102            lcall ?Send_Constant_String
1781 D0E0      1102            pop acc
1783 D082      1102            pop dpl
1785 D083      1102            pop dph
1787 C0E0      1102            push acc
1789 7401      1102            mov a, #1
178B 14        1102            dec a
178C 120289    1102            lcall ?Set_Cursor_2 ; Select column and row
178F D0E0      1102            pop acc
1791 C083      1102            push dph
1793 C082      1102            push dpl
1795 C0E0      1102            push acc
1797 9001AC    1102            mov dptr, #STEP6
179A 12027E    1102            lcall ?Send_Constant_String
179D D0E0      1102            pop acc
179F D082      1102            pop dpl
17A1 D083      1102            pop dph
17A3 120D39    1103           lcall Display_Working_Status
17A6 803F      1104           sjmp FSM1_Done
17A8           1105   
17A8           1106   
17A8           1107       FSM1_WARNING:
17A8 C2A7      1108           clr OVEN
17AA C0E0      1109            push acc
17AC 7401      1109            mov a, #1
17AE 14        1109            dec a
17AF 12028B    1109            lcall ?Set_Cursor_1 ; Select column and row
17B2 D0E0      1109            pop acc
17B4 C083      1109            push dph
17B6 C082      1109            push dpl
17B8 C0E0      1109            push acc
17BA 9001BD    1109            mov dptr, #WARNING1
17BD 12027E    1109            lcall ?Send_Constant_String
17C0 D0E0      1109            pop acc
17C2 D082      1109            pop dpl
17C4 D083      1109            pop dph
17C6 C0E0      1109            push acc
17C8 7401      1109            mov a, #1
17CA 14        1109            dec a
17CB 120289    1109            lcall ?Set_Cursor_2 ; Select column and row
17CE D0E0      1109            pop acc
17D0 C083      1109            push dph
17D2 C082      1109            push dpl
17D4 C0E0      1109            push acc
17D6 9001CE    1109            mov dptr, #WARNING2
17D9 12027E    1109            lcall ?Send_Constant_String
17DC D0E0      1109            pop acc
17DE D082      1109            pop dpl
17E0 D083      1109            pop dph
17E2 C208      1110           clr speak_enable
17E4 753406    1111           mov FSM1_State, #6
17E7           1112   
17E7           1113       FSM1_DONE:
17E7 22        1114       ret
17E8           1115   
17E8           1116   EN
