                  2   $LIST
0000              4   
0000              5   ;-------------------;
0000              6   ;    Const Define   ;
0000              7   ;-------------------; 
0000              8   XTAL EQU 7373000
0000              9   BAUD EQU 115200
0000             10   BRVAL EQU ((XTAL/BAUD)-16)
0000             11   
0000             12   CCU_RATE      EQU 22050
0000             13   CCU_RELOAD    EQU ((65536-((XTAL/(2*CCU_RATE)))))
0000             14   
0000             15   ;TIMER0_RATE   EQU 4096    ; 4096Hz
0000             16   ;TIMER0_RELOAD EQU ((65536-(XTAL/(2*TIMER0_RATE))))
0000             17   TIMER1_RATE   EQU 100     ; 1000Hz, for a timer tick of 1ms
0000             18   TIMER1_RELOAD EQU ((65536-(XTAL/(2*TIMER1_RATE))))
0000             19   QUITTIME      EQU 60
0000             20   QUITTEMP      EQU 50
0000             21   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             22   
0000             23   number_off_set EQU 17200 ;the distance between each number
0000             24   ;number start at ff
0000             25   
0000             26   ;starting addressed of different sound tracks
0000             27   decimal_start  EQU 360000
0000             28   decimal_off_set EQU 24100
0000             29   decimal_playtime EQU 50000
0000             30   
0000             31   special_dec_start EQU 174000 ;numbers from 10 to 19
0000             32   special_off_set EQU 21500
0000             33   special_playtime EQU 21500;19000
0000             34   
0000             35   hundreds_start EQU 563000
0000             36   hundreds_off_set EQU 36000
0000             37   
0000             38   current_temp_is_start EQU 674000
0000             39   current_temp_playtime EQU 35000
0000             40   
0000             41   degree_start EQU 710000
0000             42   degree_playtime EQU 11018
0000             43   
0000             44   celsius_start EQU 732236
0000             45   celsius_playtime EQU 17000
0000             46   
0000             47   current_process_is_start EQU 757000
0000             48   current_process_is_playtime EQU 27000
0000             49            
0000             50   ramp_to_soak_start EQU 790000
0000             51   ramp_to_soak_playtime EQU 25000
0000             52   
0000             53   preheat_and_soak_start EQU 822000
0000             54   preheat_and_soak_playtime EQU 27000
0000             55   
0000             56   ramp_to_peak_start EQU 857000
0000             57   ramp_to_peak_playtime EQU 19000
0000             58   
0000             59   reflow_start EQU 885000
0000             60   reflow_playtime EQU 15000
0000             61   
0000             62   cooling_start EQU 906000
0000             63   cooling_playtime EQU 14000
0000             64   ;-------------------;
0000             65   ;    Ports Define   ;
0000             66   ;-------------------; 
0000             67   ;ADC01 equ P0.0; Read Room Temperature
0000             68   LCD_RS equ P0.1
0000             69   LCD_RW equ P0.2
0000             70   LCD_E  equ P0.3
0000             71   ;Soundout  P0.4
0000             72   LCD_D4 equ P0.5
0000             73   LCD_D5 equ P0.6
0000             74   LCD_D6 equ P0.7
0000             75   LCD_D7 equ P3.0
0000             76   ;          P3.1
0000             77   ;          P1.2
0000             78   Start  equ P1.3
0000             79   Stop   equ P1.4
0000             80   LED    equ P1.6
0000             81   ;ADC00 equ P1.7; Read Oven Temperature
0000             82   ;ADC03 equ P2.0; Read Keyboard1
0000             83   ;ADC02 equ P2.1; Read Keyboard0
0000             84   ;MOSI  equ P2.2
0000             85   ;MISO  equ P2.3
0000             86   FLASH_CE EQU P2.4
0000             87   ;SPICK equ P2.5
0000             88   ;WAVEOUT   P2.6
0000             89   OVEN   equ P2.7
0000             90   
0000             91   ;------------------------;
0000             92   ;    Interrupt Vectors   ;
0000             93   ;------------------------; 
0000             94   ; Reset vector
0000             95   org 0x0000
0000 020C5F      96       ljmp MainProgram
0003             97   
0003             98   ; External interrupt 0 vector, start
0003             99   org 0x0003
0003 020E18     100            ljmp EI0_ISR
0006            101   
0006            102   ; Timer/Counter 0 overflow interrupt vector
000B            103   org 0x000B
000B 32         104            reti
000C            105   
000C            106   ; External interrupt 1 vector, stop
0013            107   org 0x0013
0013 020E24     108            ljmp EI1_ISR
0016            109   
0016            110   ; Timer/Counter 1 overflow interrupt vector
001B            111   org 0x001B
001B 020DF1     112            ljmp Timer1_ISR
001E            113   
001E            114   ; Serial port receive/transmit interrupt vector
0023            115   org 0x0023 
0023 32         116            reti
0024            117   
0024            118   ; CCU interrupt vector
005B            119   org 0x005b 
005B 020782     120            ljmp CCU_ISR
005E            121   
005E            122   ;-----------------------;
005E            123   ;    Variables Define   ;
005E            124   ;-----------------------; 
005E            125   ;Variable_name: ds n
0030            126   dseg at 0x30
0030            127       Count10ms:    ds 1 ; Used to determine when half second has passed
0031            128       Time_Global:  ds 1 ; to store the time of whole process
0032            129       Time_Counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033            130   
0033            131       FSM0_State: ds 1
0034            132       FSM1_State: ds 1
0035            133   
0035            134       Profile_Num: ds 1
0036            135   
0036            136       TEMP_SOAK:  ds 4
003A            137       TIME_SOAK:  ds 4
003E            138       TEMP_RFLW:  ds 4
0042            139       TIME_RFLW:  ds 4
0046            140       TEMP_SAFE:  ds 4
004A            141       Current_Room_Temp: ds 4
004E            142            Current_Oven_Temp: ds 4
0052            143   
0052            144       Cursor:     ds 1
0053            145       NEW_BCD:    ds 3    ; 3 digit BCD used to store current entered number
0056            146       NEW_HEX:    ds 4    ; 32 bit number of new entered number
005A            147       ;for math32.inc
005A            148       x: ds 4
005E            149       y: ds 4
0062            150       bcd: ds 5
0067            151       Count5s: ds 1
0068            152       ;z
0068            153       w:   ds 3 ; 24-bit play counter.  Decremented in CCU ISR.
006B            154            number: ds 1;
006C            155       digits: ds 1;
006D            156            tenth: ds 1;
006E            157            individual_offest: ds 1;
006F            158       speak_state:       ds 1;
0070            159       ;key
0070            160       keyin: ds 1
0071            161   
0071            162   
0071            163   ;-------------------;
0071            164   ;    Flags Define   ;
0071            165   ;-------------------; 
0071            166   ;Flag_name: dbit 1
0000            167   bseg
0000            168       FSM0_State_Changed:  dbit 1
0001            169       Main_State:          dbit 1 ; 0 for setting, 1 for reflowing
0002            170       ;for math32.inc
0002            171       mf: dbit 1
0003            172       enable_time_global: dbit 1
0004            173       half_seconds_flag: dbit 1 ; 500ms in double rate mode
0005            174           nodigit: dbit 1 ; if playing from 10 to 19 then we don't need to
0006            175                       ;play the last digit
0006            176            skiphundred: dbit 1
0007            177            skiptenth: dbit 1
0008            178       speak_enable: dbit 1
0009            179   ;-----------------------;
0009            180   ;     Include Files     ;
0009            181   ;-----------------------; 
0009            182   ;$NOLIST
                 -1       $include(lcd_4bit.inc) 
005E              1   cseg
005E              2   
005E 30313233     3   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
006E 30313233     4   hex: db '0123456789abcdef',0
     34353637
     38396162
     63646566
     00
007F              5   
007F              6   ;LCD                '1234567890123456'
007F 57454C43     7   WELCOME1:        db 'WELCOME!        '   ,0
     4F4D4521
     20202020
     20202020
     00
0090 53757065     8   WELCOME2:        db 'Super Reflow!   '   ,0
     72205265
     666C6F77
     21202020
     00
00A1 53657474     9   MAIN_FACE1:      db 'Setting: Prof   '   ,0
     696E673A
     2050726F
     66202020
     00
00B2 53746172    10   MAIN_FACE2: db 'Start       Stop'   ,0
     74202020
     20202020
     53746F70
     00
00C3 53544D50    11   SETTING1:        db 'STMP:   STM:   s'   ,0
     3A202020
     53544D3A
     20202073
     00
00D4 52544D50    12   SETTING2:   db 'RTMP:   RTM:   s'   ,0
     3A202020
     52544D3A
     20202073
     00
00E5 4F4C443A    13   MODIFY_DOWN:db 'OLD:    NEW:    '   ,0
     20202020
     4E45573A
     20202020
     00
00F6 4D4F4449    14   MODIFY1:         db 'MODIFY:TEMP_SOAK'   ,0
     46593A54
     454D505F
     534F414B
     00
0107 4D4F4449    15   MODIFY2:         db 'MODIFY:TIME_SOAK'   ,0
     46593A54
     494D455F
     534F414B
     00
0118 4D4F4449    16   MODIFY3:         db 'MODIFY:TEMP_RFLW'   ,0
     46593A54
     454D505F
     52464C57
     00
0129 4D4F4449    17   MODIFY4:         db 'MODIFY:TEMP_SOAK'   ,0
     46593A54
     454D505F
     534F414B
     00
013A 4D4F4449    18   MODIFY5:    db 'MODIFY:TEMP_SOAK'   ,0
     46593A54
     454D505F
     534F414B
     00
014B 54454D50    19   WORKING:    db 'TEMP:   TIME:   '   ,0
     3A202020
     54494D45
     3A202020
     00
015C 53544D50    20   STEP1:           db 'STMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
016D 53544D3A    21   STEP2:      db 'STM:   s SOAKING'   ,0
     20202073
     20534F41
     4B494E47
     00
017E 52544D50    22   STEP3:      db 'RTMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
018F 52544D3A    23   STEP4:      db 'RTM:   s REFLOW '   ,0
     20202073
     20524546
     4C4F5720
     00
01A0 5346543A    24   STEP5:      db 'SFT:     COOLING'   ,0
     20202020
     20434F4F
     4C494E47
     00
01B1 20202020    25   STEP6:      db '         FINISH '   ,0
     20202020
     2046494E
     49534820
     00
01C2 4572726F    26   WARNING1:   db 'Error Warning!  '   ,0
     72205761
     726E696E
     67212020
     00
01D3 54454D50    27   WARNING2:   db 'TEMP Sensing ERR'   ,0
     2053656E
     73696E67
     20455252
     00
01E4             28   ;---------------------------------;
01E4             29   ;           Basic Macros          ;
01E4             30   ;---------------------------------;
                 31   LCD_Initailize mac
                 32   	lcall LCD_4BIT
                 33   endmac
01E4             34   
                 35   LCD_WriteData mac
                 36   	mov a, %0
                 37   	lcall ?LCD_WriteData
                 38   endmac
01E4             39            
                 40   LCD_WriteCommand mac
                 41   	mov a, %0
                 42   	lcall ?LCD_WriteCommand
                 43   endmac
01E4             44   
                 45   LCD_Send_Constant_String mac
                 46   	push dph
                 47   	push dpl
                 48   	push acc
                 49   	mov dptr, %0
                 50   	lcall ?Send_Constant_String
                 51   	pop acc
                 52   	pop dpl
                 53   	pop dph
                 54   endmac
01E4             55   
                 56   LCD_Set_Cursor mac
                 57   	push acc
                 58   	mov a, #%1
                 59   	dec a
                 60   	lcall ?Set_Cursor_%0 ; Select column and row
                 61   	pop acc
                 62   endmac
01E4             63   
                 64   LCD_Display_BCD mac
                 65   	push ar0
                 66   	mov r0, %0
                 67   	lcall ?Display_BCD
                 68   	pop ar0
                 69   endmac
01E4             70   
                 71   LCD_Display_NUM mac
                 72   	push ar0
                 73   	mov r0, %0
                 74   	lcall ?Display_NUM
                 75   	pop ar0
                 76   endmac
01E4             77   
                 78   LCD_Display_Char mac
                 79   	push acc
                 80   	mov a, %0
                 81   	lcall ?LCD_WriteData
                 82   	pop acc
                 83   endmac
01E4             84   
                 85   Wait_Milli_Seconds mac
                 86   	push AR2
                 87   	mov R2, %0
                 88   	lcall ?Wait_Milli_Seconds
                 89   	pop AR2
                 90   endmac
01E4             91   
01E4             92   ;---------------------------------;
01E4             93   ;         Interface Macros        ;
01E4             94   ;---------------------------------;
01E4             95   
                 96   LCD_INTERFACE_WELCOME mac
                 97   	LCD_Set_Cursor(1,1)
                 98   	LCD_Send_Constant_String(#WELCOME1)
                 99   	LCD_Set_Cursor(2,1)
                100   	LCD_Send_Constant_String(#WELCOME2)
                101   endmac
01E4            102   
                103   LCD_INTERFACE_MAIN mac
                104   	LCD_Set_Cursor(1,1)
                105   	LCD_Send_Constant_String(#MAIN_FACE1)
                106   	LCD_Set_Cursor(2,1)
                107   	LCD_Send_Constant_String(#MAIN_FACE2)
                108   	LCD_Set_Cursor(1,15); Profile number
                109   	LCD_Display_BCD(Profile_Num)
                110   endmac
01E4            112   
                113   LCD_INTERFACE_SETTING mac
                114   	LCD_Set_Cursor(1,1)
                115   	LCD_Send_Constant_String(#SETTING1)
                116   	LCD_Set_Cursor(2,1)
                117   	LCD_Send_Constant_String(#SETTING2)
                118   endmac
01E4            119   
                120   LCD_INTERFACE_MODIFY1 mac
                121   	LCD_Set_Cursor(1,1)
                122   	LCD_Send_Constant_String(#MODIFY1)
                123   	LCD_Set_Cursor(2,1)
                124   	LCD_Send_Constant_String(#MODIFY_DOWN)
                125   endmac
01E4            126   
                127   LCD_INTERFACE_MODIFY2 mac
                128   	LCD_Set_Cursor(1,1)
                129   	LCD_Send_Constant_String(#MODIFY2)
                130   	LCD_Set_Cursor(2,1)
                131   	LCD_Send_Constant_String(#MODIFY_DOWN)
                132   endmac
01E4            133   
                134   LCD_INTERFACE_MODIFY3 mac
                135   	LCD_Set_Cursor(1,1)
                136   	LCD_Send_Constant_String(#MODIFY3)
                137   	LCD_Set_Cursor(2,1)
                138   	LCD_Send_Constant_String(#MODIFY_DOWN)
                139   endmac
01E4            140   
                141   LCD_INTERFACE_MODIFY4 mac
                142   	LCD_Set_Cursor(1,1)
                143   	LCD_Send_Constant_String(#MODIFY4)
                144   	LCD_Set_Cursor(2,1)
                145   	LCD_Send_Constant_String(#MODIFY_DOWN)
                146   endmac
01E4            147   
                148   LCD_INTERFACE_MODIFY5 mac
                149   	LCD_Set_Cursor(1,1)
                150   	LCD_Send_Constant_String(#MODIFY5)
                151   	LCD_Set_Cursor(2,1)
                152   	LCD_Send_Constant_String(#MODIFY_DOWN)
                153   endmac
01E4            154   
                155   LCD_INTERFACE_STEP1 mac
                156   	LCD_Set_Cursor(1,1)
                157   	LCD_Send_Constant_String(#WORKING)
                158   	LCD_Set_Cursor(2,1)
                159   	LCD_Send_Constant_String(#STEP1)
                160   endmac
01E4            161   
                162   LCD_INTERFACE_STEP2 mac
                163   	LCD_Set_Cursor(1,1)
                164   	LCD_Send_Constant_String(#WORKING)
                165   	LCD_Set_Cursor(2,1)
                166   	LCD_Send_Constant_String(#STEP2)
                167   endmac
01E4            168   
                169   LCD_INTERFACE_STEP3 mac
                170   	LCD_Set_Cursor(1,1)
                171   	LCD_Send_Constant_String(#WORKING)
                172   	LCD_Set_Cursor(2,1)
                173   	LCD_Send_Constant_String(#STEP3)
                174   endmac
01E4            175   
                176   LCD_INTERFACE_STEP4 mac
                177   	LCD_Set_Cursor(1,1)
                178   	LCD_Send_Constant_String(#WORKING)
                179   	LCD_Set_Cursor(2,1)
                180   	LCD_Send_Constant_String(#STEP4)
                181   endmac
01E4            182   
                183   LCD_INTERFACE_STEP5 mac
                184   	LCD_Set_Cursor(1,1)
                185   	LCD_Send_Constant_String(#WORKING)
                186   	LCD_Set_Cursor(2,1)
                187   	LCD_Send_Constant_String(#STEP5)
                188   endmac
01E4            189   
                190   LCD_INTERFACE_STEP6 mac
                191   	LCD_Set_Cursor(1,1)
                192   	LCD_Send_Constant_String(#WORKING)
                193   	LCD_Set_Cursor(2,1)
                194   	LCD_Send_Constant_String(#STEP6)
                195   endmac
01E4            196   
                197   LCD_INTERFACE_WARNING mac
                198   	LCD_Set_Cursor(1,1)
                199   	LCD_Send_Constant_String(#WARNING1)
                200   	LCD_Set_Cursor(2,1)
                201   	LCD_Send_Constant_String(#WARNING2)
                202   endmac
01E4            203   
01E4            204   
01E4            205   Wait10us:
01E4 7812       206       mov R0, #18
01E6 D8FE       207       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
01E8 22         208            ret
01E9            209   ;---------------------------------;
01E9            210   ; Wait 40 microseconds            ;
01E9            211   ;---------------------------------;
01E9            212   Wait40uSec:
01E9 C000       213            push AR0
01EB 784A       214            mov R0, #74
01ED            215   L0: 
01ED D8FE       216            djnz R0, L0 ; 2 cycles->2*271.26ns*74=40us
01EF D000       217            pop AR0
01F1 22         218       ret
01F2            219   
01F2            220   ;---------------------------------;
01F2            221   ; Wait 500 microseconds           ;
01F2            222   ;---------------------------------;
01F2            223   WaitHalfSec:
01F2 7A28       224       mov R2, #40
01F4 79FA       225   H3: mov R1, #250
01F6 78B8       226   H2: mov R0, #184
01F8 D8FE       227   H1: djnz R0, H1 ; 2 machine cycles-> 2*0.27126us*184=100us
01FA D9FA       228       djnz R1, H2 ; 100us*250=0.025s
01FC DAF6       229       djnz R2, H3 ; 0.025s*20=0.5s
01FE 22         230       ret
01FF            231   
01FF            232   ;---------------------------------;
01FF            233   ; Wait 'R2' milliseconds          ;
01FF            234   ;---------------------------------;
01FF            235   ?Wait_Milli_Seconds:
01FF C000       236            push AR0
0201 C001       237            push AR1
0203 790A       238   L3: mov R1, #10
0205 78B8       239   L2: mov R0, #184
0207 D8FE       240   L1: djnz R0, L1 ; 2 cycles->2*271.26ns*184=100us
0209 D9FA       241       djnz R1, L2 ; 100us*10=1ms
020B DAF6       242       djnz R2, L3 ; number of millisecons to wait passed in R2
020D D001       243       pop AR1
020F D000       244       pop AR0
0211 22         245       ret
0212            246            
0212            247   ;---------------------------------;
0212            248   ; Toggles the 'E' pin in the LCD  ;
0212            249   ;---------------------------------;
0212            250   LCD_pulse:
0212 D283       251            setb LCD_E
0214 1201E9     252            lcall Wait40uSec
0217 C283       253            clr LCD_E
0219 1201E9     254       lcall Wait40uSec
021C 22         255       ret
021D            256   
021D            257   ;---------------------------------;
021D            258   ; Writes acc to LCD in 4-bit mode ;
021D            259   ;---------------------------------;
021D            260   LCD_byte:
021D            261            ; Write high 4 bits first
021D A2E7       262            mov c, ACC.7
021F 92B0       263            mov LCD_D7, c
0221 A2E6       264            mov c, ACC.6
0223 9287       265            mov LCD_D6, c
0225 A2E5       266            mov c, ACC.5
0227 9286       267            mov LCD_D5, c
0229 A2E4       268            mov c, ACC.4
022B 9285       269            mov LCD_D4, c
022D 120212     270       lcall LCD_pulse
0230            271            ; Write low 4 bits next
0230 A2E3       272            mov c, ACC.3
0232 92B0       273            mov LCD_D7, c
0234 A2E2       274            mov c, ACC.2
0236 9287       275            mov LCD_D6, c
0238 A2E1       276            mov c, ACC.1
023A 9286       277            mov LCD_D5, c
023C A2E0       278            mov c, ACC.0
023E 9285       279            mov LCD_D4, c
0240 120212     280       lcall LCD_pulse
0243 22         281            ret
0244            282   
0244            283   ;---------------------------------;
0244            284   ; Write data to LCD               ;
0244            285   ;---------------------------------;
0244            286   ?LCD_WriteData:
0244 D281       287            setb LCD_RS
0246 02021D     288            ljmp LCD_byte
0249            289   
0249            290   ;---------------------------------;
0249            291   ; Write command to LCD            ;
0249            292   ;---------------------------------;
0249            293   ?LCD_WriteCommand:
0249 C281       294            clr LCD_RS
024B 02021D     295            ljmp LCD_byte
024E            296   
024E            297   ;---------------------------------;
024E            298   ; Configure LCD in 4-bit mode     ;
024E            299   ;---------------------------------;
024E            300   LCD_4BIT:
024E C283       301            clr LCD_E   ; Resting state of LCD's enable pin is zero
0250 C282       302            clr LCD_RW  ; We are only writing to the LCD in this program
0252            303            
0252            304            ; After power on, let the LCD start up before initializing
0252 C002       305            push AR2
0254 7A28       305            mov R2, #40
0256 1201FF     305            lcall ?Wait_Milli_Seconds
0259 D002       305            pop AR2
025B            306            
025B            307            ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
025B 7433       308            mov a, #0x33
025D 120249     308            lcall ?LCD_WriteCommand
0260 7433       309            mov a, #0x33
0262 120249     309            lcall ?LCD_WriteCommand
0265 7432       310            mov a, #0x32
0267 120249     310            lcall ?LCD_WriteCommand ; change to 4-bit mode
026A            311   
026A            312            ; Configure the LCD
026A 7428       313            mov a, #0x28
026C 120249     313            lcall ?LCD_WriteCommand
026F 740C       314            mov a, #0x0c
0271 120249     314            lcall ?LCD_WriteCommand
0274 7401       315            mov a, #0x01
0276 120249     315            lcall ?LCD_WriteCommand ;  Clear screen command (takes some time)
0279            316   
0279            317       ;Wait for the clear screen command to finish.
0279 C002       318            push AR2
027B 7A02       318            mov R2, #2
027D 1201FF     318            lcall ?Wait_Milli_Seconds
0280 D002       318            pop AR2
0282 22         319       ret
0283            320   
0283            321   ;---------------------------------;
0283            322   ; Send a constant string to LCD   ;
0283            323   ;---------------------------------;
0283            324   ?Send_Constant_String:
0283 E4         325       clr a
0284 93         326       movc a, @a+dptr
0285 6006       327       jz ?Send_Constant_String_Done
0287 120244     328       lcall ?LCD_WriteData
028A A3         329       inc dptr
028B 80F6       330       sjmp ?Send_Constant_String
028D            331   ?Send_Constant_String_Done:
028D 22         332       ret  
028E            333   
028E            334   ;---------------------------------;
028E            335   ; Set LCD cursor at row, column   ;
028E            336   ;---------------------------------;
028E            337   ?Set_Cursor_2:
028E 4440       338            orl a, #01000000B
0290            339   ?Set_Cursor_1:
0290 4480       340            orl a, #10000000B
0292 020249     341            ljmp ?LCD_WriteCommand ; Select column and row
0295            342   
0295            343   ;---------------------------------;
0295            344   ; Display a BCD number in the LCD ;
0295            345   ;---------------------------------;
0295            346   ?Display_BCD:
0295 C0E0       347            push acc
0297            348            ; Write most significant digit
0297 E8         349            mov a, r0
0298 C4         350            swap a
0299 540F       351            anl a, #0fh
029B 4430       352            orl a, #30h
029D 120244     353            lcall ?LCD_WriteData
02A0            354            ; write least significant digit
02A0 E8         355            mov a, r0
02A1 540F       356            anl a, #0fh
02A3 4430       357            orl a, #30h
02A5 120244     358            lcall ?LCD_WriteData
02A8 D0E0       359            pop acc
02AA 22         360            ret
02AB            361   
02AB            362   ?Display_NUM:
02AB C0E0       363            push acc
02AD E8         364            mov a, R0
02AE 540F       365            anl a, #0fh
02B0 4430       366            orl a, #30h
02B2 120244     367            lcall ?LCD_WriteData
02B5 D0E0       368            pop acc
02B7            369   
02B7 22         370            ret
                 -1       $include(math32.inc)
                559   $LIST
                 -1       $include(LPC9351.inc)
0528              1   cseg
0528              2   
0528              3   ;---------------------------------;
0528              4   ;           Basic Macros          ;
0528              5   ;---------------------------------;
                  6   Ports_Initialize mac
                  7       lcall Ports_Init
                  8   endmac
0528              9   
                 10   Clock_Double mac
                 11       lcall _Clock_Double
                 12   endmac
0528             13   
                 14   ADC_Initialize mac
                 15       lcall InitADC
                 16   endmac
0528             17   
0528             18   ;---------------------------------;
0528             19   ;            Functions            ;
0528             20   ;---------------------------------;
0528             21   _Clock_Double:
0528 C0E0        22       push acc
052A 90FFDE      23       mov dptr, #CLKCON
052D E0          24       movx a, @dptr
052E 4408        25       orl a, #00001000B ; double the clock speed to 14.746MHz
0530 F0          26       movx @dptr,a
0531 D0E0        27       pop acc
0533 22          28       ret
0534             29   
0534             30   ;---------------------------------;
0534             31   ; Initial configuration of ports. ;
0534             32   ; After reset the default for the ;
0534             33   ; pins is 'Open Drain'.  This     ;
0534             34   ; routine changes them pins to    ;
0534             35   ; Quasi-bidirectional like in the ;
0534             36   ; original 8051.                  ;
0534             37   ; Notice that P1.2 and P1.3 are   ;
0534             38   ; always 'Open Drain'. If those   ;
0534             39   ; pins are to be used as output   ;
0534             40   ; they need a pull-up resistor.   ;
0534             41   ;---------------------------------;
0534             42   Ports_Init:
0534             43       ; Configure all the ports in bidirectional mode:
0534 758400      44       mov P0M1, #00H
0537 758500      45       mov P0M2, #00H
053A 759100      46       mov P1M1, #00H
053D 759200      47       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
0540 75A400      48       mov P2M1, #00H
0543 75A500      49       mov P2M2, #00H
0546 75B100      50       mov P3M1, #00H
0549 75B200      51       mov P3M2, #00H
054C 22          52            ret
054D             53   
054D             54   InitADC:
054D             55            ; ADC0_0 is connected to P1.7
054D             56            ; ADC0_1 is connected to P0.0
054D             57            ; ADC0_2 is connected to P2.1
054D             58            ; ADC0_3 is connected to P2.0
054D             59       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
054D 438401      60       orl P0M1, #00000001b
0550 5385FE      61       anl P0M2, #11111110b
0553 439180      62       orl P1M1, #10000000b
0556 53927F      63       anl P1M2, #01111111b
0559 43A403      64       orl P2M1, #00000011b
055C 53A5FC      65       anl P2M2, #11111100b
055F             66            ; Setup ADC0
055F D2C2        67            setb BURST0 ; Autoscan continuos conversion mode
0561 75A120      68            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
0564 75A30F      69            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
0567 758E05      70            mov     ADCON0,#0x05 ; Enable the converter and start immediately
056A             71            ; Wait for first conversion to complete
056A             72   InitADC_L1:
056A E58E        73            mov     a,ADCON0
056C 30E3FB      74            jnb     acc.3,InitADC_L1
056F 22          75            ret
                 76   DO_NOTHING mac
                 77   	NOP
                 78   endmac
                 78   $LIST
                 -1       $include(serial.inc)
0570              1   CSEG
0570              2   
0570              3   
0570              4   ;---------------------------------;
0570              5   ;           Basic Macros          ;
0570              6   ;---------------------------------;
                  7   Serial_Initialize mac
                  8   	;Serial_Initialize()
                  9       lcall _Serial_Initialize
                 10   endmac
0570             11   
                 12   Serial_Send_Char mac
                 13       mov a, %0
                 14       lcall putchar
                 15   endmac
0570             16   
                 17   Serial_Read_Char mac
                 18   	;Serial_Read_Char(direct)
                 19       lcall getchar
                 20       mov %0, a
                 21   endmac
0570             22   
                 23   Serial_Send_Newline mac
                 24   	lcall Send_NewLine
                 25   endmac
0570             26   
                 27   Serial_Send_BCD mac
                 28   	push ar0
                 29   	mov r0, %0
                 30   	lcall ?Send_BCD
                 31   	pop ar0
                 32   endmac
0570             33   
                 34   Serial_Send_Constant_String mac
                 35   	mov dptr, %0
                 36   	lcall SendString
                 37   endmac
0570             38   
0570             39   ;---------------------------------;
0570             40   ; Initialize the serial port      ;
0570             41   ;---------------------------------;
0570             42   _Serial_Initialize:
0570 75BD00      43            mov     BRGCON,#0x00
0573 75BF00      44            mov     BRGR1,#high(BRVAL)
0576 75BE30      45            mov     BRGR0,#low(BRVAL)
0579 75BD03      46            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
057C 759852      47            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
057F             48            ; Make sure that TXD(P1.0) and RXD(P1.1) are configured as bidrectional I/O
057F 5391FC      49            anl     P1M1,#11111100B
0582 5392FC      50            anl     P1M2,#11111100B
0585 22          51            ret
0586             52   
0586             53   ;---------------------------------;
0586             54   ; Sends a byte via serial port    ;
0586             55   ;---------------------------------;
0586             56   putchar:
0586 109902      57            jbc     TI,putchar_L1
0589 80FB        58            sjmp putchar
058B             59   putchar_L1:
058B F599        60            mov     SBUF,a
058D 22          61            ret
058E             62   
058E             63   SendString:
058E E4          64       clr a
058F 93          65       movc a, @a+dptr
0590 6006        66       jz SendString_L1
0592 120586      67       lcall putchar
0595 A3          68       inc dptr
0596 80F6        69       sjmp SendString  
0598             70   SendString_L1:
0598 22          71            ret
0599             72   
0599             73   ;---------------------------------;
0599             74   ; Send a BCD number to PuTTY      ;
0599             75   ;---------------------------------;
0599             76   ?Send_BCD:
0599 C0E0        77            push acc
059B             78            ; Write most significant digit
059B E8          79            mov a, r0
059C C4          80            swap a
059D 540F        81            anl a, #0fh
059F 4430        82            orl a, #30h
05A1 120586      83            lcall putchar
05A4             84            ; write least significant digit
05A4 E8          85            mov a, r0
05A5 540F        86            anl a, #0fh
05A7 4430        87            orl a, #30h
05A9 120586      88            lcall putchar
05AC D0E0        89            pop acc
05AE 22          90            ret
05AF             91   
05AF             92   Send_NewLine:
05AF 740D        93            mov a, #'\r'
05B1 120586      94            lcall putchar
05B4 740A        95            mov a, #'\n'
05B6 120586      96            lcall putchar   
05B9 22          97            ret
05BA             98   
05BA             99   
05BA            100   SendTemp0:
05BA 90005E     101            mov dptr, #HexAscii 
05BD            102            
05BD            103            
05BD            104            
05BD E565       105            mov a, bcd+3
05BF C4         106            swap a
05C0 540F       107            anl a, #0xf
05C2 93         108            movc a, @a+dptr
05C3 120586     109            lcall putchar
05C6 E565       110            mov a, bcd+3
05C8 540F       111            anl a, #0xf
05CA 93         112            movc a, @a+dptr
05CB 120586     113            lcall putchar
05CE            114            
05CE E564       115            mov a, bcd+2
05D0 C4         116            swap a
05D1 540F       117            anl a, #0xf
05D3 93         118            movc a, @a+dptr
05D4 120586     119            lcall putchar
05D7 E564       120            mov a, bcd+2
05D9 540F       121            anl a, #0xf
05DB 93         122            movc a, @a+dptr
05DC 120586     123            lcall putchar
05DF            124            
05DF E563       125            mov a, bcd+1
05E1 C4         126            swap a
05E2 540F       127            anl a, #0xf
05E4 93         128            movc a, @a+dptr
05E5 120586     129            lcall putchar
05E8 E563       130            mov a, bcd+1
05EA 540F       131            anl a, #0xf
05EC 93         132            movc a, @a+dptr
05ED 120586     133            lcall putchar
05F0            134   
05F0            135   
05F0 E562       136            mov a, bcd+0
05F2 C4         137            swap a
05F3 540F       138            anl a, #0xf
05F5 93         139            movc a, @a+dptr
05F6 120586     140            lcall putchar
05F9 E562       141            mov a, bcd+0
05FB 540F       142            anl a, #0xf
05FD 93         143            movc a, @a+dptr
05FE 120586     144            lcall putchar
0601 22         145            ret
                 -1       $include(temperature.inc)
0602              1   cseg
0602              2   
0602              3   
0602              4   
0602              5   Read_Oven_Temp:
0602              6            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
0602 755A00       7            mov x+0, #low (0 % 0x10000) 
0605 755B00       7            mov x+1, #high(0 % 0x10000) 
0608 755C00       7            mov x+2, #low (0 / 0x10000) 
060B 755D00       7            mov x+3, #high(0 / 0x10000) 
060E 85C75A       8       mov x+0, ad0dat2
0611 7FFF         9            mov R7, #255
0613 1201E4      10       lcall Wait10us
0616             11   accumulate_loop0:
0616 85C75E      12       mov y+0, ad0dat2
0619 755F00      13       mov y+1, #0
061C 756000      14       mov y+2, #0
061F 756100      15       mov y+3, #0
0622 12037D      16       lcall add32
0625 1201E4      17       lcall Wait10us
0628 DFEC        18            djnz R7, accumulate_loop0
062A             19            
062A             20            ; Now divide by 16 (2^4)
062A 755E10      21            mov y+0, #low (16 % 0x10000) 
062D 755F00      21            mov y+1, #high(16 % 0x10000) 
0630 756000      21            mov y+2, #low (16 / 0x10000) 
0633 756100      21            mov y+3, #high(16 / 0x10000) 
0636 1204BF      22            lcall div32
0639             23            ; x has now the 12-bit representation of the temperature
0639             24            
0639             25            ; Convert to temperature (C)
0639 755EE8      26            mov y+0, #low (33000 % 0x10000) 
063C 755F80      26            mov y+1, #high(33000 % 0x10000) 
063F 756000      26            mov y+2, #low (33000 / 0x10000) 
0642 756100      26            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
0645 120432      27            lcall mul32
0648 755E00      28            mov y+0, #low (((1<<12)) % 0x10000) 
064B 755F10      28            mov y+1, #high(((1<<12)) % 0x10000) 
064E 756000      28            mov y+2, #low (((1<<12)) / 0x10000) 
0651 756100      28            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
0654 1204BF      29            lcall div32
0657 755E3C      30            mov y+0, #low (60 % 0x10000) 
065A 755F00      30            mov y+1, #high(60 % 0x10000) 
065D 756000      30            mov y+2, #low (60 / 0x10000) 
0660 756100      30            mov y+3, #high(60 / 0x10000) 
0663 12039E      31            lcall sub32
0666             32   
0666             33            ;mov32(Current_Oven_Volt,x); store the hex value of voltage
0666             34            
0666 755E0E      35            mov y+0, #low (7438 % 0x10000) 
0669 755F1D      35            mov y+1, #high(7438 % 0x10000) 
066C 756000      35            mov y+2, #low (7438 / 0x10000) 
066F 756100      35            mov y+3, #high(7438 / 0x10000) 
0672 120432      36            lcall mul32
0675 755E10      37            mov y+0, #low (10000 % 0x10000) 
0678 755F27      37            mov y+1, #high(10000 % 0x10000) 
067B 756000      37            mov y+2, #low (10000 / 0x10000) 
067E 756100      37            mov y+3, #high(10000 / 0x10000) 
0681 1204BF      38            lcall div32
0684 755EB4      39            mov y+0, #low (180 % 0x10000) 
0687 755F00      39            mov y+1, #high(180 % 0x10000) 
068A 756000      39            mov y+2, #low (180 / 0x10000) 
068D 756100      39            mov y+3, #high(180 / 0x10000) 
0690 12039E      40            lcall sub32
0693             41            ;now we got the relateive temp number in hex
0693             42   
0693             43       ;mov(dst, src)
0693 854D61      43            mov y+3, Current_Room_Temp+3
0696 854C60      43       mov y+2, Current_Room_Temp+2
0699 854B5F      43       mov y+1, Current_Room_Temp+1
069C 854A5E      43       mov y,   Current_Room_Temp
069F 12037D      44            lcall add32
06A2             45            ;now we got the true value of oven in hex
06A2 1202B8      46            lcall hex2bcd
06A5 1205BA      47            lcall SendTemp0; send to PC through serial port
06A8 1205AF      48            lcall Send_Newline
06AB 755E64      49            mov y+0, #low (100 % 0x10000) 
06AE 755F00      49            mov y+1, #high(100 % 0x10000) 
06B1 756000      49            mov y+2, #low (100 / 0x10000) 
06B4 756100      49            mov y+3, #high(100 / 0x10000) 
06B7 1204BF      50            lcall div32;divide by 100 to get the value in integer
06BA             51            ; now x contains the value in hex
06BA 755E5E      52            mov y+0, #low (350 % 0x10000) 
06BD 755F01      52            mov y+1, #high(350 % 0x10000) 
06C0 756000      52            mov y+2, #low (350 / 0x10000) 
06C3 756100      52            mov y+3, #high(350 / 0x10000) 
06C6 1203C0      53            lcall x_lt_y
06C9 200203      54            jb mf, Temp_OK
06CC             55            ;if not ok
06CC 020602      56            ljmp Read_Oven_Temp;re-read the value
06CF             57   
06CF             58            Temp_OK:
06CF             59       ;mov(dst, src)
06CF 855D51      59            mov Current_Oven_Temp+3, x+3
06D2 855C50      59       mov Current_Oven_Temp+2, x+2
06D5 855B4F      59       mov Current_Oven_Temp+1, x+1
06D8 855A4E      59       mov Current_Oven_Temp,   x
06DB 22          60            ret
06DC             61   
06DC             62   Read_Room_Temp:
06DC             63            
06DC 755A00      64            mov x+0, #low (0 % 0x10000) 
06DF 755B00      64            mov x+1, #high(0 % 0x10000) 
06E2 755C00      64            mov x+2, #low (0 / 0x10000) 
06E5 755D00      64            mov x+3, #high(0 / 0x10000) 
06E8 85C75A      65       mov x+0, ad0dat2
06EB 7FFF        66            mov R7, #255
06ED 1201E4      67       lcall Wait10us
06F0             68       
06F0             69   accumulate_loop1:
06F0 85F45E      70       mov y+0, ad0dat3
06F3 755F00      71       mov y+1, #0
06F6 756000      72       mov y+2, #0
06F9 756100      73       mov y+3, #0
06FC 12037D      74       lcall add32
06FF 1201E4      75       lcall Wait10us
0702 DFEC        76            djnz R7, accumulate_loop1
0704             77            
0704             78            ; Now divide by 16 (2^4)
0704 755E10      79            mov y+0, #low (16 % 0x10000) 
0707 755F00      79            mov y+1, #high(16 % 0x10000) 
070A 756000      79            mov y+2, #low (16 / 0x10000) 
070D 756100      79            mov y+3, #high(16 / 0x10000) 
0710 1204BF      80            lcall div32
0713             81            ; x has now the 12-bit representation of the temperature
0713             82            
0713             83            ; Convert to temperature (C)
0713 755EE8      84            mov y+0, #low (33000 % 0x10000) 
0716 755F80      84            mov y+1, #high(33000 % 0x10000) 
0719 756000      84            mov y+2, #low (33000 / 0x10000) 
071C 756100      84            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
071F 120432      85            lcall mul32
0722 755E00      86            mov y+0, #low (((1<<12)) % 0x10000) 
0725 755F10      86            mov y+1, #high(((1<<12)) % 0x10000) 
0728 756000      86            mov y+2, #low (((1<<12)) / 0x10000) 
072B 756100      86            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
072E 1204BF      87            lcall div32
0731 755E3C      88            mov y+0, #low (60 % 0x10000) 
0734 755F00      88            mov y+1, #high(60 % 0x10000) 
0737 756000      88            mov y+2, #low (60 / 0x10000) 
073A 756100      88            mov y+3, #high(60 / 0x10000) 
073D 12039E      89            lcall sub32
0740             90            
0740             91            ;now we got the voltage value
0740             92            ;mov32(Current_Room_Volt,x)
0740             93            
0740 755EA4      94            mov y+0, #low (27300 % 0x10000) 
0743 755F6A      94            mov y+1, #high(27300 % 0x10000) 
0746 756000      94            mov y+2, #low (27300 / 0x10000) 
0749 756100      94            mov y+3, #high(27300 / 0x10000) 
074C 12039E      95            lcall sub32
074F 755EF4      96            mov y+0, #low (500 % 0x10000) 
0752 755F01      96            mov y+1, #high(500 % 0x10000) 
0755 756000      96            mov y+2, #low (500 / 0x10000) 
0758 756100      96            mov y+3, #high(500 / 0x10000) 
075B 12039E      97            lcall sub32
075E             98            ;now we got the temperature
075E             99       ;mov(dst, src)
075E 855D4D      99            mov Current_Room_Temp+3, x+3
0761 855C4C      99       mov Current_Room_Temp+2, x+2
0764 855B4B      99       mov Current_Room_Temp+1, x+1
0767 855A4A      99       mov Current_Room_Temp,   x
076A            100            
076A 22         101            ret
                 -1       $include(speaker.inc)
                458   $LIST
                 -1       $include(key.inc)
0BAF              1   cseg
0BAF              2   
0BAF              3   
0BAF              4   ;-----------------------;
0BAF              5   ;    Functions Define   ;
0BAF              6   ;-----------------------; 
0BAF              7   
0BAF              8   ;Key_Read: if read, return the button readed.
0BAF              9   ;Return 0 if read nothing.
0BAF             10   Key_Read:
0BAF C0E0        11       push acc
0BB1 120BC0      12       lcall ADC_to_PB; read lower 8 button
0BB4 E570        13       mov a, keyin
0BB6 B40001      14       cjne a, #0, Continue_Read_Key; if nothing, continue read key
0BB9 22          15       ret; if read successfully, return
0BBA             16       Continue_Read_Key:
0BBA 120C11      17       lcall ADC_to_PB_1
0BBD D0E0        18            pop acc
0BBF 22          19       ret
0BC0             20   
0BC0             21   ADC_to_PB:
0BC0 757000      22       mov keyin, #0;clear input
0BC3             23            ; Check PB6
0BC3 C3          24            clr c
0BC4 E5C5        25            mov a, AD0DAT0
0BC6 94A3        26            subb a, #(173-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
0BC8 4004        27            jc ADC_to_PB_L6
0BCA 757007      28       mov keyin, #7
0BCD 22          29            ret
0BCE             30   ADC_to_PB_L6:
0BCE             31            ; Check PB5
0BCE C3          32            clr c
0BCF E5C5        33            mov a, AD0DAT0; P1.7
0BD1 9491        34            subb a, #(155-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
0BD3 4004        35            jc ADC_to_PB_L5
0BD5 757006      36            mov keyin, #6
0BD8 22          37            ret
0BD9             38   ADC_to_PB_L5:
0BD9             39            ; Check PB4
0BD9 C3          40            clr c
0BDA E5C5        41            mov a, AD0DAT0
0BDC 9478        42            subb a, #(130-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
0BDE 4004        43            jc ADC_to_PB_L4
0BE0 757005      44            mov keyin, #5
0BE3 22          45            ret
0BE4             46   ADC_to_PB_L4:
0BE4             47            ; Check PB3
0BE4 C3          48            clr c
0BE5 E5C5        49            mov a, AD0DAT0
0BE7 9462        50            subb a, #(108-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
0BE9 4004        51            jc ADC_to_PB_L3
0BEB 757004      52            mov keyin, #4
0BEE 22          53            ret
0BEF             54   ADC_to_PB_L3:
0BEF             55            ; Check PB2
0BEF C3          56            clr c
0BF0 E5C5        57            mov a, AD0DAT0
0BF2 9444        58            subb a, #(78-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
0BF4 4004        59            jc ADC_to_PB_L2
0BF6 757003      60            mov keyin, #3
0BF9 22          61            ret
0BFA             62   ADC_to_PB_L2:
0BFA             63            ; Check PB1
0BFA C3          64            clr c
0BFB E5C5        65            mov a, AD0DAT0
0BFD 9433        66            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
0BFF 4004        67            jc ADC_to_PB_L1
0C01 757002      68            mov keyin, #2
0C04 22          69            ret
0C05             70   ADC_to_PB_L1:
0C05             71            ; Check PB1
0C05 C3          72            clr c
0C06 E5C5        73            mov a, AD0DAT0
0C08 9413        74            subb a, #(29-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
0C0A 4004        75            jc ADC_to_PB_L0
0C0C 757001      76            mov keyin, #1
0C0F 22          77            ret
0C10             78   ADC_to_PB_L0:
0C10             79            ; No pusbutton pressed  
0C10 22          80            ret
0C11             81   
0C11             82   ADC_to_PB_1:
0C11             83            ; Check PB6
0C11 C3          84            clr c
0C12 E5C6        85            mov a, AD0DAT1
0C14 94C4        86            subb a, #(206-10) ; 2.8V=216*(3.3/255); the -10 is to prevent false readings
0C16 4004        87            jc ADC_to_PB_L6_2
0C18 75700E      88            mov keyin, #14
0C1B 22          89            ret
0C1C             90   ADC_to_PB_L6_2:
0C1C             91            ; Check PB5
0C1C C3          92            clr c
0C1D E5C6        93            mov a, AD0DAT1
0C1F 94AF        94            subb a, #(185-10) ; 2.4V=185*(3.3/255); the -10 is to prevent false readings
0C21 4004        95            jc ADC_to_PB_L5_2
0C23 75700D      96            mov keyin, #13
0C26 22          97            ret
0C27             98   ADC_to_PB_L5_2:
0C27             99            ; Check PB4
0C27 C3         100            clr c
0C28 E5C6       101            mov a, AD0DAT1
0C2A 9490       102            subb a, #(154-10) ; 2.0V=154*(3.3/255); the -10 is to prevent false readings
0C2C 4004       103            jc ADC_to_PB_L4_2
0C2E 75700C     104            mov keyin, #12
0C31 22         105            ret
0C32            106   ADC_to_PB_L4_2:
0C32            107            ; Check PB3
0C32 C3         108            clr c
0C33 E5C6       109            mov a, AD0DAT1
0C35 9471       110            subb a, #(123-10) ; 1.6V=123*(3.3/255); the -10 is to prevent false readings
0C37 4004       111            jc ADC_to_PB_L3_2
0C39 75700B     112            mov keyin, #11
0C3C 22         113            ret
0C3D            114   ADC_to_PB_L3_2:
0C3D            115            ; Check PB2
0C3D C3         116            clr c
0C3E E5C6       117            mov a, AD0DAT1
0C40 9452       118            subb a, #(92-10) ; 1.2V=92*(3.3/255); the -10 is to prevent false readings
0C42 4004       119            jc ADC_to_PB_L2_2
0C44 75700A     120            mov keyin, #10
0C47 22         121            ret
0C48            122   ADC_to_PB_L2_2:
0C48            123            ; Check PB1
0C48 C3         124            clr c
0C49 E5C6       125            mov a, AD0DAT1
0C4B 9433       126            subb a, #(61-10) ; 0.8V=61*(3.3/255); the -10 is to prevent false readings
0C4D 4004       127            jc ADC_to_PB_L1_2
0C4F 757009     128            mov keyin, #9
0C52 22         129            ret
0C53            130   ADC_to_PB_L1_2:
0C53            131            ; Check PB1
0C53 C3         132            clr c
0C54 E5C6       133            mov a, AD0DAT1
0C56 9414       134            subb a, #(30-10) ; 0.4V=30*(3.3/255); the -10 is to prevent false readings
0C58 4004       135            jc ADC_to_PB_L01
0C5A 757008     136            mov keyin, #8
0C5D 22         137            ret
0C5E            138   ADC_to_PB_L01:
0C5E            139            ; No pusbutton pressed  
0C5E 22         140            ret
0C5F            190   ;$LIST
0C5F            191   
0C5F            192   cseg
0C5F            193   
0C5F            194   MainProgram:
0C5F 75817F     195       mov SP, #0x7F
0C62 120534     196       lcall Ports_Init
0C65 12024E     197            lcall LCD_4BIT
0C68            198            ;Serial_Initialize()
0C68 120570     198       lcall _Serial_Initialize
0C6B 12054D     199       lcall InitADC
0C6E C0E0       200            push acc
0C70 7401       200            mov a, #1
0C72 14         200            dec a
0C73 120290     200            lcall ?Set_Cursor_1 ; Select column and row
0C76 D0E0       200            pop acc
0C78 C083       200            push dph
0C7A C082       200            push dpl
0C7C C0E0       200            push acc
0C7E 90007F     200            mov dptr, #WELCOME1
0C81 120283     200            lcall ?Send_Constant_String
0C84 D0E0       200            pop acc
0C86 D082       200            pop dpl
0C88 D083       200            pop dph
0C8A C0E0       200            push acc
0C8C 7401       200            mov a, #1
0C8E 14         200            dec a
0C8F 12028E     200            lcall ?Set_Cursor_2 ; Select column and row
0C92 D0E0       200            pop acc
0C94 C083       200            push dph
0C96 C082       200            push dpl
0C98 C0E0       200            push acc
0C9A 900090     200            mov dptr, #WELCOME2
0C9D 120283     200            lcall ?Send_Constant_String
0CA0 D0E0       200            pop acc
0CA2 D082       200            pop dpl
0CA4 D083       200            pop dph
0CA6 120D49     201       lcall Data_Initialization
0CA9 1207B3     202       lcall InitDAC
0CAC 12076B     203       lcall CCU_Init
0CAF 1207C3     204            lcall Init_SPI
0CB2 120CEC     205       lcall External_Interrupt0_Init
0CB5 120CEF     206       lcall External_Interrupt1_Init
0CB8 C2C8       207       clr TMOD20 ; Stop CCU timer
0CBA D2AF       208       setb EA   ; Enable Global interrupts
0CBC C2A7       209       clr OVEN
0CBE            210   
0CBE            211   Main_Loop:
0CBE 200101     212       jb Main_State,loop_b
0CC1            213   loop_a:; for FSM0
0CC1 00         214            NOP
0CC2            215   
0CC2            216   
0CC2            217   loop_b: ; for FSM1
0CC2 3004F9     218       jnb half_seconds_flag, Main_Loop
0CC5 C204       219       clr half_seconds_flag
0CC7 0567       220       inc Count5s
0CC9 E567       221       mov a, Count5s
0CCB B40509     222       cjne a, #5, skip3
0CCE 756700     223       mov Count5s, #0
0CD1 300803     224       jnb speak_enable, skip3
0CD4 120DE1     225       lcall Speak_Process
0CD7            226       skip3:
0CD7 80E5       227            sjmp Main_Loop
0CD9            228   
0CD9            229   
0CD9            230   
0CD9            231   
0CD9            232   ;----------------------------;
0CD9            233   ;           Macros           ;
0CD9            234   ;----------------------------; 
                235   Display_3BCD_from_x mac
                236       lcall hex2bcd
                237       ;now the bcd num of time is stored in bcd
                238       LCD_Display_NUM(bcd+1);
                239       LCD_Display_BCD(bcd);
                240   endmac
0CD9            241   
                242   Update_Temp mac
                243       lcall Read_Room_Temp
                244       lcall Read_Oven_Temp
                245       mov32(x, Current_Oven_Temp)
                246       mov32(y, %0)
                247       lcall x_lt_y
                248   endmac
0CD9            250   
0CD9            251   ;----------------------------;
0CD9            252   ;         Functions          ;
0CD9            253   ;----------------------------; 
0CD9            254   
0CD9            255   Timer1_Init:
0CD9 E589       256            mov a, TMOD
0CDB 540F       257            anl a, #0x0f ; Clear the bits for timer 1
0CDD 4410       258            orl a, #0x10 ; Configure timer 1 as 16-timer
0CDF F589       259            mov TMOD, a
0CE1 758D6F     260            mov TH1, #high(TIMER1_RELOAD)
0CE4 758BFF     261            mov TL1, #low(TIMER1_RELOAD)
0CE7            262            ; Enable the timer and interrupts
0CE7 D2AB       263       setb ET1  ; Enable timer 1 interrupt
0CE9 D28E       264       setb TR1  ; Start timer 1
0CEB 22         265            ret
0CEC            266   
0CEC            267   External_Interrupt0_Init:
0CEC            268            ; Enable the external interrupt
0CEC D2A8       269       setb EX0  ; Enable timer 1 interrupt
0CEE 22         270            ret
0CEF            271   
0CEF            272   External_Interrupt1_Init:
0CEF            273            ; Enable the external interrupt
0CEF D2AA       274       setb EX1  ; Enable timer 1 interrupt
0CF1 22         275            ret
0CF2            276   
0CF2            277   Display_Working_Status:
0CF2 C0E0       278            push acc
0CF4 7406       278            mov a, #6
0CF6 14         278            dec a
0CF7 120290     278            lcall ?Set_Cursor_1 ; Select column and row
0CFA D0E0       278            pop acc
0CFC            279       ;mov(dst, src)
0CFC 85515D     279            mov x+3, Current_Oven_Temp+3
0CFF 85505C     279       mov x+2, Current_Oven_Temp+2
0D02 854F5B     279       mov x+1, Current_Oven_Temp+1
0D05 854E5A     279       mov x,   Current_Oven_Temp
0D08 1202B8     280       lcall hex2bcd
0D0B            280       ;now the bcd num of time is stored in bcd
0D0B C000       280            push ar0
0D0D A863       280            mov r0, bcd+1
0D0F 1202AB     280            lcall ?Display_NUM
0D12 D000       280            pop ar0;
0D14 C000       280            push ar0
0D16 A862       280            mov r0, bcd
0D18 120295     280            lcall ?Display_BCD
0D1B D000       280            pop ar0;
0D1D            281   
0D1D C0E0       282            push acc
0D1F 740E       282            mov a, #14
0D21 14         282            dec a
0D22 120290     282            lcall ?Set_Cursor_1 ; Select column and row
0D25 D0E0       282            pop acc
0D27 755D00     283       mov x+3, #0
0D2A 755C00     284       mov x+2, #0
0D2D 755B00     285       mov x+1, #0
0D30 85315A     286       mov x, Time_Global
0D33 1202B8     287       lcall hex2bcd
0D36            287       ;now the bcd num of time is stored in bcd
0D36 C000       287            push ar0
0D38 A863       287            mov r0, bcd+1
0D3A 1202AB     287            lcall ?Display_NUM
0D3D D000       287            pop ar0;
0D3F C000       287            push ar0
0D41 A862       287            mov r0, bcd
0D43 120295     287            lcall ?Display_BCD
0D46 D000       287            pop ar0;
0D48 22         288       ret
0D49            289   
0D49            290   Data_Initialization:
0D49 753100     291       mov Time_Global, #0x00
0D4C 753900     292       mov TEMP_SOAK+3, #0x00
0D4F 753800     293       mov TEMP_SOAK+2, #0x00
0D52 753700     294       mov TEMP_SOAK+1, #0x00
0D55 753696     295       mov TEMP_SOAK, #150
0D58 754100     296       mov TEMP_RFLW+3, #0
0D5B 754000     297       mov TEMP_RFLW+2, #0
0D5E 753F00     298       mov TEMP_RFLW+1, #0
0D61 753ED9     299       mov TEMP_RFLW, #217
0D64 753D00     300       mov TIME_SOAK+3, #0
0D67 753C00     301       mov TIME_SOAK+2, #0
0D6A 753B00     302       mov TIME_SOAK+1, #0
0D6D 753A3C     303       mov TIME_SOAK, #60
0D70 754500     304       mov TIME_RFLW+3, #0
0D73 754400     305       mov TIME_RFLW+2, #0
0D76 754300     306       mov TIME_RFLW+1, #0
0D79 75424B     307       mov TIME_RFLW, #75
0D7C 754900     308       mov TEMP_SAFE+3, #0
0D7F 754800     309       mov TEMP_SAFE+2, #0
0D82 754700     310       mov TEMP_SAFE+1, #0
0D85 75463C     311       mov TEMP_SAFE, #60
0D88 753300     312       mov FSM0_State, #0
0D8B 753400     313       mov FSM1_State, #0
0D8E 756B00     314       mov number, #0x0 ;;not needed
0D91 756E00     315       mov individual_offest, #0x0
0D94 756700     316       mov Count5s, #0x00
0D97 756F00     317       mov speak_state, #0x00
0D9A            318       
0D9A C296       319       clr LED
0D9C C208       320       clr speak_enable
0D9E C203       321       clr enable_time_global
0DA0 C205       322       clr nodigit
0DA2 C206       323            clr skiphundred
0DA4 C207       324            clr skiptenth
0DA6 C201       325       clr Main_State
0DA8            326   
0DA8 C0E0       327            push acc
0DAA 7401       327            mov a, #1
0DAC 14         327            dec a
0DAD 120290     327            lcall ?Set_Cursor_1 ; Select column and row
0DB0 D0E0       327            pop acc
0DB2 C083       327            push dph
0DB4 C082       327            push dpl
0DB6 C0E0       327            push acc
0DB8 90007F     327            mov dptr, #WELCOME1
0DBB 120283     327            lcall ?Send_Constant_String
0DBE D0E0       327            pop acc
0DC0 D082       327            pop dpl
0DC2 D083       327            pop dph
0DC4 C0E0       327            push acc
0DC6 7401       327            mov a, #1
0DC8 14         327            dec a
0DC9 12028E     327            lcall ?Set_Cursor_2 ; Select column and row
0DCC D0E0       327            pop acc
0DCE C083       327            push dph
0DD0 C082       327            push dpl
0DD2 C0E0       327            push acc
0DD4 900090     327            mov dptr, #WELCOME2
0DD7 120283     327            lcall ?Send_Constant_String
0DDA D0E0       327            pop acc
0DDC D082       327            pop dpl
0DDE D083       327            pop dph
0DE0 22         328       ret
0DE1            329   
0DE1            330   Speak_Process:
0DE1            331       
0DE1 120A6D     332       lcall current_temp_is
0DE4 854E6B     333       mov number, Current_Oven_Temp+0
0DE7 120A50     334       lcall playnumbers
0DEA 120A8C     335       lcall degree
0DED 120AAB     336       lcall celsius
0DF0 22         337       ret
0DF1            338   
0DF1            339   ;----------------------------;
0DF1            340   ;     Interrupt Services     ;
0DF1            341   ;----------------------------; 
0DF1            342   Timer1_ISR:
0DF1 758D6F     343            mov TH1, #high(TIMER1_RELOAD)
0DF4 758BFF     344            mov TL1, #low(TIMER1_RELOAD)
0DF7 B2A6       345            cpl P2.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 10 ms pulse.
0DF9            346            
0DF9            347            ; The two registers used in the ISR must be saved in the stack
0DF9 C0E0       348            push acc
0DFB C0D0       349            push psw
0DFD            350            
0DFD            351            ; Increment the 8-bit 10-mili-second counter
0DFD 0530       352            inc Count10ms
0DFF            353   
0DFF            354   Inc_Done:
0DFF            355            ; Check if half second has passed
0DFF E530       356            mov a, Count10ms
0E01 B4640F     357            cjne a, #100, Timer1_ISR_done ; Warning: this instruction changes the carry flag!
0E04            358            
0E04            359            ; 500 milliseconds have passed.  Set a flag so the main program knows
0E04 D204       360            setb half_seconds_flag ; Let the main program know half second had passed
0E06            361       
0E06 300302     362       jnb enable_time_global, skip1
0E09 0531       363       inc Time_Global
0E0B            364            skip1:
0E0B 753000     365       mov Count10ms, #0
0E0E            366   
0E0E B296       367       cpl LED
0E10 120E5B     368       lcall FSM1;call FSM1 here
0E13            369   
0E13            370   Timer1_ISR_done:
0E13 D0D0       371            pop psw
0E15 D0E0       372            pop acc
0E17 32         373            reti
0E18            374   
0E18            375   EI0_ISR:
0E18 C288       376       clr IT0
0E1A 120ACA     377       lcall current_process_is
0E1D 120AE9     378       lcall ramp_to_soak
0E20 120CD9     379       lcall Timer1_Init
0E23 32         380       reti
0E24            381   
0E24            382   EI1_ISR:
0E24 C28A       383       clr IT1
0E26 C28E       384       clr TR1; disable  timer 1
0E28 120D49     385       lcall Data_Initialization
0E2B 32         386       reti
0E2C            387   
0E2C            388   ;---------------------------------;
0E2C            389   ;      Finite State Machines      ;
0E2C            390   ;---------------------------------;
0E2C            391   FSM0:
0E2C C0E0       392       push acc
0E2E 120BAF     393       lcall Key_Read
0E31 E533       394       mov a, FSM0_State
0E33 755A00     395            mov x+0, #low (0 % 0x10000) 
0E36 755B00     395            mov x+1, #high(0 % 0x10000) 
0E39 755C00     395            mov x+2, #low (0 / 0x10000) 
0E3C 755D00     395            mov x+3, #high(0 / 0x10000) 
0E3F 85705A     396       mov x, keyin
0E42 1202B8     397       lcall hex2bcd
0E45 C0E0       398            push acc
0E47 740A       398            mov a, #10
0E49 14         398            dec a
0E4A 120290     398            lcall ?Set_Cursor_1 ; Select column and row
0E4D D0E0       398            pop acc
0E4F C000       399            push ar0
0E51 A862       399            mov r0, bcd
0E53 120295     399            lcall ?Display_BCD
0E56 D000       399            pop ar0
0E58 D0E0       400       pop acc
0E5A 22         401   ret
0E5B            402   
0E5B            403   
0E5B            404       ;---------------------------------;
0E5B            405       ; FSM1 using Timer Interrupt      ;
0E5B            406       ;---------------------------------;
0E5B            407       ;update status and send data to LCD and PC every one/half seconds
0E5B            408   FSM1:
0E5B E534       409       mov a, FSM1_State
0E5D            410       FSM1_State0:
0E5D B40002     411           cjne a, #0, JUMP_FSM1_State1
0E60 8003       412           sjmp Start_FSM1_State0
0E62            413           JUMP_FSM1_State1:
0E62 020F25     414           ljmp FSM1_State1
0E65            415           
0E65            416           Start_FSM1_State0:
0E65 D203       417           setb enable_time_global
0E67 D208       418           setb speak_enable
0E69 D2A7       419           setb OVEN; turn oven on
0E6B 1206DC     420       lcall Read_Room_Temp
0E6E 120602     420       lcall Read_Oven_Temp
0E71            420   
0E71            420       ;mov(dst, src)
0E71 85515D     420            mov x+3, Current_Oven_Temp+3
0E74 85505C     420       mov x+2, Current_Oven_Temp+2
0E77 854F5B     420       mov x+1, Current_Oven_Temp+1
0E7A 854E5A     420       mov x,   Current_Oven_Temp
0E7D            420       ;mov(dst, src)
0E7D 853961     420            mov y+3, TEMP_SOAK+3
0E80 853860     420       mov y+2, TEMP_SOAK+2
0E83 85375F     420       mov y+1, TEMP_SOAK+1
0E86 85365E     420       mov y,   TEMP_SOAK
0E89            420   
0E89 1203C0     420       lcall x_lt_y    ;Read Temperatures
0E8C C0E0       421            push acc
0E8E 7401       421            mov a, #1
0E90 14         421            dec a
0E91 120290     421            lcall ?Set_Cursor_1 ; Select column and row
0E94 D0E0       421            pop acc
0E96 C083       421            push dph
0E98 C082       421            push dpl
0E9A C0E0       421            push acc
0E9C 90014B     421            mov dptr, #WORKING
0E9F 120283     421            lcall ?Send_Constant_String
0EA2 D0E0       421            pop acc
0EA4 D082       421            pop dpl
0EA6 D083       421            pop dph
0EA8 C0E0       421            push acc
0EAA 7401       421            mov a, #1
0EAC 14         421            dec a
0EAD 12028E     421            lcall ?Set_Cursor_2 ; Select column and row
0EB0 D0E0       421            pop acc
0EB2 C083       421            push dph
0EB4 C082       421            push dpl
0EB6 C0E0       421            push acc
0EB8 90015C     421            mov dptr, #STEP1
0EBB 120283     421            lcall ?Send_Constant_String
0EBE D0E0       421            pop acc
0EC0 D082       421            pop dpl
0EC2 D083       421            pop dph;display interface
0EC4 120CF2     422           lcall Display_Working_Status
0EC7 C0E0       423            push acc
0EC9 7406       423            mov a, #6
0ECB 14         423            dec a
0ECC 12028E     423            lcall ?Set_Cursor_2 ; Select column and row
0ECF D0E0       423            pop acc
0ED1            424       ;mov(dst, src)
0ED1 85395D     424            mov x+3, TEMP_SOAK+3
0ED4 85385C     424       mov x+2, TEMP_SOAK+2
0ED7 85375B     424       mov x+1, TEMP_SOAK+1
0EDA 85365A     424       mov x,   TEMP_SOAK
0EDD 1202B8     425       lcall hex2bcd
0EE0            425       ;now the bcd num of time is stored in bcd
0EE0 C000       425            push ar0
0EE2 A863       425            mov r0, bcd+1
0EE4 1202AB     425            lcall ?Display_NUM
0EE7 D000       425            pop ar0;
0EE9 C000       425            push ar0
0EEB A862       425            mov r0, bcd
0EED 120295     425            lcall ?Display_BCD
0EF0 D000       425            pop ar0;
0EF2            426   
0EF2 200207     427           jb mf, FSM1_State0_Error_Check;check Error and continue if smaller than set time
0EF5            428           ;if temp greater
0EF5 0534       429           inc FSM1_State; go to next state            
0EF7 853A32     430           mov Time_Counter, TIME_SOAK; move the TIME_SOAK in counter and count down
0EFA 8026       431           sjmp FSM1_State0_Done
0EFC            432   
0EFC            433           FSM1_State0_Error_Check:
0EFC E531       434           mov a, Time_Global
0EFE B43C21     435           cjne a, #QUITTIME, FSM1_State0_Done; not time, done
0F01            436           ;if time reached, check temp
0F01            437       ;mov(dst, src)
0F01 85515D     437            mov x+3, Current_Oven_Temp+3
0F04 85505C     437       mov x+2, Current_Oven_Temp+2
0F07 854F5B     437       mov x+1, Current_Oven_Temp+1
0F0A 854E5A     437       mov x,   Current_Oven_Temp;move current oven temp in x
0F0D 756100     438           mov y+3, #0
0F10 756000     439           mov y+2, #0
0F13 755F00     440           mov y+1, #0
0F16 755E32     441           mov y, #QUITTEMP
0F19 1203C0     442           lcall x_lt_y; check if current oven temp is smaller than quittemp
0F1C            443   
0F1C 300203     444           jnb mf, FSM1_State0_Done; the oven is working properly
0F1F            445           ;if not working right
0F1F 0211FD     446           ljmp FSM1_WARNING
0F22            447   
0F22            448   
0F22            449   
0F22            450           FSM1_State0_Done:
0F22 02123C     451               ljmp FSM1_DONE
0F25            452   
0F25            453   
0F25            454       FSM1_State1:
0F25 B40102     455           cjne a, #1, JUMP_FSM1_State2
0F28 8003       456               sjmp Start_FSM1_State1
0F2A            457           JUMP_FSM1_State2:
0F2A 020FCB     458               ljmp FSM1_State2
0F2D            459           
0F2D            460           Start_FSM1_State1:
0F2D D53205     461           djnz Time_Counter, FSM1_State1_Continue; decrement every 1 second
0F30            462           ;time over, change state
0F30 0534       463           inc FSM1_State; increment states
0F32 020FC8     464           ljmp FSM1_State1_Done
0F35            465   
0F35            466           FSM1_State1_Continue:
0F35            467           ;next: check temp
0F35            468           ;read temp and compare
0F35 1206DC     469       lcall Read_Room_Temp
0F38 120602     469       lcall Read_Oven_Temp
0F3B            469   
0F3B            469       ;mov(dst, src)
0F3B 85515D     469            mov x+3, Current_Oven_Temp+3
0F3E 85505C     469       mov x+2, Current_Oven_Temp+2
0F41 854F5B     469       mov x+1, Current_Oven_Temp+1
0F44 854E5A     469       mov x,   Current_Oven_Temp
0F47            469       ;mov(dst, src)
0F47 853961     469            mov y+3, TEMP_SOAK+3
0F4A 853860     469       mov y+2, TEMP_SOAK+2
0F4D 85375F     469       mov y+1, TEMP_SOAK+1
0F50 85365E     469       mov y,   TEMP_SOAK
0F53            469   
0F53 1203C0     469       lcall x_lt_y   ;Update current temp info
0F56 C0E0       470            push acc
0F58 7401       470            mov a, #1
0F5A 14         470            dec a
0F5B 120290     470            lcall ?Set_Cursor_1 ; Select column and row
0F5E D0E0       470            pop acc
0F60 C083       470            push dph
0F62 C082       470            push dpl
0F64 C0E0       470            push acc
0F66 90014B     470            mov dptr, #WORKING
0F69 120283     470            lcall ?Send_Constant_String
0F6C D0E0       470            pop acc
0F6E D082       470            pop dpl
0F70 D083       470            pop dph
0F72 C0E0       470            push acc
0F74 7401       470            mov a, #1
0F76 14         470            dec a
0F77 12028E     470            lcall ?Set_Cursor_2 ; Select column and row
0F7A D0E0       470            pop acc
0F7C C083       470            push dph
0F7E C082       470            push dpl
0F80 C0E0       470            push acc
0F82 90016D     470            mov dptr, #STEP2
0F85 120283     470            lcall ?Send_Constant_String
0F88 D0E0       470            pop acc
0F8A D082       470            pop dpl
0F8C D083       470            pop dph
0F8E 120CF2     471           lcall Display_Working_Status; update time and temp on lcd
0F91            472           ;if temp is lower than expected, jump to ON
0F91 C0E0       473            push acc
0F93 7405       473            mov a, #5
0F95 14         473            dec a
0F96 12028E     473            lcall ?Set_Cursor_2 ; Select column and row
0F99 D0E0       473            pop acc
0F9B 755A00     474            mov x+0, #low (0 % 0x10000) 
0F9E 755B00     474            mov x+1, #high(0 % 0x10000) 
0FA1 755C00     474            mov x+2, #low (0 / 0x10000) 
0FA4 755D00     474            mov x+3, #high(0 / 0x10000) 
0FA7 85325A     475           mov x, Time_Counter
0FAA 1202B8     476       lcall hex2bcd
0FAD            476       ;now the bcd num of time is stored in bcd
0FAD C000       476            push ar0
0FAF A863       476            mov r0, bcd+1
0FB1 1202AB     476            lcall ?Display_NUM
0FB4 D000       476            pop ar0;
0FB6 C000       476            push ar0
0FB8 A862       476            mov r0, bcd
0FBA 120295     476            lcall ?Display_BCD
0FBD D000       476            pop ar0;
0FBF            477   
0FBF 200204     478           jb mf, FSM1_State1_ON
0FC2            479           ;if temp is higher, close oven
0FC2 C2A7       480           clr OVEN 
0FC4 8002       481           sjmp FSM1_State1_Done
0FC6            482   
0FC6            483           FSM1_State1_ON:
0FC6 D2A7       484           setb OVEN   ;if temp is lower, turn on oven
0FC8            485           FSM1_State1_Done:
0FC8 02123C     486               ljmp FSM1_DONE
0FCB            487   
0FCB            488       FSM1_State2: ;temp ramp up until TEMP_RFLW
0FCB B40202     489           cjne a, #2, JUMP_FSM1_State3
0FCE 8003       490               sjmp Start_FSM1_State2
0FD0            491           JUMP_FSM1_State3:
0FD0 02106A     492               ljmp FSM1_State3
0FD3            493   
0FD3            494           Start_FSM1_State2:
0FD3 D2A7       495           setb OVEN; turn on oven
0FD5            496   
0FD5            497           ;read temperature
0FD5 1206DC     498       lcall Read_Room_Temp
0FD8 120602     498       lcall Read_Oven_Temp
0FDB            498   
0FDB            498       ;mov(dst, src)
0FDB 85515D     498            mov x+3, Current_Oven_Temp+3
0FDE 85505C     498       mov x+2, Current_Oven_Temp+2
0FE1 854F5B     498       mov x+1, Current_Oven_Temp+1
0FE4 854E5A     498       mov x,   Current_Oven_Temp
0FE7            498       ;mov(dst, src)
0FE7 854161     498            mov y+3, TEMP_RFLW+3
0FEA 854060     498       mov y+2, TEMP_RFLW+2
0FED 853F5F     498       mov y+1, TEMP_RFLW+1
0FF0 853E5E     498       mov y,   TEMP_RFLW
0FF3            498   
0FF3 1203C0     498       lcall x_lt_y
0FF6 200208     499           jb mf, FSM1_State2_Continue
0FF9            500           ;if temp reached
0FF9 0534       501           inc FSM1_State
0FFB 854232     502           mov Time_Counter, TIME_RFLW
0FFE 02123C     503           ljmp FSM1_DONE
1001            504   
1001            505           FSM1_State2_Continue:
1001 C0E0       506            push acc
1003 7401       506            mov a, #1
1005 14         506            dec a
1006 120290     506            lcall ?Set_Cursor_1 ; Select column and row
1009 D0E0       506            pop acc
100B C083       506            push dph
100D C082       506            push dpl
100F C0E0       506            push acc
1011 90014B     506            mov dptr, #WORKING
1014 120283     506            lcall ?Send_Constant_String
1017 D0E0       506            pop acc
1019 D082       506            pop dpl
101B D083       506            pop dph
101D C0E0       506            push acc
101F 7401       506            mov a, #1
1021 14         506            dec a
1022 12028E     506            lcall ?Set_Cursor_2 ; Select column and row
1025 D0E0       506            pop acc
1027 C083       506            push dph
1029 C082       506            push dpl
102B C0E0       506            push acc
102D 90017E     506            mov dptr, #STEP3
1030 120283     506            lcall ?Send_Constant_String
1033 D0E0       506            pop acc
1035 D082       506            pop dpl
1037 D083       506            pop dph
1039 120CF2     507           lcall Display_Working_Status
103C C0E0       508            push acc
103E 7406       508            mov a, #6
1040 14         508            dec a
1041 12028E     508            lcall ?Set_Cursor_2 ; Select column and row
1044 D0E0       508            pop acc
1046            509       ;mov(dst, src)
1046 85415D     509            mov x+3, TEMP_RFLW+3
1049 85405C     509       mov x+2, TEMP_RFLW+2
104C 853F5B     509       mov x+1, TEMP_RFLW+1
104F 853E5A     509       mov x,   TEMP_RFLW
1052 1202B8     510       lcall hex2bcd
1055            510       ;now the bcd num of time is stored in bcd
1055 C000       510            push ar0
1057 A863       510            mov r0, bcd+1
1059 1202AB     510            lcall ?Display_NUM
105C D000       510            pop ar0;
105E C000       510            push ar0
1060 A862       510            mov r0, bcd
1062 120295     510            lcall ?Display_BCD
1065 D000       510            pop ar0;
1067            511   
1067            512           FSM1_State2_Done:
1067 02123C     513               ljmp FSM1_DONE
106A            514           
106A            515            FSM1_State3: ; keep temp at TEMP_RFLW for a few time
106A B40302     516           cjne a, #3, JUMP_FSM1_State4
106D 8003       517               sjmp Start_FSM1_State3
106F            518           JUMP_FSM1_State4:
106F 021110     519               ljmp FSM1_State4
1072            520           
1072            521           Start_FSM1_State3:
1072 D53205     522           djnz Time_Counter, FSM1_State3_Continue
1075            523           ;if time's up
1075 0534       524           inc FSM1_State
1077 02110D     525           ljmp FSM1_State3_Done
107A            526   
107A            527           FSM1_State3_Continue:
107A C0E0       528            push acc
107C 7401       528            mov a, #1
107E 14         528            dec a
107F 120290     528            lcall ?Set_Cursor_1 ; Select column and row
1082 D0E0       528            pop acc
1084 C083       528            push dph
1086 C082       528            push dpl
1088 C0E0       528            push acc
108A 90014B     528            mov dptr, #WORKING
108D 120283     528            lcall ?Send_Constant_String
1090 D0E0       528            pop acc
1092 D082       528            pop dpl
1094 D083       528            pop dph
1096 C0E0       528            push acc
1098 7401       528            mov a, #1
109A 14         528            dec a
109B 12028E     528            lcall ?Set_Cursor_2 ; Select column and row
109E D0E0       528            pop acc
10A0 C083       528            push dph
10A2 C082       528            push dpl
10A4 C0E0       528            push acc
10A6 90018F     528            mov dptr, #STEP4
10A9 120283     528            lcall ?Send_Constant_String
10AC D0E0       528            pop acc
10AE D082       528            pop dpl
10B0 D083       528            pop dph
10B2 120CF2     529           lcall Display_Working_Status
10B5 1206DC     530       lcall Read_Room_Temp
10B8 120602     530       lcall Read_Oven_Temp
10BB            530   
10BB            530       ;mov(dst, src)
10BB 85515D     530            mov x+3, Current_Oven_Temp+3
10BE 85505C     530       mov x+2, Current_Oven_Temp+2
10C1 854F5B     530       mov x+1, Current_Oven_Temp+1
10C4 854E5A     530       mov x,   Current_Oven_Temp
10C7            530       ;mov(dst, src)
10C7 854161     530            mov y+3, TEMP_RFLW+3
10CA 854060     530       mov y+2, TEMP_RFLW+2
10CD 853F5F     530       mov y+1, TEMP_RFLW+1
10D0 853E5E     530       mov y,   TEMP_RFLW
10D3            530   
10D3 1203C0     530       lcall x_lt_y; update temp info, set or clr mf flag
10D6 C0E0       531            push acc
10D8 7405       531            mov a, #5
10DA 14         531            dec a
10DB 12028E     531            lcall ?Set_Cursor_2 ; Select column and row
10DE D0E0       531            pop acc
10E0 755A00     532            mov x+0, #low (0 % 0x10000) 
10E3 755B00     532            mov x+1, #high(0 % 0x10000) 
10E6 755C00     532            mov x+2, #low (0 / 0x10000) 
10E9 755D00     532            mov x+3, #high(0 / 0x10000) 
10EC 85325A     533           mov x, Time_Counter
10EF 1202B8     534       lcall hex2bcd
10F2            534       ;now the bcd num of time is stored in bcd
10F2 C000       534            push ar0
10F4 A863       534            mov r0, bcd+1
10F6 1202AB     534            lcall ?Display_NUM
10F9 D000       534            pop ar0;
10FB C000       534            push ar0
10FD A862       534            mov r0, bcd
10FF 120295     534            lcall ?Display_BCD
1102 D000       534            pop ar0;
1104            535   
1104            536           ;if temp is lower than expected, jump to ON
1104 200204     537           jb mf, FSM1_State3_ON
1107            538           ;if temp is higher, close oven
1107 C2A7       539           clr OVEN 
1109 8002       540           sjmp FSM1_State3_Done
110B            541   
110B            542           FSM1_State3_ON:
110B D2A7       543           setb OVEN   ;if temp is lower, turn on oven
110D            544           FSM1_State3_Done:
110D 02123C     545               ljmp FSM1_DONE
1110            546           
1110            547   
1110            548       
1110            549       FSM1_State4:; cool down until safe temp
1110 B40402     550           cjne a, #4, JUMP_FSM1_State5
1113 8003       551               sjmp Start_FSM1_State4
1115            552           JUMP_FSM1_State5:
1115 0211B2     553               ljmp FSM1_State5
1118            554           
1118            555           Start_FSM1_State4:
1118 C2A7       556           clr OVEN
111A            557           ;read temperature
111A 1206DC     558       lcall Read_Room_Temp
111D 120602     558       lcall Read_Oven_Temp
1120            558   
1120            558       ;mov(dst, src)
1120 85515D     558            mov x+3, Current_Oven_Temp+3
1123 85505C     558       mov x+2, Current_Oven_Temp+2
1126 854F5B     558       mov x+1, Current_Oven_Temp+1
1129 854E5A     558       mov x,   Current_Oven_Temp
112C            558       ;mov(dst, src)
112C 854961     558            mov y+3, TEMP_SAFE+3
112F 854860     558       mov y+2, TEMP_SAFE+2
1132 85475F     558       mov y+1, TEMP_SAFE+1
1135 85465E     558       mov y,   TEMP_SAFE
1138            558   
1138 1203C0     558       lcall x_lt_y
113B            559           ;if temp is smaller than TEMP_SAFE, go state 5
113B 300205     560           jnb mf, FSM1_State4_Continue
113E            561           ;if temp is smaller than expected
113E 0534       562           inc FSM1_State
1140 753200     563           mov Time_Counter, #0
1143            564   
1143            565           FSM1_State4_Continue:
1143 C0E0       566            push acc
1145 7401       566            mov a, #1
1147 14         566            dec a
1148 120290     566            lcall ?Set_Cursor_1 ; Select column and row
114B D0E0       566            pop acc
114D C083       566            push dph
114F C082       566            push dpl
1151 C0E0       566            push acc
1153 90014B     566            mov dptr, #WORKING
1156 120283     566            lcall ?Send_Constant_String
1159 D0E0       566            pop acc
115B D082       566            pop dpl
115D D083       566            pop dph
115F C0E0       566            push acc
1161 7401       566            mov a, #1
1163 14         566            dec a
1164 12028E     566            lcall ?Set_Cursor_2 ; Select column and row
1167 D0E0       566            pop acc
1169 C083       566            push dph
116B C082       566            push dpl
116D C0E0       566            push acc
116F 9001A0     566            mov dptr, #STEP5
1172 120283     566            lcall ?Send_Constant_String
1175 D0E0       566            pop acc
1177 D082       566            pop dpl
1179 D083       566            pop dph
117B 120CF2     567           lcall Display_Working_Status
117E C0E0       568            push acc
1180 7405       568            mov a, #5
1182 14         568            dec a
1183 12028E     568            lcall ?Set_Cursor_2 ; Select column and row
1186 D0E0       568            pop acc
1188 755A00     569            mov x+0, #low (0 % 0x10000) 
118B 755B00     569            mov x+1, #high(0 % 0x10000) 
118E 755C00     569            mov x+2, #low (0 / 0x10000) 
1191 755D00     569            mov x+3, #high(0 / 0x10000) 
1194 85465A     570           mov x, TEMP_SAFE
1197 1202B8     571           lcall hex2bcd
119A 1202B8     572       lcall hex2bcd
119D            572       ;now the bcd num of time is stored in bcd
119D C000       572            push ar0
119F A863       572            mov r0, bcd+1
11A1 1202AB     572            lcall ?Display_NUM
11A4 D000       572            pop ar0;
11A6 C000       572            push ar0
11A8 A862       572            mov r0, bcd
11AA 120295     572            lcall ?Display_BCD
11AD D000       572            pop ar0;
11AF            573   
11AF            574           FSM1_State4_Done:
11AF 02123C     575               ljmp FSM1_DONE
11B2            576   
11B2            577       FSM1_State5: ; already cool done, display something, play some music
11B2 B40502     578            cjne a, #5, JUMP_FSM1_DOne
11B5 8003       579               sjmp Start_FSM1_State5
11B7            580           JUMP_FSM1_Done:
11B7 02123C     581               ljmp FSM1_Done
11BA            582               
11BA            583           Start_FSM1_State5:
11BA C2A7       584           clr OVEN; double check oven is not on
11BC C203       585           clr enable_time_global; stop counting
11BE C208       586           clr speak_enable
11C0 C0E0       587            push acc
11C2 7401       587            mov a, #1
11C4 14         587            dec a
11C5 120290     587            lcall ?Set_Cursor_1 ; Select column and row
11C8 D0E0       587            pop acc
11CA C083       587            push dph
11CC C082       587            push dpl
11CE C0E0       587            push acc
11D0 90014B     587            mov dptr, #WORKING
11D3 120283     587            lcall ?Send_Constant_String
11D6 D0E0       587            pop acc
11D8 D082       587            pop dpl
11DA D083       587            pop dph
11DC C0E0       587            push acc
11DE 7401       587            mov a, #1
11E0 14         587            dec a
11E1 12028E     587            lcall ?Set_Cursor_2 ; Select column and row
11E4 D0E0       587            pop acc
11E6 C083       587            push dph
11E8 C082       587            push dpl
11EA C0E0       587            push acc
11EC 9001B1     587            mov dptr, #STEP6
11EF 120283     587            lcall ?Send_Constant_String
11F2 D0E0       587            pop acc
11F4 D082       587            pop dpl
11F6 D083       587            pop dph
11F8 120CF2     588           lcall Display_Working_Status
11FB 803F       589           sjmp FSM1_Done
11FD            590   
11FD            591   
11FD            592       FSM1_WARNING:
11FD C2A7       593           clr OVEN
11FF C0E0       594            push acc
1201 7401       594            mov a, #1
1203 14         594            dec a
1204 120290     594            lcall ?Set_Cursor_1 ; Select column and row
1207 D0E0       594            pop acc
1209 C083       594            push dph
120B C082       594            push dpl
120D C0E0       594            push acc
120F 9001C2     594            mov dptr, #WARNING1
1212 120283     594            lcall ?Send_Constant_String
1215 D0E0       594            pop acc
1217 D082       594            pop dpl
1219 D083       594            pop dph
121B C0E0       594            push acc
121D 7401       594            mov a, #1
121F 14         594            dec a
1220 12028E     594            lcall ?Set_Cursor_2 ; Select column and row
1223 D0E0       594            pop acc
1225 C083       594            push dph
1227 C082       594            push dpl
1229 C0E0       594            push acc
122B 9001D3     594            mov dptr, #WARNING2
122E 120283     594            lcall ?Send_Constant_String
1231 D0E0       594            pop acc
1233 D082       594            pop dpl
1235 D083       594            pop dph
1237 C208       595           clr speak_enable
1239 753406     596           mov FSM1_State, #6
123C            597   
123C            598       FSM1_DONE:
123C 22         599       ret
123D            600   
123D            601   EN
