                  2   $LIST
0000              4   
0000              5   ;-------------------;
0000              6   ;    Const Define   ;
0000              7   ;-------------------; 
0000              8   XTAL EQU 7373000
0000              9   BAUD EQU 115200
0000             10   BRVAL EQU ((XTAL/BAUD)-16)
0000             11   
0000             12   CCU_RATE      EQU 22050      ; 100Hz, for an overflow rate of 10ms
0000             13   CCU_RELOAD    EQU ((65536-((XTAL/(2*CCU_RATE)))))
0000             14   
0000             15   ;TIMER0_RATE   EQU 4096    ; 4096Hz
0000             16   ;TIMER0_RELOAD EQU ((65536-(XTAL/(2*TIMER0_RATE))))
0000             17   TIMER1_RATE   EQU 100     ; 1000Hz, for a timer tick of 1ms
0000             18   TIMER1_RELOAD EQU ((65536-(XTAL/(2*TIMER1_RATE))))
0000             19   QUITTIME      EQU 60
0000             20   QUITTEMP      EQU 50
0000             21   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             22   
0000             23   number_off_set EQU 17200 ;the distance between each number
0000             24   ;number start at ff
0000             25   
0000             26   ;starting addressed of different sound tracks
0000             27   decimal_start  EQU 360000
0000             28   decimal_off_set EQU 24100
0000             29   decimal_playtime EQU 50000
0000             30   
0000             31   special_dec_start EQU 174000 ;numbers from 10 to 19
0000             32   special_off_set EQU 21500
0000             33   special_playtime EQU 21500;19000
0000             34   
0000             35   hundreds_start EQU 563000
0000             36   hundreds_off_set EQU 37000
0000             37   
0000             38   current_temp_is_start EQU 674000
0000             39   current_temp_playtime EQU 35000
0000             40   
0000             41   degree_start EQU 710000
0000             42   degree_playtime EQU 11018
0000             43   
0000             44   celsius_start EQU 732236
0000             45   celsius_playtime EQU 17000
0000             46   
0000             47   current_process_is_start EQU 757000
0000             48   current_process_is_playtime EQU 27000
0000             49            
0000             50   ramp_to_soak_start EQU 790000
0000             51   ramp_to_soak_playtime EQU 25000
0000             52   
0000             53   preheat_and_soak_start EQU 822000
0000             54   preheat_and_soak_playtime EQU 27000
0000             55   
0000             56   ramp_to_peak_start EQU 857000
0000             57   ramp_to_peak_playtime EQU 19000
0000             58   
0000             59   reflow_start EQU 885000
0000             60   reflow_playtime EQU 15000
0000             61   
0000             62   cooling_start EQU 906000
0000             63   cooling_playtime EQU 14000
0000             64   ;-------------------;
0000             65   ;    Ports Define   ;
0000             66   ;-------------------; 
0000             67   ;ADC01 equ P0.0; Read Room Temperature
0000             68   LCD_RS equ P0.1
0000             69   LCD_RW equ P0.2
0000             70   LCD_E  equ P0.3
0000             71   ;Soundout  P0.4
0000             72   LCD_D4 equ P0.5
0000             73   LCD_D5 equ P0.6
0000             74   LCD_D6 equ P0.7
0000             75   LCD_D7 equ P3.0
0000             76   LED    equ P3.1
0000             77   ;          P3.1
0000             78   ;          P1.2
0000             79   Start  equ P1.3
0000             80   Stop   equ P1.4
0000             81   ;          P1.6
0000             82   ;ADC00 equ P1.7; Read Oven Temperature
0000             83   ;ADC03 equ P2.0; Read Keyboard1
0000             84   ;ADC02 equ P2.1; Read Keyboard0
0000             85   ;MOSI  equ P2.2
0000             86   ;MISO  equ P2.3
0000             87   FLASH_CE EQU P2.4
0000             88   ;SPICK equ P2.5
0000             89   ;WAVEOUT   P2.6
0000             90   OVEN   equ P2.7
0000             91   
0000             92   ;------------------------;
0000             93   ;    Interrupt Vectors   ;
0000             94   ;------------------------; 
0000             95   ; Reset vector
0000             96   org 0x0000
0000 020C1D      97       ljmp MainProgram
0003             98   
0003             99   ; External interrupt 0 vector, start
0003            100   org 0x0003
0003 020CCD     101            ljmp EI0_ISR
0006            102   
0006            103   ; Timer/Counter 0 overflow interrupt vector
000B            104   org 0x000B
000B 32         105            reti
000C            106   
000C            107   ; External interrupt 1 vector, stop
0013            108   org 0x0013
0013 020CD6     109            ljmp EI1_ISR
0016            110   
0016            111   ; Timer/Counter 1 overflow interrupt vector
001B            112   org 0x001B
001B 020CA3     113            ljmp Timer1_ISR
001E            114   
001E            115   ; Serial port receive/transmit interrupt vector
0023            116   org 0x0023 
0023 32         117            reti
0024            118   
0024            119   ; CCU interrupt vector
005B            120   org 0x005b 
005B 020764     121            ljmp CCU_ISR
005E            122   
005E            123   ;-----------------------;
005E            124   ;    Variables Define   ;
005E            125   ;-----------------------; 
005E            126   ;Variable_name: ds n
0030            127   dseg at 0x30
0030            128       Count10ms:    ds 1 ; Used to determine when half second has passed
0031            129       Time_Global:  ds 1 ; to store the time of whole process
0032            130       Time_Counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033            131   
0033            132       FSM0_State: ds 1
0034            133       FSM1_State: ds 1
0035            134   
0035            135       Profile_Num: ds 1
0036            136   
0036            137       TEMP_SOAK:  ds 4
003A            138       TIME_SOAK:  ds 4
003E            139       TEMP_RFLW:  ds 4
0042            140       TIME_RFLW:  ds 4
0046            141       TEMP_SAFE:  ds 4
004A            142       Current_Room_Temp: ds 4
004E            143            Current_Oven_Temp: ds 4
0052            144   
0052            145       Cursor:     ds 1
0053            146       NEW_BCD:    ds 3    ; 3 digit BCD used to store current entered number
0056            147       NEW_HEX:    ds 4    ; 32 bit number of new entered number
005A            148       ;for math32.inc
005A            149       x: ds 4
005E            150       y: ds 4
0062            151       bcd: ds 5
0067            152       Count5s: ds 1
0068            153       ;z
0068            154       w:   ds 3 ; 24-bit play counter.  Decremented in CCU ISR.
006B            155            number: ds 1;
006C            156       digits: ds 1;
006D            157            tenth: ds 1;
006E            158            individual_offest: ds 1;
006F            159   
006F            160   
006F            161   ;-------------------;
006F            162   ;    Flags Define   ;
006F            163   ;-------------------; 
006F            164   ;Flag_name: dbit 1
0000            165   bseg
0000            166       FSM0_State_Changed:  dbit 1
0001            167       Main_State:          dbit 1 ; 0 for setting, 1 for reflowing
0002            168       ;for math32.inc
0002            169       mf: dbit 1
0003            170       enable_time_global: dbit 1
0004            171       half_seconds_flag: dbit 1 ; 500ms in double rate mode
0005            172           nodigit: dbit 1 ; if playing from 10 to 19 then we don't need to
0006            173                       ;play the last digit
0006            174            skiphundred: dbit 1
0007            175            skiptenth: dbit 1
0008            176       Speak:     dbit 1
0009            177   ;-----------------------;
0009            178   ;     Include Files     ;
0009            179   ;-----------------------; 
0009            180   ;$NOLIST
                 -1       $include(lcd_4bit.inc) 
005E              1   cseg
005E              2   
005E 30313233     3   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
006E 30313233     4   hex: db '0123456789abcdef',0
     34353637
     38396162
     63646566
     00
007F              5   
007F              6   ;LCD                '1234567890123456'
007F 57454C43     7   WELCOME1:        db 'WELCOME!        '   ,0
     4F4D4521
     20202020
     20202020
     00
0090 53757065     8   WELCOME2:        db 'Super Reflow!   '   ,0
     72205265
     666C6F77
     21202020
     00
00A1 53657474     9   MAIN_FACE1:      db 'Setting: Prof   '   ,0
     696E673A
     2050726F
     66202020
     00
00B2 53746172    10   MAIN_FACE2: db 'Start       Stop'   ,0
     74202020
     20202020
     53746F70
     00
00C3 53544D50    11   SETTING1:        db 'STMP:   STM:   s'   ,0
     3A202020
     53544D3A
     20202073
     00
00D4 52544D50    12   SETTING2:   db 'RTMP:   RTM:   s'   ,0
     3A202020
     52544D3A
     20202073
     00
00E5 4F4C443A    13   MODIFY_DOWN:db 'OLD:    NEW:    '   ,0
     20202020
     4E45573A
     20202020
     00
00F6 4D4F4449    14   MODIFY1:         db 'MODIFY:TEMP_SOAK'   ,0
     46593A54
     454D505F
     534F414B
     00
0107 4D4F4449    15   MODIFY2:         db 'MODIFY:TIME_SOAK'   ,0
     46593A54
     494D455F
     534F414B
     00
0118 4D4F4449    16   MODIFY3:         db 'MODIFY:TEMP_RFLW'   ,0
     46593A54
     454D505F
     52464C57
     00
0129 4D4F4449    17   MODIFY4:         db 'MODIFY:TEMP_SOAK'   ,0
     46593A54
     454D505F
     534F414B
     00
013A 4D4F4449    18   MODIFY5:    db 'MODIFY:TEMP_SOAK'   ,0
     46593A54
     454D505F
     534F414B
     00
014B 54454D50    19   WORKING:    db 'TEMP:   TIME:   '   ,0
     3A202020
     54494D45
     3A202020
     00
015C 53544D50    20   STEP1:           db 'STMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
016D 53544D3A    21   STEP2:      db 'STM:   s SOAKING'   ,0
     20202073
     20534F41
     4B494E47
     00
017E 52544D50    22   STEP3:      db 'RTMP:    RAMPING'   ,0
     3A202020
     2052414D
     50494E47
     00
018F 52544D3A    23   STEP4:      db 'RTM:   s REFLOW '   ,0
     20202073
     20524546
     4C4F5720
     00
01A0 5346543A    24   STEP5:      db 'SFT:     COOLING'   ,0
     20202020
     20434F4F
     4C494E47
     00
01B1 20202020    25   STEP6:      db '         FINISH '   ,0
     20202020
     2046494E
     49534820
     00
01C2 4572726F    26   WARNING1:   db 'Error Warning!  '   ,0
     72205761
     726E696E
     67212020
     00
01D3 54454D50    27   WARNING2:   db 'TEMP Sensing ERR'   ,0
     2053656E
     73696E67
     20455252
     00
01E4             28   ;---------------------------------;
01E4             29   ;           Basic Macros          ;
01E4             30   ;---------------------------------;
                 31   LCD_Initailize mac
                 32   	lcall LCD_4BIT
                 33   endmac
01E4             34   
                 35   LCD_WriteData mac
                 36   	mov a, %0
                 37   	lcall ?LCD_WriteData
                 38   endmac
01E4             39            
                 40   LCD_WriteCommand mac
                 41   	mov a, %0
                 42   	lcall ?LCD_WriteCommand
                 43   endmac
01E4             44   
                 45   LCD_Send_Constant_String mac
                 46   	push dph
                 47   	push dpl
                 48   	push acc
                 49   	mov dptr, %0
                 50   	lcall ?Send_Constant_String
                 51   	pop acc
                 52   	pop dpl
                 53   	pop dph
                 54   endmac
01E4             55   
                 56   LCD_Set_Cursor mac
                 57   	push acc
                 58   	mov a, #%1
                 59   	dec a
                 60   	lcall ?Set_Cursor_%0 ; Select column and row
                 61   	pop acc
                 62   endmac
01E4             63   
                 64   LCD_Display_BCD mac
                 65   	push ar0
                 66   	mov r0, %0
                 67   	lcall ?Display_BCD
                 68   	pop ar0
                 69   endmac
01E4             70   
                 71   LCD_Display_NUM mac
                 72   	push ar0
                 73   	mov r0, %0
                 74   	lcall ?Display_NUM
                 75   	pop ar0
                 76   endmac
01E4             77   
                 78   LCD_Display_Char mac
                 79   	push acc
                 80   	mov a, %0
                 81   	lcall ?LCD_WriteData
                 82   	pop acc
                 83   endmac
01E4             84   
                 85   Wait_Milli_Seconds mac
                 86   	push AR2
                 87   	mov R2, %0
                 88   	lcall ?Wait_Milli_Seconds
                 89   	pop AR2
                 90   endmac
01E4             91   
01E4             92   ;---------------------------------;
01E4             93   ;         Interface Macros        ;
01E4             94   ;---------------------------------;
01E4             95   
                 96   LCD_INTERFACE_WELCOME mac
                 97   	LCD_Set_Cursor(1,1)
                 98   	LCD_Send_Constant_String(#WELCOME1)
                 99   	LCD_Set_Cursor(2,1)
                100   	LCD_Send_Constant_String(#WELCOME2)
                101   endmac
01E4            102   
                103   LCD_INTERFACE_MAIN mac
                104   	LCD_Set_Cursor(1,1)
                105   	LCD_Send_Constant_String(#MAIN_FACE1)
                106   	LCD_Set_Cursor(2,1)
                107   	LCD_Send_Constant_String(#MAIN_FACE2)
                108   	LCD_Set_Cursor(1,15); Profile number
                109   	LCD_Display_BCD(Profile_Num)
                110   endmac
01E4            112   
                113   LCD_INTERFACE_SETTING mac
                114   	LCD_Set_Cursor(1,1)
                115   	LCD_Send_Constant_String(#SETTING1)
                116   	LCD_Set_Cursor(2,1)
                117   	LCD_Send_Constant_String(#SETTING2)
                118   endmac
01E4            119   
                120   LCD_INTERFACE_MODIFY1 mac
                121   	LCD_Set_Cursor(1,1)
                122   	LCD_Send_Constant_String(#MODIFY1)
                123   	LCD_Set_Cursor(2,1)
                124   	LCD_Send_Constant_String(#MODIFY_DOWN)
                125   endmac
01E4            126   
                127   LCD_INTERFACE_MODIFY2 mac
                128   	LCD_Set_Cursor(1,1)
                129   	LCD_Send_Constant_String(#MODIFY2)
                130   	LCD_Set_Cursor(2,1)
                131   	LCD_Send_Constant_String(#MODIFY_DOWN)
                132   endmac
01E4            133   
                134   LCD_INTERFACE_MODIFY3 mac
                135   	LCD_Set_Cursor(1,1)
                136   	LCD_Send_Constant_String(#MODIFY3)
                137   	LCD_Set_Cursor(2,1)
                138   	LCD_Send_Constant_String(#MODIFY_DOWN)
                139   endmac
01E4            140   
                141   LCD_INTERFACE_MODIFY4 mac
                142   	LCD_Set_Cursor(1,1)
                143   	LCD_Send_Constant_String(#MODIFY4)
                144   	LCD_Set_Cursor(2,1)
                145   	LCD_Send_Constant_String(#MODIFY_DOWN)
                146   endmac
01E4            147   
                148   LCD_INTERFACE_MODIFY5 mac
                149   	LCD_Set_Cursor(1,1)
                150   	LCD_Send_Constant_String(#MODIFY5)
                151   	LCD_Set_Cursor(2,1)
                152   	LCD_Send_Constant_String(#MODIFY_DOWN)
                153   endmac
01E4            154   
                155   LCD_INTERFACE_STEP1 mac
                156   	LCD_Set_Cursor(1,1)
                157   	LCD_Send_Constant_String(#WORKING)
                158   	LCD_Set_Cursor(2,1)
                159   	LCD_Send_Constant_String(#STEP1)
                160   endmac
01E4            161   
                162   LCD_INTERFACE_STEP2 mac
                163   	LCD_Set_Cursor(1,1)
                164   	LCD_Send_Constant_String(#WORKING)
                165   	LCD_Set_Cursor(2,1)
                166   	LCD_Send_Constant_String(#STEP2)
                167   endmac
01E4            168   
                169   LCD_INTERFACE_STEP3 mac
                170   	LCD_Set_Cursor(1,1)
                171   	LCD_Send_Constant_String(#WORKING)
                172   	LCD_Set_Cursor(2,1)
                173   	LCD_Send_Constant_String(#STEP3)
                174   endmac
01E4            175   
                176   LCD_INTERFACE_STEP4 mac
                177   	LCD_Set_Cursor(1,1)
                178   	LCD_Send_Constant_String(#WORKING)
                179   	LCD_Set_Cursor(2,1)
                180   	LCD_Send_Constant_String(#STEP4)
                181   endmac
01E4            182   
                183   LCD_INTERFACE_STEP5 mac
                184   	LCD_Set_Cursor(1,1)
                185   	LCD_Send_Constant_String(#WORKING)
                186   	LCD_Set_Cursor(2,1)
                187   	LCD_Send_Constant_String(#STEP5)
                188   endmac
01E4            189   
                190   LCD_INTERFACE_STEP6 mac
                191   	LCD_Set_Cursor(1,1)
                192   	LCD_Send_Constant_String(#WORKING)
                193   	LCD_Set_Cursor(2,1)
                194   	LCD_Send_Constant_String(#STEP6)
                195   endmac
01E4            196   
                197   LCD_INTERFACE_WARNING mac
                198   	LCD_Set_Cursor(1,1)
                199   	LCD_Send_Constant_String(#WARNING1)
                200   	LCD_Set_Cursor(2,1)
                201   	LCD_Send_Constant_String(#WARNING2)
                202   endmac
01E4            203   
01E4            204   
01E4            205   Wait10us:
01E4 7812       206       mov R0, #18
01E6 D8FE       207       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
01E8 22         208            ret
01E9            209   ;---------------------------------;
01E9            210   ; Wait 40 microseconds            ;
01E9            211   ;---------------------------------;
01E9            212   Wait40uSec:
01E9 C000       213            push AR0
01EB 784A       214            mov R0, #74
01ED            215   L0: 
01ED D8FE       216            djnz R0, L0 ; 2 cycles->2*271.26ns*74=40us
01EF D000       217            pop AR0
01F1 22         218       ret
01F2            219   
01F2            220   ;---------------------------------;
01F2            221   ; Wait 500 microseconds           ;
01F2            222   ;---------------------------------;
01F2            223   WaitHalfSec:
01F2 7A28       224       mov R2, #40
01F4 79FA       225   H3: mov R1, #250
01F6 78B8       226   H2: mov R0, #184
01F8 D8FE       227   H1: djnz R0, H1 ; 2 machine cycles-> 2*0.27126us*184=100us
01FA D9FA       228       djnz R1, H2 ; 100us*250=0.025s
01FC DAF6       229       djnz R2, H3 ; 0.025s*20=0.5s
01FE 22         230       ret
01FF            231   
01FF            232   ;---------------------------------;
01FF            233   ; Wait 'R2' milliseconds          ;
01FF            234   ;---------------------------------;
01FF            235   ?Wait_Milli_Seconds:
01FF C000       236            push AR0
0201 C001       237            push AR1
0203 790A       238   L3: mov R1, #10
0205 78B8       239   L2: mov R0, #184
0207 D8FE       240   L1: djnz R0, L1 ; 2 cycles->2*271.26ns*184=100us
0209 D9FA       241       djnz R1, L2 ; 100us*10=1ms
020B DAF6       242       djnz R2, L3 ; number of millisecons to wait passed in R2
020D D001       243       pop AR1
020F D000       244       pop AR0
0211 22         245       ret
0212            246            
0212            247   ;---------------------------------;
0212            248   ; Toggles the 'E' pin in the LCD  ;
0212            249   ;---------------------------------;
0212            250   LCD_pulse:
0212 D283       251            setb LCD_E
0214 1201E9     252            lcall Wait40uSec
0217 C283       253            clr LCD_E
0219 1201E9     254       lcall Wait40uSec
021C 22         255       ret
021D            256   
021D            257   ;---------------------------------;
021D            258   ; Writes acc to LCD in 4-bit mode ;
021D            259   ;---------------------------------;
021D            260   LCD_byte:
021D            261            ; Write high 4 bits first
021D A2E7       262            mov c, ACC.7
021F 92B0       263            mov LCD_D7, c
0221 A2E6       264            mov c, ACC.6
0223 9287       265            mov LCD_D6, c
0225 A2E5       266            mov c, ACC.5
0227 9286       267            mov LCD_D5, c
0229 A2E4       268            mov c, ACC.4
022B 9285       269            mov LCD_D4, c
022D 120212     270       lcall LCD_pulse
0230            271            ; Write low 4 bits next
0230 A2E3       272            mov c, ACC.3
0232 92B0       273            mov LCD_D7, c
0234 A2E2       274            mov c, ACC.2
0236 9287       275            mov LCD_D6, c
0238 A2E1       276            mov c, ACC.1
023A 9286       277            mov LCD_D5, c
023C A2E0       278            mov c, ACC.0
023E 9285       279            mov LCD_D4, c
0240 120212     280       lcall LCD_pulse
0243 22         281            ret
0244            282   
0244            283   ;---------------------------------;
0244            284   ; Write data to LCD               ;
0244            285   ;---------------------------------;
0244            286   ?LCD_WriteData:
0244 D281       287            setb LCD_RS
0246 02021D     288            ljmp LCD_byte
0249            289   
0249            290   ;---------------------------------;
0249            291   ; Write command to LCD            ;
0249            292   ;---------------------------------;
0249            293   ?LCD_WriteCommand:
0249 C281       294            clr LCD_RS
024B 02021D     295            ljmp LCD_byte
024E            296   
024E            297   ;---------------------------------;
024E            298   ; Configure LCD in 4-bit mode     ;
024E            299   ;---------------------------------;
024E            300   LCD_4BIT:
024E C283       301            clr LCD_E   ; Resting state of LCD's enable pin is zero
0250 C282       302            clr LCD_RW  ; We are only writing to the LCD in this program
0252            303            
0252            304            ; After power on, let the LCD start up before initializing
0252 C002       305            push AR2
0254 7A28       305            mov R2, #40
0256 1201FF     305            lcall ?Wait_Milli_Seconds
0259 D002       305            pop AR2
025B            306            
025B            307            ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
025B 7433       308            mov a, #0x33
025D 120249     308            lcall ?LCD_WriteCommand
0260 7433       309            mov a, #0x33
0262 120249     309            lcall ?LCD_WriteCommand
0265 7432       310            mov a, #0x32
0267 120249     310            lcall ?LCD_WriteCommand ; change to 4-bit mode
026A            311   
026A            312            ; Configure the LCD
026A 7428       313            mov a, #0x28
026C 120249     313            lcall ?LCD_WriteCommand
026F 740C       314            mov a, #0x0c
0271 120249     314            lcall ?LCD_WriteCommand
0274 7401       315            mov a, #0x01
0276 120249     315            lcall ?LCD_WriteCommand ;  Clear screen command (takes some time)
0279            316   
0279            317       ;Wait for the clear screen command to finish.
0279 C002       318            push AR2
027B 7A02       318            mov R2, #2
027D 1201FF     318            lcall ?Wait_Milli_Seconds
0280 D002       318            pop AR2
0282 22         319       ret
0283            320   
0283            321   ;---------------------------------;
0283            322   ; Send a constant string to LCD   ;
0283            323   ;---------------------------------;
0283            324   ?Send_Constant_String:
0283 E4         325       clr a
0284 93         326       movc a, @a+dptr
0285 6006       327       jz ?Send_Constant_String_Done
0287 120244     328       lcall ?LCD_WriteData
028A A3         329       inc dptr
028B 80F6       330       sjmp ?Send_Constant_String
028D            331   ?Send_Constant_String_Done:
028D 22         332       ret  
028E            333   
028E            334   ;---------------------------------;
028E            335   ; Set LCD cursor at row, column   ;
028E            336   ;---------------------------------;
028E            337   ?Set_Cursor_2:
028E 4440       338            orl a, #01000000B
0290            339   ?Set_Cursor_1:
0290 4480       340            orl a, #10000000B
0292 020249     341            ljmp ?LCD_WriteCommand ; Select column and row
0295            342   
0295            343   ;---------------------------------;
0295            344   ; Display a BCD number in the LCD ;
0295            345   ;---------------------------------;
0295            346   ?Display_BCD:
0295 C0E0       347            push acc
0297            348            ; Write most significant digit
0297 E8         349            mov a, r0
0298 C4         350            swap a
0299 540F       351            anl a, #0fh
029B 4430       352            orl a, #30h
029D 120244     353            lcall ?LCD_WriteData
02A0            354            ; write least significant digit
02A0 E8         355            mov a, r0
02A1 540F       356            anl a, #0fh
02A3 4430       357            orl a, #30h
02A5 120244     358            lcall ?LCD_WriteData
02A8 D0E0       359            pop acc
02AA 22         360            ret
02AB            361   
02AB            362   ?Display_NUM:
02AB C0E0       363            push acc
02AD E8         364            mov a, R0
02AE 540F       365            anl a, #0fh
02B0 4430       366            orl a, #30h
02B2 120244     367            lcall ?LCD_WriteData
02B5 D0E0       368            pop acc
02B7            369   
02B7 22         370            ret
                 -1       $include(math32.inc)
                559   $LIST
                 -1       $include(LPC9351.inc)
0528              1   cseg
0528              2   
0528              3   ;---------------------------------;
0528              4   ;           Basic Macros          ;
0528              5   ;---------------------------------;
                  6   Ports_Initialize mac
                  7       lcall Ports_Init
                  8   endmac
0528              9   
                 10   Clock_Double mac
                 11       lcall _Clock_Double
                 12   endmac
0528             13   
                 14   ADC_Initialize mac
                 15       lcall InitADC
                 16   endmac
0528             17   
0528             18   ;---------------------------------;
0528             19   ;            Functions            ;
0528             20   ;---------------------------------;
0528             21   _Clock_Double:
0528 C0E0        22       push acc
052A 90FFDE      23       mov dptr, #CLKCON
052D E0          24       movx a, @dptr
052E 4408        25       orl a, #00001000B ; double the clock speed to 14.746MHz
0530 F0          26       movx @dptr,a
0531 D0E0        27       pop acc
0533 22          28       ret
0534             29   
0534             30   ;---------------------------------;
0534             31   ; Initial configuration of ports. ;
0534             32   ; After reset the default for the ;
0534             33   ; pins is 'Open Drain'.  This     ;
0534             34   ; routine changes them pins to    ;
0534             35   ; Quasi-bidirectional like in the ;
0534             36   ; original 8051.                  ;
0534             37   ; Notice that P1.2 and P1.3 are   ;
0534             38   ; always 'Open Drain'. If those   ;
0534             39   ; pins are to be used as output   ;
0534             40   ; they need a pull-up resistor.   ;
0534             41   ;---------------------------------;
0534             42   Ports_Init:
0534             43       ; Configure all the ports in bidirectional mode:
0534 758400      44       mov P0M1, #00H
0537 758500      45       mov P0M2, #00H
053A 759100      46       mov P1M1, #00H
053D 759200      47       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
0540 75A400      48       mov P2M1, #00H
0543 75A500      49       mov P2M2, #00H
0546 75B100      50       mov P3M1, #00H
0549 75B200      51       mov P3M2, #00H
054C 22          52            ret
054D             53   
054D             54   InitADC:
054D             55            ; ADC0_0 is connected to P1.7
054D             56            ; ADC0_1 is connected to P0.0
054D             57            ; ADC0_2 is connected to P2.1
054D             58            ; ADC0_3 is connected to P2.0
054D             59       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
054D 438401      60       orl P0M1, #00000001b
0550 5385FE      61       anl P0M2, #11111110b
0553 439180      62       orl P1M1, #10000000b
0556 53927F      63       anl P1M2, #01111111b
0559 43A403      64       orl P2M1, #00000011b
055C 53A5FC      65       anl P2M2, #11111100b
055F             66            ; Setup ADC0
055F D2C2        67            setb BURST0 ; Autoscan continuos conversion mode
0561 75A120      68            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
0564 75A30F      69            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
0567 758E05      70            mov     ADCON0,#0x05 ; Enable the converter and start immediately
056A             71            ; Wait for first conversion to complete
056A             72   InitADC_L1:
056A E58E        73            mov     a,ADCON0
056C 30E3FB      74            jnb     acc.3,InitADC_L1
056F 22          75            ret
                 76   DO_NOTHING mac
                 77   	NOP
                 78   endmac
                 78   $LIST
                 -1       $include(serial.inc)
0570              1   CSEG
0570              2   
0570              3   
0570              4   ;---------------------------------;
0570              5   ;           Basic Macros          ;
0570              6   ;---------------------------------;
                  7   Serial_Initialize mac
                  8   	;Serial_Initialize()
                  9       lcall _Serial_Initialize
                 10   endmac
0570             11   
                 12   Serial_Send_Char mac
                 13       mov a, %0
                 14       lcall putchar
                 15   endmac
0570             16   
                 17   Serial_Read_Char mac
                 18   	;Serial_Read_Char(direct)
                 19       lcall getchar
                 20       mov %0, a
                 21   endmac
0570             22   
                 23   Serial_Send_Newline mac
                 24   	lcall Send_NewLine
                 25   endmac
0570             26   
                 27   Serial_Send_BCD mac
                 28   	push ar0
                 29   	mov r0, %0
                 30   	lcall ?Send_BCD
                 31   	pop ar0
                 32   endmac
0570             33   
                 34   Serial_Send_Constant_String mac
                 35   	mov dptr, %0
                 36   	lcall SendString
                 37   endmac
0570             38   
0570             39   ;---------------------------------;
0570             40   ; Initialize the serial port      ;
0570             41   ;---------------------------------;
0570             42   _Serial_Initialize:
0570 75BD00      43            mov     BRGCON,#0x00
0573 75BF00      44            mov     BRGR1,#high(BRVAL)
0576 75BE30      45            mov     BRGR0,#low(BRVAL)
0579 75BD03      46            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
057C 759852      47            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
057F             48            ; Make sure that TXD(P1.0) and RXD(P1.1) are configured as bidrectional I/O
057F 5391FC      49            anl     P1M1,#11111100B
0582 5392FC      50            anl     P1M2,#11111100B
0585 22          51            ret
0586             52   
0586             53   ;---------------------------------;
0586             54   ; Sends a byte via serial port    ;
0586             55   ;---------------------------------;
0586             56   putchar:
0586 109902      57            jbc     TI,putchar_L1
0589 80FB        58            sjmp putchar
058B             59   putchar_L1:
058B F599        60            mov     SBUF,a
058D 22          61            ret
058E             62   
058E             63   SendString:
058E E4          64       clr a
058F 93          65       movc a, @a+dptr
0590 6006        66       jz SendString_L1
0592 120586      67       lcall putchar
0595 A3          68       inc dptr
0596 80F6        69       sjmp SendString  
0598             70   SendString_L1:
0598 22          71            ret
0599             72   
0599             73   ;---------------------------------;
0599             74   ; Send a BCD number to PuTTY      ;
0599             75   ;---------------------------------;
0599             76   ?Send_BCD:
0599 C0E0        77            push acc
059B             78            ; Write most significant digit
059B E8          79            mov a, r0
059C C4          80            swap a
059D 540F        81            anl a, #0fh
059F 4430        82            orl a, #30h
05A1 120586      83            lcall putchar
05A4             84            ; write least significant digit
05A4 E8          85            mov a, r0
05A5 540F        86            anl a, #0fh
05A7 4430        87            orl a, #30h
05A9 120586      88            lcall putchar
05AC D0E0        89            pop acc
05AE 22          90            ret
05AF             91   
05AF             92   Send_NewLine:
05AF 740D        93            mov a, #'\r'
05B1 120586      94            lcall putchar
05B4 740A        95            mov a, #'\n'
05B6 120586      96            lcall putchar   
05B9 22          97            ret
05BA             98   
05BA             99   
05BA            100   SendTemp0:
05BA 90005E     101            mov dptr, #HexAscii 
05BD            102            
05BD            103            
05BD            104            
05BD E565       105            mov a, bcd+3
05BF C4         106            swap a
05C0 540F       107            anl a, #0xf
05C2 93         108            movc a, @a+dptr
05C3 120586     109            lcall putchar
05C6 E565       110            mov a, bcd+3
05C8 540F       111            anl a, #0xf
05CA 93         112            movc a, @a+dptr
05CB 120586     113            lcall putchar
05CE            114            
05CE E564       115            mov a, bcd+2
05D0 C4         116            swap a
05D1 540F       117            anl a, #0xf
05D3 93         118            movc a, @a+dptr
05D4 120586     119            lcall putchar
05D7 E564       120            mov a, bcd+2
05D9 540F       121            anl a, #0xf
05DB 93         122            movc a, @a+dptr
05DC 120586     123            lcall putchar
05DF            124            
05DF E563       125            mov a, bcd+1
05E1 C4         126            swap a
05E2 540F       127            anl a, #0xf
05E4 93         128            movc a, @a+dptr
05E5 120586     129            lcall putchar
05E8 E563       130            mov a, bcd+1
05EA 540F       131            anl a, #0xf
05EC 93         132            movc a, @a+dptr
05ED 120586     133            lcall putchar
05F0            134   
05F0            135   
05F0 E562       136            mov a, bcd+0
05F2 C4         137            swap a
05F3 540F       138            anl a, #0xf
05F5 93         139            movc a, @a+dptr
05F6 120586     140            lcall putchar
05F9 E562       141            mov a, bcd+0
05FB 540F       142            anl a, #0xf
05FD 93         143            movc a, @a+dptr
05FE 120586     144            lcall putchar
0601 22         145            ret
                 -1       $include(temperature.inc)
0602              1   cseg
0602              2   
0602              3   
0602              4   
0602              5   Read_Oven_Temp:
0602              6            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
0602 755A00       7            mov x+0, #low (0 % 0x10000) 
0605 755B00       7            mov x+1, #high(0 % 0x10000) 
0608 755C00       7            mov x+2, #low (0 / 0x10000) 
060B 755D00       7            mov x+3, #high(0 / 0x10000) 
060E 85C75A       8       mov x+0, ad0dat2
0611 7FFF         9            mov R7, #255
0613 1201E4      10       lcall Wait10us
0616             11   accumulate_loop0:
0616 85C75E      12       mov y+0, ad0dat2
0619 755F00      13       mov y+1, #0
061C 756000      14       mov y+2, #0
061F 756100      15       mov y+3, #0
0622 12037D      16       lcall add32
0625 1201E4      17       lcall Wait10us
0628 DFEC        18            djnz R7, accumulate_loop0
062A             19            
062A             20            ; Now divide by 16 (2^4)
062A 755E10      21            mov y+0, #low (16 % 0x10000) 
062D 755F00      21            mov y+1, #high(16 % 0x10000) 
0630 756000      21            mov y+2, #low (16 / 0x10000) 
0633 756100      21            mov y+3, #high(16 / 0x10000) 
0636 1204BF      22            lcall div32
0639             23            ; x has now the 12-bit representation of the temperature
0639             24            
0639             25            ; Convert to temperature (C)
0639 755EE8      26            mov y+0, #low (33000 % 0x10000) 
063C 755F80      26            mov y+1, #high(33000 % 0x10000) 
063F 756000      26            mov y+2, #low (33000 / 0x10000) 
0642 756100      26            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
0645 120432      27            lcall mul32
0648 755E00      28            mov y+0, #low (((1<<12)) % 0x10000) 
064B 755F10      28            mov y+1, #high(((1<<12)) % 0x10000) 
064E 756000      28            mov y+2, #low (((1<<12)) / 0x10000) 
0651 756100      28            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
0654 1204BF      29            lcall div32
0657 755E3C      30            mov y+0, #low (60 % 0x10000) 
065A 755F00      30            mov y+1, #high(60 % 0x10000) 
065D 756000      30            mov y+2, #low (60 / 0x10000) 
0660 756100      30            mov y+3, #high(60 / 0x10000) 
0663 12039E      31            lcall sub32
0666             32   
0666             33            ;mov32(Current_Oven_Volt,x); store the hex value of voltage
0666             34            
0666 755E0E      35            mov y+0, #low (7438 % 0x10000) 
0669 755F1D      35            mov y+1, #high(7438 % 0x10000) 
066C 756000      35            mov y+2, #low (7438 / 0x10000) 
066F 756100      35            mov y+3, #high(7438 / 0x10000) 
0672 120432      36            lcall mul32
0675 755E10      37            mov y+0, #low (10000 % 0x10000) 
0678 755F27      37            mov y+1, #high(10000 % 0x10000) 
067B 756000      37            mov y+2, #low (10000 / 0x10000) 
067E 756100      37            mov y+3, #high(10000 / 0x10000) 
0681 1204BF      38            lcall div32
0684             39            ;now we got the relateive temp number in hex
0684             40   
0684             41       ;mov(dst, src)
0684 854D61      41            mov y+3, Current_Room_Temp+3
0687 854C60      41       mov y+2, Current_Room_Temp+2
068A 854B5F      41       mov y+1, Current_Room_Temp+1
068D 854A5E      41       mov y,   Current_Room_Temp
0690 12037D      42            lcall add32
0693             43            ;now we got the true value of oven in hex
0693 1202B8      44            lcall hex2bcd
0696 1205BA      45            lcall SendTemp0; send to PC through serial port
0699 1205AF      46            lcall Send_Newline
069C 755E64      47            mov y+0, #low (100 % 0x10000) 
069F 755F00      47            mov y+1, #high(100 % 0x10000) 
06A2 756000      47            mov y+2, #low (100 / 0x10000) 
06A5 756100      47            mov y+3, #high(100 / 0x10000) 
06A8 1204BF      48            lcall div32;divide by 100 to get the value in integer
06AB             49            ; now x contains the value in hex
06AB 755E5E      50            mov y+0, #low (350 % 0x10000) 
06AE 755F01      50            mov y+1, #high(350 % 0x10000) 
06B1 756000      50            mov y+2, #low (350 / 0x10000) 
06B4 756100      50            mov y+3, #high(350 / 0x10000) 
06B7 1203C0      51            lcall x_lt_y
06BA 200203      52            jb mf, Temp_OK
06BD             53            ;if not ok
06BD 020602      54            ljmp Read_Oven_Temp;re-read the value
06C0             55   
06C0             56            Temp_OK:
06C0             57       ;mov(dst, src)
06C0 855D51      57            mov Current_Oven_Temp+3, x+3
06C3 855C50      57       mov Current_Oven_Temp+2, x+2
06C6 855B4F      57       mov Current_Oven_Temp+1, x+1
06C9 855A4E      57       mov Current_Oven_Temp,   x
06CC 22          58            ret
06CD             59   
06CD             60   Read_Room_Temp:
06CD             61            
06CD 755A00      62            mov x+0, #low (0 % 0x10000) 
06D0 755B00      62            mov x+1, #high(0 % 0x10000) 
06D3 755C00      62            mov x+2, #low (0 / 0x10000) 
06D6 755D00      62            mov x+3, #high(0 / 0x10000) 
06D9 85C75A      63       mov x+0, ad0dat2
06DC 7FFF        64            mov R7, #255
06DE 1201E4      65       lcall Wait10us
06E1             66       
06E1             67   accumulate_loop1:
06E1 85F45E      68       mov y+0, ad0dat3
06E4 755F00      69       mov y+1, #0
06E7 756000      70       mov y+2, #0
06EA 756100      71       mov y+3, #0
06ED 12037D      72       lcall add32
06F0 1201E4      73       lcall Wait10us
06F3 DFEC        74            djnz R7, accumulate_loop1
06F5             75            
06F5             76            ; Now divide by 16 (2^4)
06F5 755E10      77            mov y+0, #low (16 % 0x10000) 
06F8 755F00      77            mov y+1, #high(16 % 0x10000) 
06FB 756000      77            mov y+2, #low (16 / 0x10000) 
06FE 756100      77            mov y+3, #high(16 / 0x10000) 
0701 1204BF      78            lcall div32
0704             79            ; x has now the 12-bit representation of the temperature
0704             80            
0704             81            ; Convert to temperature (C)
0704 755EE8      82            mov y+0, #low (33000 % 0x10000) 
0707 755F80      82            mov y+1, #high(33000 % 0x10000) 
070A 756000      82            mov y+2, #low (33000 / 0x10000) 
070D 756100      82            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
0710 120432      83            lcall mul32
0713 755E00      84            mov y+0, #low (((1<<12)) % 0x10000) 
0716 755F10      84            mov y+1, #high(((1<<12)) % 0x10000) 
0719 756000      84            mov y+2, #low (((1<<12)) / 0x10000) 
071C 756100      84            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
071F 1204BF      85            lcall div32
0722 755E3C      86            mov y+0, #low (60 % 0x10000) 
0725 755F00      86            mov y+1, #high(60 % 0x10000) 
0728 756000      86            mov y+2, #low (60 / 0x10000) 
072B 756100      86            mov y+3, #high(60 / 0x10000) 
072E 12039E      87            lcall sub32
0731             88            
0731             89            ;now we got the voltage value
0731             90            ;mov32(Current_Room_Volt,x)
0731             91            
0731 755EA4      92            mov y+0, #low (27300 % 0x10000) 
0734 755F6A      92            mov y+1, #high(27300 % 0x10000) 
0737 756000      92            mov y+2, #low (27300 / 0x10000) 
073A 756100      92            mov y+3, #high(27300 / 0x10000) 
073D 12039E      93            lcall sub32
0740             94            ;now we got the temperature
0740             95       ;mov(dst, src)
0740 855D4D      95            mov Current_Room_Temp+3, x+3
0743 855C4C      95       mov Current_Room_Temp+2, x+2
0746 855B4B      95       mov Current_Room_Temp+1, x+1
0749 855A4A      95       mov Current_Room_Temp,   x
074C             96            
074C 22          97            ret
                 -1       $include(speaker.inc)
                457   $LIST
0B8E            187   ;$LIST
0B8E            188   
0B8E            189   cseg
0B8E            190   
0B8E            191   Data_Initialization:
0B8E 753100     192       mov Time_Global, #0x00
0B91 753900     193       mov TEMP_SOAK+3, #0x00
0B94 753800     194       mov TEMP_SOAK+2, #0x00
0B97 753700     195       mov TEMP_SOAK+1, #0x00
0B9A 753696     196       mov TEMP_SOAK, #150
0B9D 754100     197       mov TEMP_RFLW+3, #0
0BA0 754000     198       mov TEMP_RFLW+2, #0
0BA3 753F00     199       mov TEMP_RFLW+1, #0
0BA6 753ED9     200       mov TEMP_RFLW, #217
0BA9 753D00     201       mov TIME_SOAK+3, #0
0BAC 753C00     202       mov TIME_SOAK+2, #0
0BAF 753B00     203       mov TIME_SOAK+1, #0
0BB2 753A3C     204       mov TIME_SOAK, #60
0BB5 754500     205       mov TIME_RFLW+3, #0
0BB8 754400     206       mov TIME_RFLW+2, #0
0BBB 754300     207       mov TIME_RFLW+1, #0
0BBE 75424B     208       mov TIME_RFLW, #75
0BC1 754900     209       mov TEMP_SAFE+3, #0
0BC4 754800     210       mov TEMP_SAFE+2, #0
0BC7 754700     211       mov TEMP_SAFE+1, #0
0BCA 75463C     212       mov TEMP_SAFE, #60
0BCD 753300     213       mov FSM0_State, #0
0BD0 753400     214       mov FSM1_State, #0
0BD3 756B00     215       mov number, #0x0 ;;not needed
0BD6 756E00     216       mov individual_offest, #0x0
0BD9 756700     217       mov Count5s, #0x00
0BDC            218           
0BDC C203       219       clr enable_time_global
0BDE C205       220       clr nodigit
0BE0 C206       221            clr skiphundred
0BE2 C207       222            clr skiptenth
0BE4            223   
0BE4 C0E0       224            push acc
0BE6 7401       224            mov a, #1
0BE8 14         224            dec a
0BE9 120290     224            lcall ?Set_Cursor_1 ; Select column and row
0BEC D0E0       224            pop acc
0BEE C083       224            push dph
0BF0 C082       224            push dpl
0BF2 C0E0       224            push acc
0BF4 90007F     224            mov dptr, #WELCOME1
0BF7 120283     224            lcall ?Send_Constant_String
0BFA D0E0       224            pop acc
0BFC D082       224            pop dpl
0BFE D083       224            pop dph
0C00 C0E0       224            push acc
0C02 7401       224            mov a, #1
0C04 14         224            dec a
0C05 12028E     224            lcall ?Set_Cursor_2 ; Select column and row
0C08 D0E0       224            pop acc
0C0A C083       224            push dph
0C0C C082       224            push dpl
0C0E C0E0       224            push acc
0C10 900090     224            mov dptr, #WELCOME2
0C13 120283     224            lcall ?Send_Constant_String
0C16 D0E0       224            pop acc
0C18 D082       224            pop dpl
0C1A D083       224            pop dph
0C1C 22         225       ret
0C1D            226   
0C1D            227   
0C1D            228   MainProgram:
0C1D 75817F     229       mov SP, #0x7F
0C20 120534     230       lcall Ports_Init
0C23 12024E     231            lcall LCD_4BIT
0C26            232            ;Serial_Initialize()
0C26 120570     232       lcall _Serial_Initialize
0C29 12054D     233       lcall InitADC
0C2C C0E0       234            push acc
0C2E 7401       234            mov a, #1
0C30 14         234            dec a
0C31 120290     234            lcall ?Set_Cursor_1 ; Select column and row
0C34 D0E0       234            pop acc
0C36 C083       234            push dph
0C38 C082       234            push dpl
0C3A C0E0       234            push acc
0C3C 90007F     234            mov dptr, #WELCOME1
0C3F 120283     234            lcall ?Send_Constant_String
0C42 D0E0       234            pop acc
0C44 D082       234            pop dpl
0C46 D083       234            pop dph
0C48 C0E0       234            push acc
0C4A 7401       234            mov a, #1
0C4C 14         234            dec a
0C4D 12028E     234            lcall ?Set_Cursor_2 ; Select column and row
0C50 D0E0       234            pop acc
0C52 C083       234            push dph
0C54 C082       234            push dpl
0C56 C0E0       234            push acc
0C58 900090     234            mov dptr, #WELCOME2
0C5B 120283     234            lcall ?Send_Constant_String
0C5E D0E0       234            pop acc
0C60 D082       234            pop dpl
0C62 D083       234            pop dph
0C64 120B8E     235       lcall Data_Initialization
0C67 120795     236       lcall InitDAC
0C6A 12074D     237       lcall CCU_Init
0C6D 1207A5     238            lcall Init_SPI
0C70 120CCA     239       lcall External_Interrupt0_Init
0C73 120CD3     240       lcall External_Interrupt1_Init
0C76 C2C8       241       clr TMOD20 ; Stop CCU timer
0C78 D2AF       242       setb EA   ; Enable Global interrupts
0C7A C2A7       243       clr OVEN
0C7C            244   
0C7C            245   loop_a:
0C7C 3004FD     246       jnb half_seconds_flag, loop_a
0C7F            247   loop_b:
0C7F C204       248       clr half_seconds_flag
0C81            249   
0C81 0567       250       inc Count5s
0C83 E567       251       mov a, Count5s
0C85 B40506     252       cjne a, #5, skip2
0C88 756700     253       mov Count5s, #0
0C8B 12110B     254       lcall Speak_Process
0C8E            255       skip2:
0C8E            256   
0C8E 80EC       257            sjmp loop_a
0C90            258   
                259   Display_3BCD_from_x mac
                260       lcall hex2bcd
                261       ;now the bcd num of time is stored in bcd
                262       LCD_Display_NUM(bcd+1);
                263       LCD_Display_BCD(bcd);
                264   endmac
0C90            265   ;----------------------------;
0C90            266   ;     Interrupt Services     ;
0C90            267   ;----------------------------; 
0C90            268   
0C90            269   Timer1_Init:
0C90 E589       270            mov a, TMOD
0C92 540F       271            anl a, #0x0f ; Clear the bits for timer 1
0C94 4410       272            orl a, #0x10 ; Configure timer 1 as 16-timer
0C96 F589       273            mov TMOD, a
0C98 758D6F     274            mov TH1, #high(TIMER1_RELOAD)
0C9B 758BFF     275            mov TL1, #low(TIMER1_RELOAD)
0C9E            276            ; Enable the timer and interrupts
0C9E D2AB       277       setb ET1  ; Enable timer 1 interrupt
0CA0 D28E       278       setb TR1  ; Start timer 1
0CA2 22         279            ret
0CA3            280   
0CA3            281   Timer1_ISR:
0CA3 758D6F     282            mov TH1, #high(TIMER1_RELOAD)
0CA6 758BFF     283            mov TL1, #low(TIMER1_RELOAD)
0CA9 B2A6       284            cpl P2.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 10 ms pulse.
0CAB            285            
0CAB            286            ; The two registers used in the ISR must be saved in the stack
0CAB C0E0       287            push acc
0CAD C0D0       288            push psw
0CAF            289            
0CAF            290            ; Increment the 8-bit 10-mili-second counter
0CAF 0530       291            inc Count10ms
0CB1            292   
0CB1            293   Inc_Done:
0CB1            294            ; Check if half second has passed
0CB1 E530       295            mov a, Count10ms
0CB3 B4640F     296            cjne a, #100, Timer1_ISR_done ; Warning: this instruction changes the carry flag!
0CB6            297            
0CB6            298            ; 500 milliseconds have passed.  Set a flag so the main program knows
0CB6 D204       299            setb half_seconds_flag ; Let the main program know half second had passed
0CB8            300       
0CB8 300302     301       jnb enable_time_global, skip1
0CBB 0531       302       inc Time_Global
0CBD            303            skip1:
0CBD 753000     304       mov Count10ms, #0
0CC0            305   
0CC0 B2B1       306       cpl LED
0CC2 120D35     307       lcall FSM1;call FSM1 here
0CC5            308   
0CC5            309   Timer1_ISR_done:
0CC5 D0D0       310            pop psw
0CC7 D0E0       311            pop acc
0CC9 32         312            reti
0CCA            313   
0CCA            314   External_Interrupt0_Init:
0CCA            315            ; Enable the external interrupt
0CCA D2A8       316       setb EX0  ; Enable timer 1 interrupt
0CCC 22         317            ret
0CCD            318   
0CCD            319   EI0_ISR:
0CCD C288       320       clr IT0
0CCF 120C90     321       lcall Timer1_Init
0CD2 32         322       reti
0CD3            323   
0CD3            324   External_Interrupt1_Init:
0CD3            325            ; Enable the external interrupt
0CD3 D2AA       326       setb EX1  ; Enable timer 1 interrupt
0CD5 22         327            ret
0CD6            328   
0CD6            329   EI1_ISR:
0CD6 C28A       330       clr IT1
0CD8 C28E       331       clr TR1; disable  timer 1
0CDA 120B8E     332       lcall Data_Initialization
0CDD 32         333       reti
0CDE            334   
0CDE            335   Display_Working_Status:
0CDE C0E0       336            push acc
0CE0 7406       336            mov a, #6
0CE2 14         336            dec a
0CE3 120290     336            lcall ?Set_Cursor_1 ; Select column and row
0CE6 D0E0       336            pop acc
0CE8            337       ;mov(dst, src)
0CE8 85515D     337            mov x+3, Current_Oven_Temp+3
0CEB 85505C     337       mov x+2, Current_Oven_Temp+2
0CEE 854F5B     337       mov x+1, Current_Oven_Temp+1
0CF1 854E5A     337       mov x,   Current_Oven_Temp
0CF4 1202B8     338       lcall hex2bcd
0CF7            338       ;now the bcd num of time is stored in bcd
0CF7 C000       338            push ar0
0CF9 A863       338            mov r0, bcd+1
0CFB 1202AB     338            lcall ?Display_NUM
0CFE D000       338            pop ar0;
0D00 C000       338            push ar0
0D02 A862       338            mov r0, bcd
0D04 120295     338            lcall ?Display_BCD
0D07 D000       338            pop ar0;
0D09            339   
0D09 C0E0       340            push acc
0D0B 740E       340            mov a, #14
0D0D 14         340            dec a
0D0E 120290     340            lcall ?Set_Cursor_1 ; Select column and row
0D11 D0E0       340            pop acc
0D13 755D00     341       mov x+3, #0
0D16 755C00     342       mov x+2, #0
0D19 755B00     343       mov x+1, #0
0D1C 85315A     344       mov x, Time_Global
0D1F 1202B8     345       lcall hex2bcd
0D22            345       ;now the bcd num of time is stored in bcd
0D22 C000       345            push ar0
0D24 A863       345            mov r0, bcd+1
0D26 1202AB     345            lcall ?Display_NUM
0D29 D000       345            pop ar0;
0D2B C000       345            push ar0
0D2D A862       345            mov r0, bcd
0D2F 120295     345            lcall ?Display_BCD
0D32 D000       345            pop ar0;
0D34            346   
0D34 22         347       ret
0D35            348   
                349   Update_Temp mac
                350       lcall Read_Room_Temp
                351       lcall Read_Oven_Temp
                352       mov32(x, Current_Oven_Temp)
                353       mov32(y, %0)
                354       lcall x_lt_y
                355   endmac
0D35            357   
0D35            358   
0D35            359   
0D35            360   
0D35            361   FSM1:
0D35            362       ;---------------------------------;
0D35            363       ; FSM1 using Timer Interrupt      ;
0D35            364       ;---------------------------------;
0D35            365       ;update status and send data to LCD and PC every one/half seconds
0D35            366   
0D35 E534       367       mov a, FSM1_State
0D37            368       FSM1_State0:
0D37 B40002     369           cjne a, #0, JUMP_FSM1_State1
0D3A 8003       370           sjmp Start_FSM1_State0
0D3C            371           JUMP_FSM1_State1:
0D3C 020DFD     372           ljmp FSM1_State1
0D3F            373           
0D3F            374           Start_FSM1_State0:
0D3F D203       375           setb enable_time_global
0D41 D2A7       376           setb OVEN; turn oven on
0D43 1206CD     377       lcall Read_Room_Temp
0D46 120602     377       lcall Read_Oven_Temp
0D49            377   
0D49            377       ;mov(dst, src)
0D49 85515D     377            mov x+3, Current_Oven_Temp+3
0D4C 85505C     377       mov x+2, Current_Oven_Temp+2
0D4F 854F5B     377       mov x+1, Current_Oven_Temp+1
0D52 854E5A     377       mov x,   Current_Oven_Temp
0D55            377       ;mov(dst, src)
0D55 853961     377            mov y+3, TEMP_SOAK+3
0D58 853860     377       mov y+2, TEMP_SOAK+2
0D5B 85375F     377       mov y+1, TEMP_SOAK+1
0D5E 85365E     377       mov y,   TEMP_SOAK
0D61            377   
0D61 1203C0     377       lcall x_lt_y    ;Read Temperatures
0D64 C0E0       378            push acc
0D66 7401       378            mov a, #1
0D68 14         378            dec a
0D69 120290     378            lcall ?Set_Cursor_1 ; Select column and row
0D6C D0E0       378            pop acc
0D6E C083       378            push dph
0D70 C082       378            push dpl
0D72 C0E0       378            push acc
0D74 90014B     378            mov dptr, #WORKING
0D77 120283     378            lcall ?Send_Constant_String
0D7A D0E0       378            pop acc
0D7C D082       378            pop dpl
0D7E D083       378            pop dph
0D80 C0E0       378            push acc
0D82 7401       378            mov a, #1
0D84 14         378            dec a
0D85 12028E     378            lcall ?Set_Cursor_2 ; Select column and row
0D88 D0E0       378            pop acc
0D8A C083       378            push dph
0D8C C082       378            push dpl
0D8E C0E0       378            push acc
0D90 90015C     378            mov dptr, #STEP1
0D93 120283     378            lcall ?Send_Constant_String
0D96 D0E0       378            pop acc
0D98 D082       378            pop dpl
0D9A D083       378            pop dph;display interface
0D9C 120CDE     379           lcall Display_Working_Status
0D9F C0E0       380            push acc
0DA1 7406       380            mov a, #6
0DA3 14         380            dec a
0DA4 12028E     380            lcall ?Set_Cursor_2 ; Select column and row
0DA7 D0E0       380            pop acc
0DA9            381       ;mov(dst, src)
0DA9 85395D     381            mov x+3, TEMP_SOAK+3
0DAC 85385C     381       mov x+2, TEMP_SOAK+2
0DAF 85375B     381       mov x+1, TEMP_SOAK+1
0DB2 85365A     381       mov x,   TEMP_SOAK
0DB5 1202B8     382       lcall hex2bcd
0DB8            382       ;now the bcd num of time is stored in bcd
0DB8 C000       382            push ar0
0DBA A863       382            mov r0, bcd+1
0DBC 1202AB     382            lcall ?Display_NUM
0DBF D000       382            pop ar0;
0DC1 C000       382            push ar0
0DC3 A862       382            mov r0, bcd
0DC5 120295     382            lcall ?Display_BCD
0DC8 D000       382            pop ar0;
0DCA            383   
0DCA 200207     384           jb mf, FSM1_State0_Error_Check;check Error and continue if smaller than set time
0DCD            385           ;if temp greater
0DCD 0534       386           inc FSM1_State; go to next state            
0DCF 853A32     387           mov Time_Counter, TIME_SOAK; move the TIME_SOAK in counter and count down
0DD2 8026       388           sjmp FSM1_State0_Done
0DD4            389   
0DD4            390           FSM1_State0_Error_Check:
0DD4 E531       391           mov a, Time_Global
0DD6 B43C21     392           cjne a, #QUITTIME, FSM1_State0_Done; not time, done
0DD9            393           ;if time reached, check temp
0DD9            394       ;mov(dst, src)
0DD9 85515D     394            mov x+3, Current_Oven_Temp+3
0DDC 85505C     394       mov x+2, Current_Oven_Temp+2
0DDF 854F5B     394       mov x+1, Current_Oven_Temp+1
0DE2 854E5A     394       mov x,   Current_Oven_Temp;move current oven temp in x
0DE5 756100     395           mov y+3, #0
0DE8 756000     396           mov y+2, #0
0DEB 755F00     397           mov y+1, #0
0DEE 755E32     398           mov y, #QUITTEMP
0DF1 1203C0     399           lcall x_lt_y; check if current oven temp is smaller than quittemp
0DF4            400   
0DF4 300203     401           jnb mf, FSM1_State0_Done; the oven is working properly
0DF7            402           ;if not working right
0DF7 0210CE     403           ljmp FSM1_WARNING
0DFA            404   
0DFA            405   
0DFA            406   
0DFA            407           FSM1_State0_Done:
0DFA 02110A     408               ljmp FSM1_DONE
0DFD            409   
0DFD            410   
0DFD            411       FSM1_State1:
0DFD B40102     412           cjne a, #1, JUMP_FSM1_State2
0E00 8003       413               sjmp Start_FSM1_State1
0E02            414           JUMP_FSM1_State2:
0E02 020EA3     415               ljmp FSM1_State2
0E05            416           
0E05            417           Start_FSM1_State1:
0E05 D53205     418           djnz Time_Counter, FSM1_State1_Continue; decrement every 1 second
0E08            419           ;time over, change state
0E08 0534       420           inc FSM1_State; increment states
0E0A 020EA0     421           ljmp FSM1_State1_Done
0E0D            422   
0E0D            423           FSM1_State1_Continue:
0E0D            424           ;next: check temp
0E0D            425           ;read temp and compare
0E0D 1206CD     426       lcall Read_Room_Temp
0E10 120602     426       lcall Read_Oven_Temp
0E13            426   
0E13            426       ;mov(dst, src)
0E13 85515D     426            mov x+3, Current_Oven_Temp+3
0E16 85505C     426       mov x+2, Current_Oven_Temp+2
0E19 854F5B     426       mov x+1, Current_Oven_Temp+1
0E1C 854E5A     426       mov x,   Current_Oven_Temp
0E1F            426       ;mov(dst, src)
0E1F 853961     426            mov y+3, TEMP_SOAK+3
0E22 853860     426       mov y+2, TEMP_SOAK+2
0E25 85375F     426       mov y+1, TEMP_SOAK+1
0E28 85365E     426       mov y,   TEMP_SOAK
0E2B            426   
0E2B 1203C0     426       lcall x_lt_y   ;Update current temp info
0E2E C0E0       427            push acc
0E30 7401       427            mov a, #1
0E32 14         427            dec a
0E33 120290     427            lcall ?Set_Cursor_1 ; Select column and row
0E36 D0E0       427            pop acc
0E38 C083       427            push dph
0E3A C082       427            push dpl
0E3C C0E0       427            push acc
0E3E 90014B     427            mov dptr, #WORKING
0E41 120283     427            lcall ?Send_Constant_String
0E44 D0E0       427            pop acc
0E46 D082       427            pop dpl
0E48 D083       427            pop dph
0E4A C0E0       427            push acc
0E4C 7401       427            mov a, #1
0E4E 14         427            dec a
0E4F 12028E     427            lcall ?Set_Cursor_2 ; Select column and row
0E52 D0E0       427            pop acc
0E54 C083       427            push dph
0E56 C082       427            push dpl
0E58 C0E0       427            push acc
0E5A 90016D     427            mov dptr, #STEP2
0E5D 120283     427            lcall ?Send_Constant_String
0E60 D0E0       427            pop acc
0E62 D082       427            pop dpl
0E64 D083       427            pop dph
0E66 120CDE     428           lcall Display_Working_Status; update time and temp on lcd
0E69            429           ;if temp is lower than expected, jump to ON
0E69 C0E0       430            push acc
0E6B 7405       430            mov a, #5
0E6D 14         430            dec a
0E6E 12028E     430            lcall ?Set_Cursor_2 ; Select column and row
0E71 D0E0       430            pop acc
0E73 755A00     431            mov x+0, #low (0 % 0x10000) 
0E76 755B00     431            mov x+1, #high(0 % 0x10000) 
0E79 755C00     431            mov x+2, #low (0 / 0x10000) 
0E7C 755D00     431            mov x+3, #high(0 / 0x10000) 
0E7F 85325A     432           mov x, Time_Counter
0E82 1202B8     433       lcall hex2bcd
0E85            433       ;now the bcd num of time is stored in bcd
0E85 C000       433            push ar0
0E87 A863       433            mov r0, bcd+1
0E89 1202AB     433            lcall ?Display_NUM
0E8C D000       433            pop ar0;
0E8E C000       433            push ar0
0E90 A862       433            mov r0, bcd
0E92 120295     433            lcall ?Display_BCD
0E95 D000       433            pop ar0;
0E97            434   
0E97 200204     435           jb mf, FSM1_State1_ON
0E9A            436           ;if temp is higher, close oven
0E9A C2A7       437           clr OVEN 
0E9C 8002       438           sjmp FSM1_State1_Done
0E9E            439   
0E9E            440           FSM1_State1_ON:
0E9E D2A7       441           setb OVEN   ;if temp is lower, turn on oven
0EA0            442           FSM1_State1_Done:
0EA0 02110A     443               ljmp FSM1_DONE
0EA3            444   
0EA3            445       FSM1_State2: ;temp ramp up until TEMP_RFLW
0EA3 B40202     446           cjne a, #2, JUMP_FSM1_State3
0EA6 8003       447               sjmp Start_FSM1_State2
0EA8            448           JUMP_FSM1_State3:
0EA8 020F42     449               ljmp FSM1_State3
0EAB            450   
0EAB            451           Start_FSM1_State2:
0EAB D2A7       452           setb OVEN; turn on oven
0EAD            453   
0EAD            454           ;read temperature
0EAD 1206CD     455       lcall Read_Room_Temp
0EB0 120602     455       lcall Read_Oven_Temp
0EB3            455   
0EB3            455       ;mov(dst, src)
0EB3 85515D     455            mov x+3, Current_Oven_Temp+3
0EB6 85505C     455       mov x+2, Current_Oven_Temp+2
0EB9 854F5B     455       mov x+1, Current_Oven_Temp+1
0EBC 854E5A     455       mov x,   Current_Oven_Temp
0EBF            455       ;mov(dst, src)
0EBF 854161     455            mov y+3, TEMP_RFLW+3
0EC2 854060     455       mov y+2, TEMP_RFLW+2
0EC5 853F5F     455       mov y+1, TEMP_RFLW+1
0EC8 853E5E     455       mov y,   TEMP_RFLW
0ECB            455   
0ECB 1203C0     455       lcall x_lt_y
0ECE 200208     456           jb mf, FSM1_State2_Continue
0ED1            457           ;if temp reached
0ED1 0534       458           inc FSM1_State
0ED3 854232     459           mov Time_Counter, TIME_RFLW
0ED6 02110A     460           ljmp FSM1_DONE
0ED9            461   
0ED9            462           FSM1_State2_Continue:
0ED9 C0E0       463            push acc
0EDB 7401       463            mov a, #1
0EDD 14         463            dec a
0EDE 120290     463            lcall ?Set_Cursor_1 ; Select column and row
0EE1 D0E0       463            pop acc
0EE3 C083       463            push dph
0EE5 C082       463            push dpl
0EE7 C0E0       463            push acc
0EE9 90014B     463            mov dptr, #WORKING
0EEC 120283     463            lcall ?Send_Constant_String
0EEF D0E0       463            pop acc
0EF1 D082       463            pop dpl
0EF3 D083       463            pop dph
0EF5 C0E0       463            push acc
0EF7 7401       463            mov a, #1
0EF9 14         463            dec a
0EFA 12028E     463            lcall ?Set_Cursor_2 ; Select column and row
0EFD D0E0       463            pop acc
0EFF C083       463            push dph
0F01 C082       463            push dpl
0F03 C0E0       463            push acc
0F05 90017E     463            mov dptr, #STEP3
0F08 120283     463            lcall ?Send_Constant_String
0F0B D0E0       463            pop acc
0F0D D082       463            pop dpl
0F0F D083       463            pop dph
0F11 120CDE     464           lcall Display_Working_Status
0F14 C0E0       465            push acc
0F16 7406       465            mov a, #6
0F18 14         465            dec a
0F19 12028E     465            lcall ?Set_Cursor_2 ; Select column and row
0F1C D0E0       465            pop acc
0F1E            466       ;mov(dst, src)
0F1E 85415D     466            mov x+3, TEMP_RFLW+3
0F21 85405C     466       mov x+2, TEMP_RFLW+2
0F24 853F5B     466       mov x+1, TEMP_RFLW+1
0F27 853E5A     466       mov x,   TEMP_RFLW
0F2A 1202B8     467       lcall hex2bcd
0F2D            467       ;now the bcd num of time is stored in bcd
0F2D C000       467            push ar0
0F2F A863       467            mov r0, bcd+1
0F31 1202AB     467            lcall ?Display_NUM
0F34 D000       467            pop ar0;
0F36 C000       467            push ar0
0F38 A862       467            mov r0, bcd
0F3A 120295     467            lcall ?Display_BCD
0F3D D000       467            pop ar0;
0F3F            468   
0F3F            469           FSM1_State2_Done:
0F3F 02110A     470               ljmp FSM1_DONE
0F42            471           
0F42            472            FSM1_State3: ; keep temp at TEMP_RFLW for a few time
0F42 B40302     473           cjne a, #3, JUMP_FSM1_State4
0F45 8003       474               sjmp Start_FSM1_State3
0F47            475           JUMP_FSM1_State4:
0F47 020FE8     476               ljmp FSM1_State4
0F4A            477           
0F4A            478           Start_FSM1_State3:
0F4A D53205     479           djnz Time_Counter, FSM1_State3_Continue
0F4D            480           ;if time's up
0F4D 0534       481           inc FSM1_State
0F4F 020FE5     482           ljmp FSM1_State3_Done
0F52            483   
0F52            484           FSM1_State3_Continue:
0F52 C0E0       485            push acc
0F54 7401       485            mov a, #1
0F56 14         485            dec a
0F57 120290     485            lcall ?Set_Cursor_1 ; Select column and row
0F5A D0E0       485            pop acc
0F5C C083       485            push dph
0F5E C082       485            push dpl
0F60 C0E0       485            push acc
0F62 90014B     485            mov dptr, #WORKING
0F65 120283     485            lcall ?Send_Constant_String
0F68 D0E0       485            pop acc
0F6A D082       485            pop dpl
0F6C D083       485            pop dph
0F6E C0E0       485            push acc
0F70 7401       485            mov a, #1
0F72 14         485            dec a
0F73 12028E     485            lcall ?Set_Cursor_2 ; Select column and row
0F76 D0E0       485            pop acc
0F78 C083       485            push dph
0F7A C082       485            push dpl
0F7C C0E0       485            push acc
0F7E 90018F     485            mov dptr, #STEP4
0F81 120283     485            lcall ?Send_Constant_String
0F84 D0E0       485            pop acc
0F86 D082       485            pop dpl
0F88 D083       485            pop dph
0F8A 120CDE     486           lcall Display_Working_Status
0F8D 1206CD     487       lcall Read_Room_Temp
0F90 120602     487       lcall Read_Oven_Temp
0F93            487   
0F93            487       ;mov(dst, src)
0F93 85515D     487            mov x+3, Current_Oven_Temp+3
0F96 85505C     487       mov x+2, Current_Oven_Temp+2
0F99 854F5B     487       mov x+1, Current_Oven_Temp+1
0F9C 854E5A     487       mov x,   Current_Oven_Temp
0F9F            487       ;mov(dst, src)
0F9F 854161     487            mov y+3, TEMP_RFLW+3
0FA2 854060     487       mov y+2, TEMP_RFLW+2
0FA5 853F5F     487       mov y+1, TEMP_RFLW+1
0FA8 853E5E     487       mov y,   TEMP_RFLW
0FAB            487   
0FAB 1203C0     487       lcall x_lt_y; update temp info, set or clr mf flag
0FAE C0E0       488            push acc
0FB0 7405       488            mov a, #5
0FB2 14         488            dec a
0FB3 12028E     488            lcall ?Set_Cursor_2 ; Select column and row
0FB6 D0E0       488            pop acc
0FB8 755A00     489            mov x+0, #low (0 % 0x10000) 
0FBB 755B00     489            mov x+1, #high(0 % 0x10000) 
0FBE 755C00     489            mov x+2, #low (0 / 0x10000) 
0FC1 755D00     489            mov x+3, #high(0 / 0x10000) 
0FC4 85325A     490           mov x, Time_Counter
0FC7 1202B8     491       lcall hex2bcd
0FCA            491       ;now the bcd num of time is stored in bcd
0FCA C000       491            push ar0
0FCC A863       491            mov r0, bcd+1
0FCE 1202AB     491            lcall ?Display_NUM
0FD1 D000       491            pop ar0;
0FD3 C000       491            push ar0
0FD5 A862       491            mov r0, bcd
0FD7 120295     491            lcall ?Display_BCD
0FDA D000       491            pop ar0;
0FDC            492   
0FDC            493           ;if temp is lower than expected, jump to ON
0FDC 200204     494           jb mf, FSM1_State3_ON
0FDF            495           ;if temp is higher, close oven
0FDF C2A7       496           clr OVEN 
0FE1 8002       497           sjmp FSM1_State3_Done
0FE3            498   
0FE3            499           FSM1_State3_ON:
0FE3 D2A7       500           setb OVEN   ;if temp is lower, turn on oven
0FE5            501           FSM1_State3_Done:
0FE5 02110A     502               ljmp FSM1_DONE
0FE8            503           
0FE8            504   
0FE8            505       
0FE8            506       FSM1_State4:; cool down until safe temp
0FE8 B40402     507           cjne a, #4, JUMP_FSM1_State5
0FEB 8003       508               sjmp Start_FSM1_State4
0FED            509           JUMP_FSM1_State5:
0FED 02108A     510               ljmp FSM1_State5
0FF0            511           
0FF0            512           Start_FSM1_State4:
0FF0 C2A7       513           clr OVEN
0FF2            514           ;read temperature
0FF2 1206CD     515       lcall Read_Room_Temp
0FF5 120602     515       lcall Read_Oven_Temp
0FF8            515   
0FF8            515       ;mov(dst, src)
0FF8 85515D     515            mov x+3, Current_Oven_Temp+3
0FFB 85505C     515       mov x+2, Current_Oven_Temp+2
0FFE 854F5B     515       mov x+1, Current_Oven_Temp+1
1001 854E5A     515       mov x,   Current_Oven_Temp
1004            515       ;mov(dst, src)
1004 854961     515            mov y+3, TEMP_SAFE+3
1007 854860     515       mov y+2, TEMP_SAFE+2
100A 85475F     515       mov y+1, TEMP_SAFE+1
100D 85465E     515       mov y,   TEMP_SAFE
1010            515   
1010 1203C0     515       lcall x_lt_y
1013            516           ;if temp is smaller than TEMP_SAFE, go state 5
1013 300205     517           jnb mf, FSM1_State4_Continue
1016            518           ;if temp is smaller than expected
1016 0534       519           inc FSM1_State
1018 753200     520           mov Time_Counter, #0
101B            521   
101B            522           FSM1_State4_Continue:
101B C0E0       523            push acc
101D 7401       523            mov a, #1
101F 14         523            dec a
1020 120290     523            lcall ?Set_Cursor_1 ; Select column and row
1023 D0E0       523            pop acc
1025 C083       523            push dph
1027 C082       523            push dpl
1029 C0E0       523            push acc
102B 90014B     523            mov dptr, #WORKING
102E 120283     523            lcall ?Send_Constant_String
1031 D0E0       523            pop acc
1033 D082       523            pop dpl
1035 D083       523            pop dph
1037 C0E0       523            push acc
1039 7401       523            mov a, #1
103B 14         523            dec a
103C 12028E     523            lcall ?Set_Cursor_2 ; Select column and row
103F D0E0       523            pop acc
1041 C083       523            push dph
1043 C082       523            push dpl
1045 C0E0       523            push acc
1047 9001A0     523            mov dptr, #STEP5
104A 120283     523            lcall ?Send_Constant_String
104D D0E0       523            pop acc
104F D082       523            pop dpl
1051 D083       523            pop dph
1053 120CDE     524           lcall Display_Working_Status
1056 C0E0       525            push acc
1058 7405       525            mov a, #5
105A 14         525            dec a
105B 12028E     525            lcall ?Set_Cursor_2 ; Select column and row
105E D0E0       525            pop acc
1060 755A00     526            mov x+0, #low (0 % 0x10000) 
1063 755B00     526            mov x+1, #high(0 % 0x10000) 
1066 755C00     526            mov x+2, #low (0 / 0x10000) 
1069 755D00     526            mov x+3, #high(0 / 0x10000) 
106C 85465A     527           mov x, TEMP_SAFE
106F 1202B8     528           lcall hex2bcd
1072 1202B8     529       lcall hex2bcd
1075            529       ;now the bcd num of time is stored in bcd
1075 C000       529            push ar0
1077 A863       529            mov r0, bcd+1
1079 1202AB     529            lcall ?Display_NUM
107C D000       529            pop ar0;
107E C000       529            push ar0
1080 A862       529            mov r0, bcd
1082 120295     529            lcall ?Display_BCD
1085 D000       529            pop ar0;
1087            530   
1087            531           FSM1_State4_Done:
1087 02110A     532               ljmp FSM1_DONE
108A            533   
108A            534       FSM1_State5: ; already cool done, display something, play some music
108A B4057D     535           cjne a, #5, FSM1_DONE
108D C2A7       536           clr OVEN; double check oven is not on
108F C203       537           clr enable_time_global; stop counting
1091 C0E0       538            push acc
1093 7401       538            mov a, #1
1095 14         538            dec a
1096 120290     538            lcall ?Set_Cursor_1 ; Select column and row
1099 D0E0       538            pop acc
109B C083       538            push dph
109D C082       538            push dpl
109F C0E0       538            push acc
10A1 90014B     538            mov dptr, #WORKING
10A4 120283     538            lcall ?Send_Constant_String
10A7 D0E0       538            pop acc
10A9 D082       538            pop dpl
10AB D083       538            pop dph
10AD C0E0       538            push acc
10AF 7401       538            mov a, #1
10B1 14         538            dec a
10B2 12028E     538            lcall ?Set_Cursor_2 ; Select column and row
10B5 D0E0       538            pop acc
10B7 C083       538            push dph
10B9 C082       538            push dpl
10BB C0E0       538            push acc
10BD 9001B1     538            mov dptr, #STEP6
10C0 120283     538            lcall ?Send_Constant_String
10C3 D0E0       538            pop acc
10C5 D082       538            pop dpl
10C7 D083       538            pop dph
10C9 120CDE     539           lcall Display_Working_Status
10CC 803C       540           sjmp FSM1_Done
10CE            541   
10CE            542   
10CE            543       FSM1_WARNING:
10CE C2A7       544           clr OVEN
10D0 C0E0       545            push acc
10D2 7401       545            mov a, #1
10D4 14         545            dec a
10D5 120290     545            lcall ?Set_Cursor_1 ; Select column and row
10D8 D0E0       545            pop acc
10DA C083       545            push dph
10DC C082       545            push dpl
10DE C0E0       545            push acc
10E0 9001C2     545            mov dptr, #WARNING1
10E3 120283     545            lcall ?Send_Constant_String
10E6 D0E0       545            pop acc
10E8 D082       545            pop dpl
10EA D083       545            pop dph
10EC C0E0       545            push acc
10EE 7401       545            mov a, #1
10F0 14         545            dec a
10F1 12028E     545            lcall ?Set_Cursor_2 ; Select column and row
10F4 D0E0       545            pop acc
10F6 C083       545            push dph
10F8 C082       545            push dpl
10FA C0E0       545            push acc
10FC 9001D3     545            mov dptr, #WARNING2
10FF 120283     545            lcall ?Send_Constant_String
1102 D0E0       545            pop acc
1104 D082       545            pop dpl
1106 D083       545            pop dph
1108 0534       546           inc FSM1_State
110A            547   
110A            548       FSM1_DONE:
110A 22         549       ret
110B            550   
110B            551   Speak_Process:
110B 120A4C     552       lcall current_temp_is
110E 854E6B     553       mov number, Current_Oven_Temp+0
1111 120A2F     554       lcall playnumbers
1114 120A6B     555       lcall degree
1117 120A8A     556       lcall celsius
111A 22         557       ret
111B            558   
111B            559   EN
