FSM1:
    
    ;---------------------------------;
    ; FSM1 using Timer Interrupt      ;
    ;---------------------------------;
    ;update status and send data to LCD and PC every one/half seconds

    mov a, FSM0_State
    FSM1_State0:
        cjne a, #0, FSM1_State1
        setb OVEN; turn oven on
        lcall Update_Temp

        LCD_INTERFACE_STEP1();display interface
        lcall Display_Working_Status
        LCD_Set_Cursor(2,6)
        mov32(x, TEMP_SOAK)
        Display_3BCD_from_x()

        jb mf, FSM1_State0_Done; do nothing if current is less than set temp

        ;if temp greater
        inc FSM1_State; go to next state            
        mov Time_Counter, #0; reset timer

        FSM1_State0_Done:
            ljmp FSM1_DONE

    FSM1_State1:
        cjne a, #1, FSM1_State2
        inc Time_Counter; increment every 1 second
        ;compare time
        mov x+3, #0
        mov x+2, #0
        mov x+1, #0
        mov x,   Time_Counter
        mov32(y, TIME_SOAK)
        lcall x_lt_y

        jb mf, FSM1_State1_Continue
        ;time over, change state
        inc FSM1_State; increment states
        ljmp FSM1_State1_Done

        FSM1_State1_Continue:
        ;next: check temp
        ;read temp and compare
        lcall Read_Room_Temp
        lcall Read_Oven_Temp
        mov32(x, Current_Oven_Temp)
        mov32(y, TEMP_SOAK)
        lcall x_lt_y

        ;if temp is lower than expected, jump to ON
        jb lessthan_flag, FSM1_State1_ON
        ;if temp is higher, close oven
        clr OVEN 
        sjmp FSM1_State1_Done

        FSM1_State1_ON:
        setb OVEN   ;if temp is lower, turn on oven
        FSM1_State1_Done:
            ljmp FSM1_DONE

    FSM1_State2: ;temp ramp up until TEMP_RFLW
        cjne a, #2, FSM1_State3
        setb OVEN
        ;read temperature
        lcall Read_Room_Temp
        lcall Read_Oven_Temp
        mov32(x, Current_Oven_Temp)
        mov32(y, TEMP_RFLW)
        lcall x_lt_y
        jb mf, FSM1_State2_Done
        ;if temp reached
        inc FSM1_State
        mov Time_Counter, #0

        FSM1_State2_Done:
            ljmp FSM1_DONE
        
	FSM1_State3: ; keep temp at TEMP_RFLW for a few time
		cjne a, #3, FSM1_State4
        inc Time_Counter; increment every 1 second
        ;compare time
        mov x+3, #0
        mov x+2, #0
        mov x+1, #0
        mov x,   Time_Counter
        mov32(y, TIME_RFLW)
        lcall x_lt_y

        jb mf, FSM1_State3_Continue
        ;time over, change state
        inc FSM1_State; increment states
        ljmp FSM1_State3_Done

        FSM1_State3_Continue:
        ;next: check temp
        ;read temp and compare
        lcall Read_Room_Temp
        lcall Read_Oven_Temp
        mov32(x, Current_Oven_Temp)
        mov32(y, TEMP_RFLW)
        lcall x_lt_y

        ;if temp is lower than expected, jump to ON
        jb lessthan_flag, FSM1_State3_ON
        ;if temp is higher, close oven
        clr OVEN 
        sjmp FSM1_State3_Done

        FSM1_State3_ON:
        setb OVEN   ;if temp is lower, turn on oven
        FSM1_State3_Done:
            ljmp FSM1_DONE
        

    
    FSM1_State4:; cool down until safe temp
        cjne a, #4, FSM1_State5
        clr OVEN
        ;read temperature
        lcall Read_Room_Temp
        lcall Read_Oven_Temp
        mov32(x, Current_Oven_Temp)
        mov32(y, TEMP_SAFE)
        lcall x_lt_y
        ;if temp is not smaller than TEMP_SAFE, do nothing
        jnb mf, FSM1_State4_Done
        ;if temp is smaller than expected
        inc FSM1_State
        mov Time_Counter, #0

        FSM1_State4_Done:
            ljmp FSM1_DONE

    FSM1_State5: ; already cool done, display something, play some music
        cjne a, #5, FSM1_DONE
        clr OVEN; double check oven is not on

    FSM1_DONE:
    ret

		lcall SendTemp0; send to PC
