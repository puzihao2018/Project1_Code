0000              1   ; This example uses a technique called "decimation" with the 8-bit ADC
0000              2   ; to increase its efective resolution to 12-bits.  The output of a LM335
0000              3   ; tempererature sensor is read and then diplayed using PUTTy in degrees Celcius.
0000              4   ;
0000              5   ; Some good information about decimation found here:
0000              6   ;
0000              7   ; https://www.cypress.com/file/236481/download
0000              8   
                 10   $LIST
0000             12   ;-------------------;
0000             13   ;    Const Define   ;
0000             14   ;-------------------; 
0000             15   XTAL EQU 7373000
0000             16   BAUD EQU 115200
0000             17   BRVAL EQU ((XTAL/BAUD)-16)
0000             18   
0000             19   CCU_RATE      EQU 100      ; 100Hz, for an overflow rate of 10ms
0000             20   CCU_RELOAD    EQU ((65536-(XTAL/(2*CCU_RATE))))
0000             21   
0000             22   TIMER0_RATE   EQU 4096
0000             23   TIMER0_RELOAD EQU ((65536-(XTAL/(2*TIMER0_RATE))))
0000             24            CSEG at 0x0000
0000 0204A7      25            ljmp    MainProgram
0003             26   
0003             27   ;-----------------------;
0003             28   ;    Variables Define   ;
0003             29   ;-----------------------; 
0003             30   ;Variable_name: ds n
0030             31   dseg at 0x30
0030             32            Current_Room_Temp: ds 4
0034             33            Current_Oven_Temp: ds 4
0038             34            Current_Room_Volt: ds 4
003C             35            Current_Oven_Volt: ds 4
0040             36   
0040             37   
                615   $LIST
                 39   $LIST
0290             41   
0290             42   putchar:
0290 109902      43            jbc     TI,putchar_L1
0293 80FB        44            sjmp putchar
0295             45   putchar_L1:
0295 F599        46            mov     SBUF,a
0297 22          47            ret
0298             48            
0298             49   getchar:
0298 109802      50            jbc     RI,getchar_L1
029B 80FB        51            sjmp getchar
029D             52   getchar_L1:
029D E599        53            mov     a,SBUF
029F 22          54            ret
02A0             55   
02A0             56   Wait1S:
02A0 7A28        57            mov R2, #40
02A2 79FA        58   L3:      mov R1, #250
02A4 78B8        59   L2:      mov R0, #184
02A6 D8FE        60   L1:      djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
02A8 D9FA        61            djnz R1, L2 ; 100us*250=0.025s
02AA DAF6        62            djnz R2, L3 ; 0.025s*40=1s
02AC 22          63            ret
02AD             64   
02AD             65   InitSerialPort:
02AD 75BD00      66            mov     BRGCON,#0x00
02B0 75BF00      67            mov     BRGR1,#high(BRVAL)
02B3 75BE30      68            mov     BRGR0,#low(BRVAL)
02B6 75BD03      69            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
02B9 759852      70            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
02BC 759100      71            mov     P1M1,#0x00 ; Enable pins RxD and TXD
02BF 759200      72            mov     P1M2,#0x00 ; Enable pins RxD and TXD
02C2 22          73            ret
02C3             74   
02C3             75   InitADC:
02C3             76            ; ADC0_0 is connected to P1.7
02C3             77            ; ADC0_1 is connected to P0.0
02C3             78            ; ADC0_2 is connected to P2.1
02C3             79            ; ADC0_3 is connected to P2.0
02C3             80       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
02C3 438401      81       orl P0M1, #00000001b
02C6 5385FE      82       anl P0M2, #11111110b
02C9 439180      83       orl P1M1, #10000000b
02CC 53927F      84       anl P1M2, #01111111b
02CF 43A403      85       orl P2M1, #00000011b
02D2 53A5FC      86       anl P2M2, #11111100b
02D5             87            ; Setup ADC0
02D5 D2C2        88            setb BURST0 ; Autoscan continuos conversion mode
02D7 75A120      89            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
02DA 75A30F      90            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
02DD 758E05      91            mov     ADCON0,#0x05 ; Enable the converter and start immediately
02E0             92            ; Wait for first conversion to complete
02E0             93   InitADC_L1:
02E0 E58E        94            mov     a,ADCON0
02E2 30E3FB      95            jnb     acc.3,InitADC_L1
02E5 22          96            ret
02E6             97   
02E6 30313233    98   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
02F6             99   
02F6            100   SendTemp0:
02F6 9002E6     101            mov dptr, #HexAscii 
02F9            102            
02F9            103            
02F9            104            
02F9 E53B       105            mov a, bcd+3
02FB C4         106            swap a
02FC 540F       107            anl a, #0xf
02FE 93         108            movc a, @a+dptr
02FF 120290     109            lcall putchar
0302 E53B       110            mov a, bcd+3
0304 540F       111            anl a, #0xf
0306 93         112            movc a, @a+dptr
0307 120290     113            lcall putchar
030A            114            
030A E53A       115            mov a, bcd+2
030C C4         116            swap a
030D 540F       117            anl a, #0xf
030F 93         118            movc a, @a+dptr
0310 120290     119            lcall putchar
0313 E53A       120            mov a, bcd+2
0315 540F       121            anl a, #0xf
0317 93         122            movc a, @a+dptr
0318 120290     123            lcall putchar
031B            124            
031B E539       125            mov a, bcd+1
031D C4         126            swap a
031E 540F       127            anl a, #0xf
0320 93         128            movc a, @a+dptr
0321 120290     129            lcall putchar
0324 E539       130            mov a, bcd+1
0326 540F       131            anl a, #0xf
0328 93         132            movc a, @a+dptr
0329 120290     133            lcall putchar
032C            134   
032C            135   
032C E538       136            mov a, bcd+0
032E C4         137            swap a
032F 540F       138            anl a, #0xf
0331 93         139            movc a, @a+dptr
0332 120290     140            lcall putchar
0335 E538       141            mov a, bcd+0
0337 540F       142            anl a, #0xf
0339 93         143            movc a, @a+dptr
033A 120290     144            lcall putchar
033D 22         145            ret
033E            146   
033E            147   Send_NewLine:
033E 740D       148            mov a, #'\r'
0340 120290     149            lcall putchar
0343 740A       150            mov a, #'\n'
0345 120290     151            lcall putchar   
0348 22         152            ret
0349            153            
0349            154   SendString:
0349 E4         155       clr a
034A 93         156       movc a, @a+dptr
034B 6006       157       jz SendString_L1
034D 120290     158       lcall putchar
0350 A3         159       inc dptr
0351 80F6       160       sjmp SendString  
0353            161   SendString_L1:
0353 22         162            ret
0354            163   
0354            164   Wait10us:
0354 7812       165       mov R0, #18
0356 D8FE       166       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
0358 22         167            ret
0359            168   
0359 0D0A5038   169   InitialMessage: db '\r\nP89LPC9351 ADC decimation example.\r\n', 0
     394C5043
     39333531
     20414443
     20646563
     696D6174
     696F6E20
     6578616D
     706C652E
     0D0A00
0380            170   
0380            171   Read_Oven_Temp:
0380            172            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
0380 753000     173            mov x+0, #low (0 % 0x10000) 
0383 753100     173            mov x+1, #high(0 % 0x10000) 
0386 753200     173            mov x+2, #low (0 / 0x10000) 
0389 753300     173            mov x+3, #high(0 / 0x10000) 
038C 85C530     174       mov x+0, AD0DAT0
038F 7FFF       175            mov R7, #255
0391 120354     176       lcall Wait10us
0394            177   accumulate_loop0:
0394 85C534     178       mov y+0, AD0DAT0
0397 753500     179       mov y+1, #0
039A 753600     180       mov y+2, #0
039D 753700     181       mov y+3, #0
03A0 1200E5     182       lcall add32
03A3 120354     183       lcall Wait10us
03A6 DFEC       184            djnz R7, accumulate_loop0
03A8            185            
03A8            186            ; Now divide by 16 (2^4)
03A8 753410     187            mov y+0, #low (16 % 0x10000) 
03AB 753500     187            mov y+1, #high(16 % 0x10000) 
03AE 753600     187            mov y+2, #low (16 / 0x10000) 
03B1 753700     187            mov y+3, #high(16 / 0x10000) 
03B4 120227     188            lcall div32
03B7            189            ; x has now the 12-bit representation of the temperature
03B7            190            
03B7            191            ; Convert to temperature (C)
03B7 7534E8     192            mov y+0, #low (33000 % 0x10000) 
03BA 753580     192            mov y+1, #high(33000 % 0x10000) 
03BD 753600     192            mov y+2, #low (33000 / 0x10000) 
03C0 753700     192            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
03C3 12019A     193            lcall mul32
03C6 753400     194            mov y+0, #low (((1<<12)) % 0x10000) 
03C9 753510     194            mov y+1, #high(((1<<12)) % 0x10000) 
03CC 753600     194            mov y+2, #low (((1<<12)) / 0x10000) 
03CF 753700     194            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
03D2 120227     195            lcall div32
03D5 75343C     196            mov y+0, #low (60 % 0x10000) 
03D8 753500     196            mov y+1, #high(60 % 0x10000) 
03DB 753600     196            mov y+2, #low (60 / 0x10000) 
03DE 753700     196            mov y+3, #high(60 / 0x10000) 
03E1 120106     197            lcall sub32
03E4            198   
03E4            199       ;mov(dst, src)
03E4 85333F     199            mov Current_Oven_Volt+3, x+3
03E7 85323E     199       mov Current_Oven_Volt+2, x+2
03EA 85313D     199       mov Current_Oven_Volt+1, x+1
03ED 85303C     199       mov Current_Oven_Volt,   x; store the hex value of voltage
03F0            200            
03F0 75340E     201            mov y+0, #low (7438 % 0x10000) 
03F3 75351D     201            mov y+1, #high(7438 % 0x10000) 
03F6 753600     201            mov y+2, #low (7438 / 0x10000) 
03F9 753700     201            mov y+3, #high(7438 / 0x10000) 
03FC 12019A     202            lcall mul32
03FF 753410     203            mov y+0, #low (10000 % 0x10000) 
0402 753527     203            mov y+1, #high(10000 % 0x10000) 
0405 753600     203            mov y+2, #low (10000 / 0x10000) 
0408 753700     203            mov y+3, #high(10000 / 0x10000) 
040B 120227     204            lcall div32
040E            205            ;now we got the relateive temp number in hex
040E            206   
040E            207            ;mov32(y, Current_Room_Temp)
040E            208            ;lcall add32
040E            209   
040E            210       ;mov(dst, src)
040E 853337     210            mov Current_Oven_Temp+3, x+3
0411 853236     210       mov Current_Oven_Temp+2, x+2
0414 853135     210       mov Current_Oven_Temp+1, x+1
0417 853034     210       mov Current_Oven_Temp,   x
041A 22         211            ret
041B            212   
041B            213   Read_Room_Temp:
041B            214            
041B 753000     215            mov x+0, #low (0 % 0x10000) 
041E 753100     215            mov x+1, #high(0 % 0x10000) 
0421 753200     215            mov x+2, #low (0 / 0x10000) 
0424 753300     215            mov x+3, #high(0 / 0x10000) 
0427 85C530     216       mov x+0, AD0DAT0
042A 7FFF       217            mov R7, #255
042C 120354     218       lcall Wait10us
042F            219       
042F            220   accumulate_loop1:
042F 85C634     221       mov y+0, AD0DAT1
0432 753500     222       mov y+1, #0
0435 753600     223       mov y+2, #0
0438 753700     224       mov y+3, #0
043B 1200E5     225       lcall add32
043E 120354     226       lcall Wait10us
0441 DFEC       227            djnz R7, accumulate_loop1
0443            228            
0443            229            ; Now divide by 16 (2^4)
0443 753410     230            mov y+0, #low (16 % 0x10000) 
0446 753500     230            mov y+1, #high(16 % 0x10000) 
0449 753600     230            mov y+2, #low (16 / 0x10000) 
044C 753700     230            mov y+3, #high(16 / 0x10000) 
044F 120227     231            lcall div32
0452            232            ; x has now the 12-bit representation of the temperature
0452            233            
0452            234            ; Convert to temperature (C)
0452 7534E8     235            mov y+0, #low (33000 % 0x10000) 
0455 753580     235            mov y+1, #high(33000 % 0x10000) 
0458 753600     235            mov y+2, #low (33000 / 0x10000) 
045B 753700     235            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
045E 12019A     236            lcall mul32
0461 753400     237            mov y+0, #low (((1<<12)) % 0x10000) 
0464 753510     237            mov y+1, #high(((1<<12)) % 0x10000) 
0467 753600     237            mov y+2, #low (((1<<12)) / 0x10000) 
046A 753700     237            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
046D 120227     238            lcall div32
0470 75343C     239            mov y+0, #low (60 % 0x10000) 
0473 753500     239            mov y+1, #high(60 % 0x10000) 
0476 753600     239            mov y+2, #low (60 / 0x10000) 
0479 753700     239            mov y+3, #high(60 / 0x10000) 
047C 120106     240            lcall sub32
047F            241            
047F            242            ;now we got the voltage value
047F            243       ;mov(dst, src)
047F 85333B     243            mov Current_Room_Volt+3, x+3
0482 85323A     243       mov Current_Room_Volt+2, x+2
0485 853139     243       mov Current_Room_Volt+1, x+1
0488 853038     243       mov Current_Room_Volt,   x
048B            244            
048B 7534A4     245            mov y+0, #low (27300 % 0x10000) 
048E 75356A     245            mov y+1, #high(27300 % 0x10000) 
0491 753600     245            mov y+2, #low (27300 / 0x10000) 
0494 753700     245            mov y+3, #high(27300 / 0x10000) 
0497 120106     246            lcall sub32
049A            247            ;now we got the temperature
049A            248       ;mov(dst, src)
049A 853333     248            mov Current_Room_Temp+3, x+3
049D 853232     248       mov Current_Room_Temp+2, x+2
04A0 853131     248       mov Current_Room_Temp+1, x+1
04A3 853030     248       mov Current_Room_Temp,   x
04A6            249            
04A6 22         250            ret
04A7            251   
04A7            252   
04A7            253   MainProgram:
04A7 75817F     254       mov SP, #0x7F
04AA 1202AD     255            lcall InitSerialPort
04AD 1202C3     256            lcall InitADC
04B0            257   
04B0 1202A0     258            lcall Wait1S ; Wait a bit so PUTTy has a chance to start
04B3 900359     259            mov dptr, #InitialMessage
04B6 120349     260            lcall SendString
04B9            261   
04B9            262   forever_loop:
04B9            263            
04B9 12041B     264            lcall Read_Room_Temp
04BC 120380     265            lcall Read_Oven_Temp
04BF            266   
04BF            267            ;display room voltage and temp
04BF            268       ;mov(dst, src)
04BF 853B33     268            mov x+3, Current_Room_Volt+3
04C2 853A32     268       mov x+2, Current_Room_Volt+2
04C5 853931     268       mov x+1, Current_Room_Volt+1
04C8 853830     268       mov x,   Current_Room_Volt
04CB 120020     269            lcall hex2bcd
04CE 1202F6     270            lcall SendTemp0; send 6 digits value
04D1 7420       271            mov a, #' '
04D3 120290     272            lcall putchar
04D6            273       ;mov(dst, src)
04D6 853333     273            mov x+3, Current_Room_Temp+3
04D9 853232     273       mov x+2, Current_Room_Temp+2
04DC 853131     273       mov x+1, Current_Room_Temp+1
04DF 853030     273       mov x,   Current_Room_Temp
04E2 120020     274            lcall hex2bcd
04E5 1202F6     275            lcall SendTemp0; send 6 digits value
04E8 7420       276            mov a, #' '
04EA 120290     277            lcall putchar
04ED            278   
04ED            279            ;display oven voltage and temp
04ED            280       ;mov(dst, src)
04ED 853F33     280            mov x+3, Current_Oven_Volt+3
04F0 853E32     280       mov x+2, Current_Oven_Volt+2
04F3 853D31     280       mov x+1, Current_Oven_Volt+1
04F6 853C30     280       mov x,   Current_Oven_Volt
04F9 120020     281            lcall hex2bcd
04FC 1202F6     282            lcall SendTemp0
04FF 7420       283            mov a, #' '
0501 120290     284            lcall putchar
0504            285       ;mov(dst, src)
0504 853733     285            mov x+3, Current_Oven_Temp+3
0507 853632     285       mov x+2, Current_Oven_Temp+2
050A 853531     285       mov x+1, Current_Oven_Temp+1
050D 853430     285       mov x,   Current_Oven_Temp
0510 120020     286            lcall hex2bcd
0513 1202F6     287            lcall SendTemp0
0516 7420       288            mov a, #' '
0518 120290     289            lcall putchar
051B            290   
051B 12033E     291            lcall Send_NewLine
051E 1202A0     292            lcall Wait1S
0521 0204B9     293            ljmp forever_loop
0524            294   end
