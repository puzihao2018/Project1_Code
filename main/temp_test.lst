0000              1   ; This example uses a technique called "decimation" with the 8-bit ADC
0000              2   ; to increase its efective resolution to 12-bits.  The output of a LM335
0000              3   ; tempererature sensor is read and then diplayed using PUTTy in degrees Celcius.
0000              4   ;
0000              5   ; Some good information about decimation found here:
0000              6   ;
0000              7   ; https://www.cypress.com/file/236481/download
0000              8   
                 10   $LIST
0000             12   ;-------------------;
0000             13   ;    Const Define   ;
0000             14   ;-------------------; 
0000             15   XTAL EQU 7373000
0000             16   BAUD EQU 115200
0000             17   BRVAL EQU ((XTAL/BAUD)-16)
0000             18   
0000             19   CCU_RATE      EQU 100      ; 100Hz, for an overflow rate of 10ms
0000             20   CCU_RELOAD    EQU ((65536-(XTAL/(2*CCU_RATE))))
0000             21   
0000             22   TIMER0_RATE   EQU 4096
0000             23   TIMER0_RELOAD EQU ((65536-(XTAL/(2*TIMER0_RATE))))
0000             24            CSEG at 0x0000
0000 020380      25            ljmp    MainProgram
0003             26   
0003             27   
0003             28   
                615   $LIST
                 30   $LIST
0290             32   
0290             33   putchar:
0290 109902      34            jbc     TI,putchar_L1
0293 80FB        35            sjmp putchar
0295             36   putchar_L1:
0295 F599        37            mov     SBUF,a
0297 22          38            ret
0298             39            
0298             40   getchar:
0298 109802      41            jbc     RI,getchar_L1
029B 80FB        42            sjmp getchar
029D             43   getchar_L1:
029D E599        44            mov     a,SBUF
029F 22          45            ret
02A0             46   
02A0             47   Wait1S:
02A0 7A28        48            mov R2, #40
02A2 79FA        49   L3:      mov R1, #250
02A4 78B8        50   L2:      mov R0, #184
02A6 D8FE        51   L1:      djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
02A8 D9FA        52            djnz R1, L2 ; 100us*250=0.025s
02AA DAF6        53            djnz R2, L3 ; 0.025s*40=1s
02AC 22          54            ret
02AD             55   
02AD             56   InitSerialPort:
02AD 75BD00      57            mov     BRGCON,#0x00
02B0 75BF00      58            mov     BRGR1,#high(BRVAL)
02B3 75BE30      59            mov     BRGR0,#low(BRVAL)
02B6 75BD03      60            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
02B9 759852      61            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
02BC 759100      62            mov     P1M1,#0x00 ; Enable pins RxD and TXD
02BF 759200      63            mov     P1M2,#0x00 ; Enable pins RxD and TXD
02C2 22          64            ret
02C3             65   
02C3             66   InitADC:
02C3             67            ; ADC0_0 is connected to P1.7
02C3             68            ; ADC0_1 is connected to P0.0
02C3             69            ; ADC0_2 is connected to P2.1
02C3             70            ; ADC0_3 is connected to P2.0
02C3             71       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
02C3 438401      72       orl P0M1, #00000001b
02C6 5385FE      73       anl P0M2, #11111110b
02C9 439180      74       orl P1M1, #10000000b
02CC 53927F      75       anl P1M2, #01111111b
02CF 43A403      76       orl P2M1, #00000011b
02D2 53A5FC      77       anl P2M2, #11111100b
02D5             78            ; Setup ADC0
02D5 D2C2        79            setb BURST0 ; Autoscan continuos conversion mode
02D7 75A120      80            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
02DA 75A30F      81            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
02DD 758E05      82            mov     ADCON0,#0x05 ; Enable the converter and start immediately
02E0             83            ; Wait for first conversion to complete
02E0             84   InitADC_L1:
02E0 E58E        85            mov     a,ADCON0
02E2 30E3FB      86            jnb     acc.3,InitADC_L1
02E5 22          87            ret
02E6             88   
02E6 30313233    89   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
02F6             90   
02F6             91   SendTemp0:
02F6 9002E6      92            mov dptr, #HexAscii 
02F9             93            
02F9             94            
02F9             95            
02F9 E53B        96            mov a, bcd+3
02FB C4          97            swap a
02FC 540F        98            anl a, #0xf
02FE 93          99            movc a, @a+dptr
02FF 120290     100            lcall putchar
0302 E53B       101            mov a, bcd+3
0304 540F       102            anl a, #0xf
0306 93         103            movc a, @a+dptr
0307 120290     104            lcall putchar
030A            105            
030A E53A       106            mov a, bcd+2
030C C4         107            swap a
030D 540F       108            anl a, #0xf
030F 93         109            movc a, @a+dptr
0310 120290     110            lcall putchar
0313 E53A       111            mov a, bcd+2
0315 540F       112            anl a, #0xf
0317 93         113            movc a, @a+dptr
0318 120290     114            lcall putchar
031B            115            
031B E539       116            mov a, bcd+1
031D C4         117            swap a
031E 540F       118            anl a, #0xf
0320 93         119            movc a, @a+dptr
0321 120290     120            lcall putchar
0324 E539       121            mov a, bcd+1
0326 540F       122            anl a, #0xf
0328 93         123            movc a, @a+dptr
0329 120290     124            lcall putchar
032C            125   
032C            126   
032C E538       127            mov a, bcd+0
032E C4         128            swap a
032F 540F       129            anl a, #0xf
0331 93         130            movc a, @a+dptr
0332 120290     131            lcall putchar
0335 E538       132            mov a, bcd+0
0337 540F       133            anl a, #0xf
0339 93         134            movc a, @a+dptr
033A 120290     135            lcall putchar
033D 22         136            ret
033E            137   
033E            138   Send_NewLine:
033E 740D       139            mov a, #'\r'
0340 120290     140            lcall putchar
0343 740A       141            mov a, #'\n'
0345 120290     142            lcall putchar   
0348 22         143            ret
0349            144            
0349            145   SendString:
0349 E4         146       clr a
034A 93         147       movc a, @a+dptr
034B 6006       148       jz SendString_L1
034D 120290     149       lcall putchar
0350 A3         150       inc dptr
0351 80F6       151       sjmp SendString  
0353            152   SendString_L1:
0353 22         153            ret
0354            154   
0354            155   Wait10us:
0354 7812       156       mov R0, #18
0356 D8FE       157       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
0358 22         158            ret
0359            159   
0359 0D0A5038   160   InitialMessage: db '\r\nP89LPC9351 ADC decimation example.\r\n', 0
     394C5043
     39333531
     20414443
     20646563
     696D6174
     696F6E20
     6578616D
     706C652E
     0D0A00
0380            161            
0380            162   MainProgram:
0380 75817F     163       mov SP, #0x7F
0383 1202AD     164            lcall InitSerialPort
0386 1202C3     165            lcall InitADC
0389            166   
0389 1202A0     167            lcall Wait1S ; Wait a bit so PUTTy has a chance to start
038C 900359     168            mov dptr, #InitialMessage
038F 120349     169            lcall SendString
0392            170   
0392            171   forever_loop:
0392            172            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
0392 753000     173            mov x+0, #low (0 % 0x10000) 
0395 753100     173            mov x+1, #high(0 % 0x10000) 
0398 753200     173            mov x+2, #low (0 / 0x10000) 
039B 753300     173            mov x+3, #high(0 / 0x10000) 
039E 85C530     174       mov x+0, AD0DAT0
03A1 7FFF       175            mov R7, #255
03A3 120354     176       lcall Wait10us
03A6            177   accumulate_loop0:
03A6 85C534     178       mov y+0, AD0DAT0
03A9 753500     179       mov y+1, #0
03AC 753600     180       mov y+2, #0
03AF 753700     181       mov y+3, #0
03B2 1200E5     182       lcall add32
03B5 120354     183       lcall Wait10us
03B8 DFEC       184            djnz R7, accumulate_loop0
03BA            185            
03BA            186            ; Now divide by 16 (2^4)
03BA 753410     187            mov y+0, #low (16 % 0x10000) 
03BD 753500     187            mov y+1, #high(16 % 0x10000) 
03C0 753600     187            mov y+2, #low (16 / 0x10000) 
03C3 753700     187            mov y+3, #high(16 / 0x10000) 
03C6 120227     188            lcall div32
03C9            189            ; x has now the 12-bit representation of the temperature
03C9            190            
03C9            191            ; Convert to temperature (C)
03C9 7534E8     192            mov y+0, #low (33000 % 0x10000) 
03CC 753580     192            mov y+1, #high(33000 % 0x10000) 
03CF 753600     192            mov y+2, #low (33000 / 0x10000) 
03D2 753700     192            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
03D5 12019A     193            lcall mul32
03D8 753400     194            mov y+0, #low (((1<<12)) % 0x10000) 
03DB 753510     194            mov y+1, #high(((1<<12)) % 0x10000) 
03DE 753600     194            mov y+2, #low (((1<<12)) / 0x10000) 
03E1 753700     194            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
03E4 120227     195            lcall div32
03E7 75343C     196            mov y+0, #low (60 % 0x10000) 
03EA 753500     196            mov y+1, #high(60 % 0x10000) 
03ED 753600     196            mov y+2, #low (60 / 0x10000) 
03F0 753700     196            mov y+3, #high(60 / 0x10000) 
03F3 120106     197            lcall sub32
03F6            198            
03F6 120020     199            lcall hex2bcd
03F9 1202F6     200            lcall SendTemp0
03FC 7420       201            mov a, #' '
03FE 120290     202            lcall putchar
0401            203            
0401            204            
0401 75340E     205            mov y+0, #low (7438 % 0x10000) 
0404 75351D     205            mov y+1, #high(7438 % 0x10000) 
0407 753600     205            mov y+2, #low (7438 / 0x10000) 
040A 753700     205            mov y+3, #high(7438 / 0x10000) 
040D 12019A     206            lcall mul32
0410 753410     207            mov y+0, #low (10000 % 0x10000) 
0413 753527     207            mov y+1, #high(10000 % 0x10000) 
0416 753600     207            mov y+2, #low (10000 / 0x10000) 
0419 753700     207            mov y+3, #high(10000 / 0x10000) 
041C 120227     208            lcall div32
041F            209            
041F 120020     210            lcall hex2bcd
0422            211            
0422 1202F6     212            lcall SendTemp0 ; Send to PUTTy, with 2 decimal digits to show that it actually works
0425            213   
0425 7420       214            mov a, #' '
0427 120290     215            lcall putchar
042A            216            
042A 753000     217            mov x+0, #low (0 % 0x10000) 
042D 753100     217            mov x+1, #high(0 % 0x10000) 
0430 753200     217            mov x+2, #low (0 / 0x10000) 
0433 753300     217            mov x+3, #high(0 / 0x10000) 
0436 85C530     218       mov x+0, AD0DAT0
0439 7FFF       219            mov R7, #255
043B 120354     220       lcall Wait10us
043E            221       
043E            222   accumulate_loop1:
043E 85C634     223       mov y+0, AD0DAT1
0441 753500     224       mov y+1, #0
0444 753600     225       mov y+2, #0
0447 753700     226       mov y+3, #0
044A 1200E5     227       lcall add32
044D 120354     228       lcall Wait10us
0450 DFEC       229            djnz R7, accumulate_loop1
0452            230            
0452            231            ; Now divide by 16 (2^4)
0452 753410     232            mov y+0, #low (16 % 0x10000) 
0455 753500     232            mov y+1, #high(16 % 0x10000) 
0458 753600     232            mov y+2, #low (16 / 0x10000) 
045B 753700     232            mov y+3, #high(16 / 0x10000) 
045E 120227     233            lcall div32
0461            234            ; x has now the 12-bit representation of the temperature
0461            235            
0461            236            ; Convert to temperature (C)
0461 7534E8     237            mov y+0, #low (33000 % 0x10000) 
0464 753580     237            mov y+1, #high(33000 % 0x10000) 
0467 753600     237            mov y+2, #low (33000 / 0x10000) 
046A 753700     237            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
046D 12019A     238            lcall mul32
0470 753400     239            mov y+0, #low (((1<<12)) % 0x10000) 
0473 753510     239            mov y+1, #high(((1<<12)) % 0x10000) 
0476 753600     239            mov y+2, #low (((1<<12)) / 0x10000) 
0479 753700     239            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
047C 120227     240            lcall div32
047F 75343C     241            mov y+0, #low (60 % 0x10000) 
0482 753500     241            mov y+1, #high(60 % 0x10000) 
0485 753600     241            mov y+2, #low (60 / 0x10000) 
0488 753700     241            mov y+3, #high(60 / 0x10000) 
048B 120106     242            lcall sub32
048E            243            
048E 120020     244            lcall hex2bcd
0491 1202F6     245            lcall SendTemp0
0494 7420       246            mov a, #' '
0496 120290     247            lcall putchar
0499            248            
0499 7534A4     249            mov y+0, #low (27300 % 0x10000) 
049C 75356A     249            mov y+1, #high(27300 % 0x10000) 
049F 753600     249            mov y+2, #low (27300 / 0x10000) 
04A2 753700     249            mov y+3, #high(27300 / 0x10000) 
04A5 120106     250            lcall sub32
04A8            251            
04A8 120020     252            lcall hex2bcd
04AB            253            
04AB 1202F6     254            lcall SendTemp0 ; Send to PUTTy, with 2 decimal digits to show that it actually works
04AE            255   
04AE 12033E     256            lcall Send_NewLine
04B1 1202A0     257            lcall Wait1S
04B4 020392     258            ljmp forever_loop
04B7            259   end
