0000              1   ; This example uses a technique called "decimation" with the 8-bit ADC
0000              2   ; to increase its efective resolution to 12-bits.  The output of a LM335
0000              3   ; tempererature sensor is read and then diplayed using PUTTy in degrees Celcius.
0000              4   ;
0000              5   ; Some good information about decimation found here:
0000              6   ;
0000              7   ; https://www.cypress.com/file/236481/download
0000              8   
                 10   $LIST
0000             12   ;-------------------;
0000             13   ;    Const Define   ;
0000             14   ;-------------------; 
0000             15   XTAL EQU 7373000
0000             16   BAUD EQU 115200
0000             17   BRVAL EQU ((XTAL/BAUD)-16)
0000             18   
0000             19   CCU_RATE      EQU 100      ; 100Hz, for an overflow rate of 10ms
0000             20   CCU_RELOAD    EQU ((65536-(XTAL/(2*CCU_RATE))))
0000             21   
0000             22   TIMER0_RATE   EQU 4096
0000             23   TIMER0_RELOAD EQU ((65536-(XTAL/(2*TIMER0_RATE))))
0000             24   
0000             25   
0000             26            CSEG at 0x0000
0000 0204A7      27            ljmp    MainProgram
0003             28   
0003             29   ;-----------------------;
0003             30   ;    Variables Define   ;
0003             31   ;-----------------------; 
0003             32   ;Variable_name: ds n
0030             33   dseg at 0x30
0030             34            Current_Room_Temp: ds 4
0034             35            Current_Oven_Temp: ds 4
0038             36            Current_Room_Volt: ds 4
003C             37            Current_Oven_Volt: ds 4
0040             38            x: ds 4
0044             39            y: ds 4
0048             40            bcd: ds 5
004D             41            
0000             42   bseg
0000             43            mf: dbit 1
0001             44            equal_flag: dbit 1
0002             45            greater_flag: dbit 1
0003             46            lessthan_flag: dbit 1
0004             47   
0004             48   
0004             49   
                591   $LIST
                 51   $LIST
0290             53   
0290             54   putchar:
0290 109902      55            jbc     TI,putchar_L1
0293 80FB        56            sjmp putchar
0295             57   putchar_L1:
0295 F599        58            mov     SBUF,a
0297 22          59            ret
0298             60            
0298             61   getchar:
0298 109802      62            jbc     RI,getchar_L1
029B 80FB        63            sjmp getchar
029D             64   getchar_L1:
029D E599        65            mov     a,SBUF
029F 22          66            ret
02A0             67   
02A0             68   Wait1S:
02A0 7A28        69            mov R2, #40
02A2 79FA        70   L3:      mov R1, #250
02A4 78B8        71   L2:      mov R0, #184
02A6 D8FE        72   L1:      djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
02A8 D9FA        73            djnz R1, L2 ; 100us*250=0.025s
02AA DAF6        74            djnz R2, L3 ; 0.025s*40=1s
02AC 22          75            ret
02AD             76   
02AD             77   InitSerialPort:
02AD 75BD00      78            mov     BRGCON,#0x00
02B0 75BF00      79            mov     BRGR1,#high(BRVAL)
02B3 75BE30      80            mov     BRGR0,#low(BRVAL)
02B6 75BD03      81            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
02B9 759852      82            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
02BC 759100      83            mov     P1M1,#0x00 ; Enable pins RxD and TXD
02BF 759200      84            mov     P1M2,#0x00 ; Enable pins RxD and TXD
02C2 22          85            ret
02C3             86   
02C3             87   InitADC:
02C3             88            ; ADC0_0 is connected to P1.7
02C3             89            ; ADC0_1 is connected to P0.0
02C3             90            ; ADC0_2 is connected to P2.1
02C3             91            ; ADC0_3 is connected to P2.0
02C3             92       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
02C3 438401      93       orl P0M1, #00000001b
02C6 5385FE      94       anl P0M2, #11111110b
02C9 439180      95       orl P1M1, #10000000b
02CC 53927F      96       anl P1M2, #01111111b
02CF 43A403      97       orl P2M1, #00000011b
02D2 53A5FC      98       anl P2M2, #11111100b
02D5             99            ; Setup ADC0
02D5 D2C2       100            setb BURST0 ; Autoscan continuos conversion mode
02D7 75A120     101            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
02DA 75A30F     102            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
02DD 758E05     103            mov     ADCON0,#0x05 ; Enable the converter and start immediately
02E0            104            ; Wait for first conversion to complete
02E0            105   InitADC_L1:
02E0 E58E       106            mov     a,ADCON0
02E2 30E3FB     107            jnb     acc.3,InitADC_L1
02E5 22         108            ret
02E6            109   
02E6 30313233   110   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
02F6            111   
02F6            112   SendTemp0:
02F6 9002E6     113            mov dptr, #HexAscii 
02F9            114            
02F9            115            
02F9            116            
02F9 E54B       117            mov a, bcd+3
02FB C4         118            swap a
02FC 540F       119            anl a, #0xf
02FE 93         120            movc a, @a+dptr
02FF 120290     121            lcall putchar
0302 E54B       122            mov a, bcd+3
0304 540F       123            anl a, #0xf
0306 93         124            movc a, @a+dptr
0307 120290     125            lcall putchar
030A            126            
030A E54A       127            mov a, bcd+2
030C C4         128            swap a
030D 540F       129            anl a, #0xf
030F 93         130            movc a, @a+dptr
0310 120290     131            lcall putchar
0313 E54A       132            mov a, bcd+2
0315 540F       133            anl a, #0xf
0317 93         134            movc a, @a+dptr
0318 120290     135            lcall putchar
031B            136            
031B E549       137            mov a, bcd+1
031D C4         138            swap a
031E 540F       139            anl a, #0xf
0320 93         140            movc a, @a+dptr
0321 120290     141            lcall putchar
0324 E549       142            mov a, bcd+1
0326 540F       143            anl a, #0xf
0328 93         144            movc a, @a+dptr
0329 120290     145            lcall putchar
032C            146   
032C            147   
032C E548       148            mov a, bcd+0
032E C4         149            swap a
032F 540F       150            anl a, #0xf
0331 93         151            movc a, @a+dptr
0332 120290     152            lcall putchar
0335 E548       153            mov a, bcd+0
0337 540F       154            anl a, #0xf
0339 93         155            movc a, @a+dptr
033A 120290     156            lcall putchar
033D 22         157            ret
033E            158   
033E            159   Send_NewLine:
033E 740D       160            mov a, #'\r'
0340 120290     161            lcall putchar
0343 740A       162            mov a, #'\n'
0345 120290     163            lcall putchar   
0348 22         164            ret
0349            165            
0349            166   SendString:
0349 E4         167       clr a
034A 93         168       movc a, @a+dptr
034B 6006       169       jz SendString_L1
034D 120290     170       lcall putchar
0350 A3         171       inc dptr
0351 80F6       172       sjmp SendString  
0353            173   SendString_L1:
0353 22         174            ret
0354            175   
0354            176   Wait10us:
0354 7812       177       mov R0, #18
0356 D8FE       178       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
0358 22         179            ret
0359            180   
0359 0D0A5038   181   InitialMessage: db '\r\nP89LPC9351 ADC decimation example.\r\n', 0
     394C5043
     39333531
     20414443
     20646563
     696D6174
     696F6E20
     6578616D
     706C652E
     0D0A00
0380            182   
0380            183   Read_Oven_Temp:
0380            184            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
0380 754000     185            mov x+0, #low (0 % 0x10000) 
0383 754100     185            mov x+1, #high(0 % 0x10000) 
0386 754200     185            mov x+2, #low (0 / 0x10000) 
0389 754300     185            mov x+3, #high(0 / 0x10000) 
038C 85C540     186       mov x+0, AD0DAT0
038F 7FFF       187            mov R7, #255
0391 120354     188       lcall Wait10us
0394            189   accumulate_loop0:
0394 85C544     190       mov y+0, AD0DAT0
0397 754500     191       mov y+1, #0
039A 754600     192       mov y+2, #0
039D 754700     193       mov y+3, #0
03A0 1200E5     194       lcall add32
03A3 120354     195       lcall Wait10us
03A6 DFEC       196            djnz R7, accumulate_loop0
03A8            197            
03A8            198            ; Now divide by 16 (2^4)
03A8 754410     199            mov y+0, #low (16 % 0x10000) 
03AB 754500     199            mov y+1, #high(16 % 0x10000) 
03AE 754600     199            mov y+2, #low (16 / 0x10000) 
03B1 754700     199            mov y+3, #high(16 / 0x10000) 
03B4 120227     200            lcall div32
03B7            201            ; x has now the 12-bit representation of the temperature
03B7            202            
03B7            203            ; Convert to temperature (C)
03B7 7544E8     204            mov y+0, #low (33000 % 0x10000) 
03BA 754580     204            mov y+1, #high(33000 % 0x10000) 
03BD 754600     204            mov y+2, #low (33000 / 0x10000) 
03C0 754700     204            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
03C3 12019A     205            lcall mul32
03C6 754400     206            mov y+0, #low (((1<<12)) % 0x10000) 
03C9 754510     206            mov y+1, #high(((1<<12)) % 0x10000) 
03CC 754600     206            mov y+2, #low (((1<<12)) / 0x10000) 
03CF 754700     206            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
03D2 120227     207            lcall div32
03D5 75443C     208            mov y+0, #low (60 % 0x10000) 
03D8 754500     208            mov y+1, #high(60 % 0x10000) 
03DB 754600     208            mov y+2, #low (60 / 0x10000) 
03DE 754700     208            mov y+3, #high(60 / 0x10000) 
03E1 120106     209            lcall sub32
03E4            210   
03E4            211       ;mov(dst, src)
03E4 85433F     211            mov Current_Oven_Volt+3, x+3
03E7 85423E     211       mov Current_Oven_Volt+2, x+2
03EA 85413D     211       mov Current_Oven_Volt+1, x+1
03ED 85403C     211       mov Current_Oven_Volt,   x; store the hex value of voltage
03F0            212            
03F0 75440E     213            mov y+0, #low (7438 % 0x10000) 
03F3 75451D     213            mov y+1, #high(7438 % 0x10000) 
03F6 754600     213            mov y+2, #low (7438 / 0x10000) 
03F9 754700     213            mov y+3, #high(7438 / 0x10000) 
03FC 12019A     214            lcall mul32
03FF 754410     215            mov y+0, #low (10000 % 0x10000) 
0402 754527     215            mov y+1, #high(10000 % 0x10000) 
0405 754600     215            mov y+2, #low (10000 / 0x10000) 
0408 754700     215            mov y+3, #high(10000 / 0x10000) 
040B 120227     216            lcall div32
040E            217            ;now we got the relateive temp number in hex
040E            218   
040E            219            ;mov32(y, Current_Room_Temp)
040E            220            ;lcall add32
040E            221   
040E            222       ;mov(dst, src)
040E 854337     222            mov Current_Oven_Temp+3, x+3
0411 854236     222       mov Current_Oven_Temp+2, x+2
0414 854135     222       mov Current_Oven_Temp+1, x+1
0417 854034     222       mov Current_Oven_Temp,   x
041A 22         223            ret
041B            224   
041B            225   Read_Room_Temp:
041B            226            
041B 754000     227            mov x+0, #low (0 % 0x10000) 
041E 754100     227            mov x+1, #high(0 % 0x10000) 
0421 754200     227            mov x+2, #low (0 / 0x10000) 
0424 754300     227            mov x+3, #high(0 / 0x10000) 
0427 85C540     228       mov x+0, AD0DAT0
042A 7FFF       229            mov R7, #255
042C 120354     230       lcall Wait10us
042F            231       
042F            232   accumulate_loop1:
042F 85C644     233       mov y+0, AD0DAT1
0432 754500     234       mov y+1, #0
0435 754600     235       mov y+2, #0
0438 754700     236       mov y+3, #0
043B 1200E5     237       lcall add32
043E 120354     238       lcall Wait10us
0441 DFEC       239            djnz R7, accumulate_loop1
0443            240            
0443            241            ; Now divide by 16 (2^4)
0443 754410     242            mov y+0, #low (16 % 0x10000) 
0446 754500     242            mov y+1, #high(16 % 0x10000) 
0449 754600     242            mov y+2, #low (16 / 0x10000) 
044C 754700     242            mov y+3, #high(16 / 0x10000) 
044F 120227     243            lcall div32
0452            244            ; x has now the 12-bit representation of the temperature
0452            245            
0452            246            ; Convert to temperature (C)
0452 7544E8     247            mov y+0, #low (33000 % 0x10000) 
0455 754580     247            mov y+1, #high(33000 % 0x10000) 
0458 754600     247            mov y+2, #low (33000 / 0x10000) 
045B 754700     247            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
045E 12019A     248            lcall mul32
0461 754400     249            mov y+0, #low (((1<<12)) % 0x10000) 
0464 754510     249            mov y+1, #high(((1<<12)) % 0x10000) 
0467 754600     249            mov y+2, #low (((1<<12)) / 0x10000) 
046A 754700     249            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
046D 120227     250            lcall div32
0470 75443C     251            mov y+0, #low (60 % 0x10000) 
0473 754500     251            mov y+1, #high(60 % 0x10000) 
0476 754600     251            mov y+2, #low (60 / 0x10000) 
0479 754700     251            mov y+3, #high(60 / 0x10000) 
047C 120106     252            lcall sub32
047F            253            
047F            254            ;now we got the voltage value
047F            255       ;mov(dst, src)
047F 85433B     255            mov Current_Room_Volt+3, x+3
0482 85423A     255       mov Current_Room_Volt+2, x+2
0485 854139     255       mov Current_Room_Volt+1, x+1
0488 854038     255       mov Current_Room_Volt,   x
048B            256            
048B 7544A4     257            mov y+0, #low (27300 % 0x10000) 
048E 75456A     257            mov y+1, #high(27300 % 0x10000) 
0491 754600     257            mov y+2, #low (27300 / 0x10000) 
0494 754700     257            mov y+3, #high(27300 / 0x10000) 
0497 120106     258            lcall sub32
049A            259            ;now we got the temperature
049A            260       ;mov(dst, src)
049A 854333     260            mov Current_Room_Temp+3, x+3
049D 854232     260       mov Current_Room_Temp+2, x+2
04A0 854131     260       mov Current_Room_Temp+1, x+1
04A3 854030     260       mov Current_Room_Temp,   x
04A6            261            
04A6 22         262            ret
04A7            263   
04A7            264   
04A7            265   MainProgram:
04A7 75817F     266       mov SP, #0x7F
04AA 1202AD     267            lcall InitSerialPort
04AD 1202C3     268            lcall InitADC
04B0            269   
04B0 1202A0     270            lcall Wait1S ; Wait a bit so PUTTy has a chance to start
04B3 900359     271            mov dptr, #InitialMessage
04B6 120349     272            lcall SendString
04B9            273   
04B9            274   forever_loop:
04B9            275            
04B9 12041B     276            lcall Read_Room_Temp
04BC 120380     277            lcall Read_Oven_Temp
04BF            278   
04BF            279            ;display room voltage and temp
04BF            280       ;mov(dst, src)
04BF 853B43     280            mov x+3, Current_Room_Volt+3
04C2 853A42     280       mov x+2, Current_Room_Volt+2
04C5 853941     280       mov x+1, Current_Room_Volt+1
04C8 853840     280       mov x,   Current_Room_Volt
04CB 120020     281            lcall hex2bcd
04CE 1202F6     282            lcall SendTemp0; send 6 digits value
04D1 7420       283            mov a, #' '
04D3 120290     284            lcall putchar
04D6            285       ;mov(dst, src)
04D6 853343     285            mov x+3, Current_Room_Temp+3
04D9 853242     285       mov x+2, Current_Room_Temp+2
04DC 853141     285       mov x+1, Current_Room_Temp+1
04DF 853040     285       mov x,   Current_Room_Temp
04E2 120020     286            lcall hex2bcd
04E5 1202F6     287            lcall SendTemp0; send 6 digits value
04E8 7420       288            mov a, #' '
04EA 120290     289            lcall putchar
04ED            290   
04ED            291            ;display oven voltage and temp
04ED            292       ;mov(dst, src)
04ED 853F43     292            mov x+3, Current_Oven_Volt+3
04F0 853E42     292       mov x+2, Current_Oven_Volt+2
04F3 853D41     292       mov x+1, Current_Oven_Volt+1
04F6 853C40     292       mov x,   Current_Oven_Volt
04F9 120020     293            lcall hex2bcd
04FC 1202F6     294            lcall SendTemp0
04FF 7420       295            mov a, #' '
0501 120290     296            lcall putchar
0504            297       ;mov(dst, src)
0504 853743     297            mov x+3, Current_Oven_Temp+3
0507 853642     297       mov x+2, Current_Oven_Temp+2
050A 853541     297       mov x+1, Current_Oven_Temp+1
050D 853440     297       mov x,   Current_Oven_Temp
0510 120020     298            lcall hex2bcd
0513 1202F6     299            lcall SendTemp0
0516 7420       300            mov a, #' '
0518 120290     301            lcall putchar
051B            302   
051B 12033E     303            lcall Send_NewLine
051E 1202A0     304            lcall Wait1S
0521 0204B9     305            ljmp forever_loop
0524            306   end
