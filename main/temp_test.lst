0000              1   ; This example uses a technique called "decimation" with the 8-bit ADC
0000              2   ; to increase its efective resolution to 12-bits.  The output of a LM335
0000              3   ; tempererature sensor is read and then diplayed using PUTTy in degrees Celcius.
0000              4   ;
0000              5   ; Some good information about decimation found here:
0000              6   ;
0000              7   ; https://www.cypress.com/file/236481/download
0000              8   
                 10   $LIST
0000             12   ;-------------------;
0000             13   ;    Const Define   ;
0000             14   ;-------------------; 
0000             15   XTAL EQU 7373000
0000             16   BAUD EQU 115200
0000             17   BRVAL EQU ((XTAL/BAUD)-16)
0000             18   
0000             19   CCU_RATE      EQU 100      ; 100Hz, for an overflow rate of 10ms
0000             20   CCU_RELOAD    EQU ((65536-(XTAL/(2*CCU_RATE))))
0000             21   
0000             22   TIMER0_RATE   EQU 4096
0000             23   TIMER0_RELOAD EQU ((65536-(XTAL/(2*TIMER0_RATE))))
0000             24   
0000             25   
0000             26            CSEG at 0x0000
0000 0204B7      27            ljmp    MainProgram
0003             28   
0003             29   ;-----------------------;
0003             30   ;    Variables Define   ;
0003             31   ;-----------------------; 
0003             32   ;Variable_name: ds n
0030             33   dseg at 0x30
0030             34            Current_Room_Temp: ds 4
0034             35            Current_Oven_Temp: ds 4
0038             36            Current_Room_Volt: ds 4
003C             37            Current_Oven_Volt: ds 4
0040             38            x: ds 4
0044             39            y: ds 4
0048             40            bcd: ds 5
004D             41            
0000             42   bseg
0000             43            mf: dbit 1
0001             44            equal_flag: dbit 1
0002             45            greater_flag: dbit 1
0003             46            lessthan_flag: dbit 1
0004             47   
0004             48   
0004             49   
                559   $LIST
                 51   $LIST
0273             53   
0273             54   putchar:
0273 109902      55            jbc     TI,putchar_L1
0276 80FB        56            sjmp putchar
0278             57   putchar_L1:
0278 F599        58            mov     SBUF,a
027A 22          59            ret
027B             60            
027B             61   getchar:
027B 109802      62            jbc     RI,getchar_L1
027E 80FB        63            sjmp getchar
0280             64   getchar_L1:
0280 E599        65            mov     a,SBUF
0282 22          66            ret
0283             67   
0283             68   Wait1S:
0283 7A28        69            mov R2, #40
0285 79FA        70   L3:      mov R1, #250
0287 78B8        71   L2:      mov R0, #184
0289 D8FE        72   L1:      djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
028B D9FA        73            djnz R1, L2 ; 100us*250=0.025s
028D DAF6        74            djnz R2, L3 ; 0.025s*40=1s
028F 22          75            ret
0290             76   
0290             77   InitSerialPort:
0290 75BD00      78            mov     BRGCON,#0x00
0293 75BF00      79            mov     BRGR1,#high(BRVAL)
0296 75BE30      80            mov     BRGR0,#low(BRVAL)
0299 75BD03      81            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
029C 759852      82            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
029F 759100      83            mov     P1M1,#0x00 ; Enable pins RxD and TXD
02A2 759200      84            mov     P1M2,#0x00 ; Enable pins RxD and TXD
02A5 22          85            ret
02A6             86   
02A6             87   InitADC:
02A6             88            ; ADC0_0 is connected to P1.7
02A6             89            ; ADC0_1 is connected to P0.0
02A6             90            ; ADC0_2 is connected to P2.1
02A6             91            ; ADC0_3 is connected to P2.0
02A6             92       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
02A6 438401      93       orl P0M1, #00000001b
02A9 5385FE      94       anl P0M2, #11111110b
02AC 439180      95       orl P1M1, #10000000b
02AF 53927F      96       anl P1M2, #01111111b
02B2 43A403      97       orl P2M1, #00000011b
02B5 53A5FC      98       anl P2M2, #11111100b
02B8             99            ; Setup ADC0
02B8 D2C2       100            setb BURST0 ; Autoscan continuos conversion mode
02BA 75A120     101            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
02BD 75A30F     102            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
02C0 758E05     103            mov     ADCON0,#0x05 ; Enable the converter and start immediately
02C3            104            ; Wait for first conversion to complete
02C3            105   InitADC_L1:
02C3 E58E       106            mov     a,ADCON0
02C5 30E3FB     107            jnb     acc.3,InitADC_L1
02C8 22         108            ret
02C9            109   
02C9 30313233   110   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
02D9            111   
02D9            112   SendTemp0:
02D9 9002C9     113            mov dptr, #HexAscii 
02DC            114            
02DC            115            
02DC            116            
02DC E54B       117            mov a, bcd+3
02DE C4         118            swap a
02DF 540F       119            anl a, #0xf
02E1 93         120            movc a, @a+dptr
02E2 120273     121            lcall putchar
02E5 E54B       122            mov a, bcd+3
02E7 540F       123            anl a, #0xf
02E9 93         124            movc a, @a+dptr
02EA 120273     125            lcall putchar
02ED            126            
02ED E54A       127            mov a, bcd+2
02EF C4         128            swap a
02F0 540F       129            anl a, #0xf
02F2 93         130            movc a, @a+dptr
02F3 120273     131            lcall putchar
02F6 E54A       132            mov a, bcd+2
02F8 540F       133            anl a, #0xf
02FA 93         134            movc a, @a+dptr
02FB 120273     135            lcall putchar
02FE            136            
02FE E549       137            mov a, bcd+1
0300 C4         138            swap a
0301 540F       139            anl a, #0xf
0303 93         140            movc a, @a+dptr
0304 120273     141            lcall putchar
0307 E549       142            mov a, bcd+1
0309 540F       143            anl a, #0xf
030B 93         144            movc a, @a+dptr
030C 120273     145            lcall putchar
030F            146   
030F            147   
030F E548       148            mov a, bcd+0
0311 C4         149            swap a
0312 540F       150            anl a, #0xf
0314 93         151            movc a, @a+dptr
0315 120273     152            lcall putchar
0318 E548       153            mov a, bcd+0
031A 540F       154            anl a, #0xf
031C 93         155            movc a, @a+dptr
031D 120273     156            lcall putchar
0320 22         157            ret
0321            158   
0321            159   Send_NewLine:
0321 740D       160            mov a, #'\r'
0323 120273     161            lcall putchar
0326 740A       162            mov a, #'\n'
0328 120273     163            lcall putchar   
032B 22         164            ret
032C            165            
032C            166   SendString:
032C E4         167       clr a
032D 93         168       movc a, @a+dptr
032E 6006       169       jz SendString_L1
0330 120273     170       lcall putchar
0333 A3         171       inc dptr
0334 80F6       172       sjmp SendString  
0336            173   SendString_L1:
0336 22         174            ret
0337            175   
0337            176   Wait10us:
0337 7812       177       mov R0, #18
0339 D8FE       178       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
033B 22         179            ret
033C            180   
033C 0D0A5038   181   InitialMessage: db '\r\nP89LPC9351 ADC decimation example.\r\n', 0
     394C5043
     39333531
     20414443
     20646563
     696D6174
     696F6E20
     6578616D
     706C652E
     0D0A00
0363            182   
0363            183   Read_Oven_Temp:
0363            184            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
0363 754000     185            mov x+0, #low (0 % 0x10000) 
0366 754100     185            mov x+1, #high(0 % 0x10000) 
0369 754200     185            mov x+2, #low (0 / 0x10000) 
036C 754300     185            mov x+3, #high(0 / 0x10000) 
036F 85C740     186       mov x+0, ad0dat2
0372 7FFF       187            mov R7, #255
0374 120337     188       lcall Wait10us
0377            189   accumulate_loop0:
0377 85C744     190       mov y+0, ad0dat2
037A 754500     191       mov y+1, #0
037D 754600     192       mov y+2, #0
0380 754700     193       mov y+3, #0
0383 1200C8     194       lcall add32
0386 120337     195       lcall Wait10us
0389 DFEC       196            djnz R7, accumulate_loop0
038B            197            
038B            198            ; Now divide by 16 (2^4)
038B 754410     199            mov y+0, #low (16 % 0x10000) 
038E 754500     199            mov y+1, #high(16 % 0x10000) 
0391 754600     199            mov y+2, #low (16 / 0x10000) 
0394 754700     199            mov y+3, #high(16 / 0x10000) 
0397 12020A     200            lcall div32
039A            201            ; x has now the 12-bit representation of the temperature
039A            202            
039A            203            ; Convert to temperature (C)
039A 7544E8     204            mov y+0, #low (33000 % 0x10000) 
039D 754580     204            mov y+1, #high(33000 % 0x10000) 
03A0 754600     204            mov y+2, #low (33000 / 0x10000) 
03A3 754700     204            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
03A6 12017D     205            lcall mul32
03A9 754400     206            mov y+0, #low (((1<<12)) % 0x10000) 
03AC 754510     206            mov y+1, #high(((1<<12)) % 0x10000) 
03AF 754600     206            mov y+2, #low (((1<<12)) / 0x10000) 
03B2 754700     206            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
03B5 12020A     207            lcall div32
03B8 75443C     208            mov y+0, #low (60 % 0x10000) 
03BB 754500     208            mov y+1, #high(60 % 0x10000) 
03BE 754600     208            mov y+2, #low (60 / 0x10000) 
03C1 754700     208            mov y+3, #high(60 / 0x10000) 
03C4 1200E9     209            lcall sub32
03C7            210   
03C7            211       ;mov(dst, src)
03C7 85433F     211            mov Current_Oven_Volt+3, x+3
03CA 85423E     211       mov Current_Oven_Volt+2, x+2
03CD 85413D     211       mov Current_Oven_Volt+1, x+1
03D0 85403C     211       mov Current_Oven_Volt,   x; store the hex value of voltage
03D3            212            
03D3 75440E     213            mov y+0, #low (7438 % 0x10000) 
03D6 75451D     213            mov y+1, #high(7438 % 0x10000) 
03D9 754600     213            mov y+2, #low (7438 / 0x10000) 
03DC 754700     213            mov y+3, #high(7438 / 0x10000) 
03DF 12017D     214            lcall mul32
03E2 754410     215            mov y+0, #low (10000 % 0x10000) 
03E5 754527     215            mov y+1, #high(10000 % 0x10000) 
03E8 754600     215            mov y+2, #low (10000 / 0x10000) 
03EB 754700     215            mov y+3, #high(10000 / 0x10000) 
03EE 12020A     216            lcall div32
03F1 7544B4     217            mov y+0, #low (180 % 0x10000) 
03F4 754500     217            mov y+1, #high(180 % 0x10000) 
03F7 754600     217            mov y+2, #low (180 / 0x10000) 
03FA 754700     217            mov y+3, #high(180 / 0x10000) 
03FD 1200E9     218            lcall sub32
0400            219            ;now we got the relateive temp number in hex
0400            220   
0400            221       ;mov(dst, src)
0400 853347     221            mov y+3, Current_Room_Temp+3
0403 853246     221       mov y+2, Current_Room_Temp+2
0406 853145     221       mov y+1, Current_Room_Temp+1
0409 853044     221       mov y,   Current_Room_Temp
040C 1200C8     222            lcall add32
040F            223   
040F            224       ;mov(dst, src)
040F 854337     224            mov Current_Oven_Temp+3, x+3
0412 854236     224       mov Current_Oven_Temp+2, x+2
0415 854135     224       mov Current_Oven_Temp+1, x+1
0418 854034     224       mov Current_Oven_Temp,   x
041B 22         225            ret
041C            226   
041C            227   Read_Room_Temp:
041C            228            
041C 754000     229            mov x+0, #low (0 % 0x10000) 
041F 754100     229            mov x+1, #high(0 % 0x10000) 
0422 754200     229            mov x+2, #low (0 / 0x10000) 
0425 754300     229            mov x+3, #high(0 / 0x10000) 
0428 85C740     230       mov x+0, ad0dat2
042B 7FFF       231            mov R7, #255
042D 120337     232       lcall Wait10us
0430            233       
0430            234   accumulate_loop1:
0430 85F444     235       mov y+0, ad0dat3
0433 754500     236       mov y+1, #0
0436 754600     237       mov y+2, #0
0439 754700     238       mov y+3, #0
043C 1200C8     239       lcall add32
043F 120337     240       lcall Wait10us
0442 DFEC       241            djnz R7, accumulate_loop1
0444            242            
0444            243            ; Now divide by 16 (2^4)
0444 754410     244            mov y+0, #low (16 % 0x10000) 
0447 754500     244            mov y+1, #high(16 % 0x10000) 
044A 754600     244            mov y+2, #low (16 / 0x10000) 
044D 754700     244            mov y+3, #high(16 / 0x10000) 
0450 12020A     245            lcall div32
0453            246            ; x has now the 12-bit representation of the temperature
0453            247            
0453            248            ; Convert to temperature (C)
0453 7544E8     249            mov y+0, #low (33000 % 0x10000) 
0456 754580     249            mov y+1, #high(33000 % 0x10000) 
0459 754600     249            mov y+2, #low (33000 / 0x10000) 
045C 754700     249            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
045F 12017D     250            lcall mul32
0462 754400     251            mov y+0, #low (((1<<12)) % 0x10000) 
0465 754510     251            mov y+1, #high(((1<<12)) % 0x10000) 
0468 754600     251            mov y+2, #low (((1<<12)) / 0x10000) 
046B 754700     251            mov y+3, #high(((1<<12)) / 0x10000)  ; 2^12-1
046E 12020A     252            lcall div32
0471 75443C     253            mov y+0, #low (60 % 0x10000) 
0474 754500     253            mov y+1, #high(60 % 0x10000) 
0477 754600     253            mov y+2, #low (60 / 0x10000) 
047A 754700     253            mov y+3, #high(60 / 0x10000) 
047D 1200E9     254            lcall sub32
0480            255            
0480            256            ;now we got the voltage value
0480            257       ;mov(dst, src)
0480 85433B     257            mov Current_Room_Volt+3, x+3
0483 85423A     257       mov Current_Room_Volt+2, x+2
0486 854139     257       mov Current_Room_Volt+1, x+1
0489 854038     257       mov Current_Room_Volt,   x
048C            258            
048C 7544A4     259            mov y+0, #low (27300 % 0x10000) 
048F 75456A     259            mov y+1, #high(27300 % 0x10000) 
0492 754600     259            mov y+2, #low (27300 / 0x10000) 
0495 754700     259            mov y+3, #high(27300 / 0x10000) 
0498 1200E9     260            lcall sub32
049B            261            ;now we got the temperature
049B 7544F4     262            mov y+0, #low (500 % 0x10000) 
049E 754501     262            mov y+1, #high(500 % 0x10000) 
04A1 754600     262            mov y+2, #low (500 / 0x10000) 
04A4 754700     262            mov y+3, #high(500 / 0x10000) 
04A7 1200E9     263            lcall sub32
04AA            264       ;mov(dst, src)
04AA 854333     264            mov Current_Room_Temp+3, x+3
04AD 854232     264       mov Current_Room_Temp+2, x+2
04B0 854131     264       mov Current_Room_Temp+1, x+1
04B3 854030     264       mov Current_Room_Temp,   x
04B6            265            
04B6 22         266            ret
04B7            267   
04B7            268   
04B7            269   MainProgram:
04B7 75817F     270       mov SP, #0x7F
04BA 120290     271            lcall InitSerialPort
04BD 1202A6     272            lcall InitADC
04C0            273   
04C0 120283     274            lcall Wait1S ; Wait a bit so PUTTy has a chance to start
04C3 90033C     275            mov dptr, #InitialMessage
04C6 12032C     276            lcall SendString
04C9            277   
04C9            278   forever_loop:
04C9            279            
04C9 12041C     280            lcall Read_Room_Temp
04CC 120363     281            lcall Read_Oven_Temp
04CF            282   
04CF            283            ;display room voltage and temp
04CF            284       ;mov(dst, src)
04CF 853B43     284            mov x+3, Current_Room_Volt+3
04D2 853A42     284       mov x+2, Current_Room_Volt+2
04D5 853941     284       mov x+1, Current_Room_Volt+1
04D8 853840     284       mov x,   Current_Room_Volt
04DB 120003     285            lcall hex2bcd
04DE 1202D9     286            lcall SendTemp0; send 6 digits value
04E1 7420       287            mov a, #' '
04E3 120273     288            lcall putchar
04E6            289       ;mov(dst, src)
04E6 853343     289            mov x+3, Current_Room_Temp+3
04E9 853242     289       mov x+2, Current_Room_Temp+2
04EC 853141     289       mov x+1, Current_Room_Temp+1
04EF 853040     289       mov x,   Current_Room_Temp
04F2 120003     290            lcall hex2bcd
04F5 1202D9     291            lcall SendTemp0; send 6 digits value
04F8 7420       292            mov a, #' '
04FA 120273     293            lcall putchar
04FD            294   
04FD            295            ;display oven voltage and temp
04FD            296       ;mov(dst, src)
04FD 853F43     296            mov x+3, Current_Oven_Volt+3
0500 853E42     296       mov x+2, Current_Oven_Volt+2
0503 853D41     296       mov x+1, Current_Oven_Volt+1
0506 853C40     296       mov x,   Current_Oven_Volt
0509 120003     297            lcall hex2bcd
050C 1202D9     298            lcall SendTemp0
050F 7420       299            mov a, #' '
0511 120273     300            lcall putchar
0514            301       ;mov(dst, src)
0514 853743     301            mov x+3, Current_Oven_Temp+3
0517 853642     301       mov x+2, Current_Oven_Temp+2
051A 853541     301       mov x+1, Current_Oven_Temp+1
051D 853440     301       mov x,   Current_Oven_Temp
0520 120003     302            lcall hex2bcd
0523 1202D9     303            lcall SendTemp0
0526 7420       304            mov a, #' '
0528 120273     305            lcall putchar
052B            306   
052B 120321     307            lcall Send_NewLine
052E 120283     308            lcall Wait1S
0531 0204C9     309            ljmp forever_loop
0534            310   end
