0000              1   ; This example uses a technique called "decimation" with the 8-bit ADC
0000              2   ; to increase its efective resolution to 12-bits.  The output of a LM335
0000              3   ; tempererature sensor is read and then diplayed using PUTTy in degrees Celcius.
0000              4   ;
0000              5   ; Some good information about decimation found here:
0000              6   ;
0000              7   ; https://www.cypress.com/file/236481/download
0000              8   
                 10   $LIST
0000             12   
0000             13   XTAL EQU 7373000
0000             14   BAUD EQU 115200
0000             15   BRVAL EQU ((XTAL/BAUD)-16)
0000             16   
0000             17            CSEG at 0x0000
0000 020362      18            ljmp    MainProgram
0003             19   
0030             20   DSEG at 0x30
0030             21   x:   ds 4
0034             22   y:   ds 4
0038             23   bcd: ds 5
003D             24   
0000             25   BSEG
0000             26   mf: dbit 1
0001             27   
                546   $LIST
                 29   $LIST
0273             31   
0273             32   putchar:
0273 109902      33            jbc     TI,putchar_L1
0276 80FB        34            sjmp putchar
0278             35   putchar_L1:
0278 F599        36            mov     SBUF,a
027A 22          37            ret
027B             38            
027B             39   getchar:
027B 109802      40            jbc     RI,getchar_L1
027E 80FB        41            sjmp getchar
0280             42   getchar_L1:
0280 E599        43            mov     a,SBUF
0282 22          44            ret
0283             45   
0283             46   Wait1S:
0283 7A28        47            mov R2, #40
0285 79FA        48   L3:      mov R1, #250
0287 78B8        49   L2:      mov R0, #184
0289 D8FE        50   L1:      djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
028B D9FA        51            djnz R1, L2 ; 100us*250=0.025s
028D DAF6        52            djnz R2, L3 ; 0.025s*40=1s
028F 22          53            ret
0290             54   
0290             55   InitSerialPort:
0290 75BD00      56            mov     BRGCON,#0x00
0293 75BF00      57            mov     BRGR1,#high(BRVAL)
0296 75BE30      58            mov     BRGR0,#low(BRVAL)
0299 75BD03      59            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
029C 759852      60            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
029F 759100      61            mov     P1M1,#0x00 ; Enable pins RxD and TXD
02A2 759200      62            mov     P1M2,#0x00 ; Enable pins RxD and TXD
02A5 22          63            ret
02A6             64   
02A6             65   InitADC:
02A6             66            ; ADC0_0 is connected to P1.7
02A6             67            ; ADC0_1 is connected to P0.0
02A6             68            ; ADC0_2 is connected to P2.1
02A6             69            ; ADC0_3 is connected to P2.0
02A6             70       ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
02A6 438401      71       orl P0M1, #00000001b
02A9 5385FE      72       anl P0M2, #11111110b
02AC 439180      73       orl P1M1, #10000000b
02AF 53927F      74       anl P1M2, #01111111b
02B2 43A403      75       orl P2M1, #00000011b
02B5 53A5FC      76       anl P2M2, #11111100b
02B8             77            ; Setup ADC0
02B8 D2C2        78            setb BURST0 ; Autoscan continuos conversion mode
02BA 75A120      79            mov     ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
02BD 75A30F      80            mov     ADINS,#0x0f ; Select the four channels of ADC0 for conversion
02C0 758E05      81            mov     ADCON0,#0x05 ; Enable the converter and start immediately
02C3             82            ; Wait for first conversion to complete
02C3             83   InitADC_L1:
02C3 E58E        84            mov     a,ADCON0
02C5 30E3FB      85            jnb     acc.3,InitADC_L1
02C8 22          86            ret
02C9             87   
02C9 30313233    88   HexAscii: db '0123456789ABCDEF'
     34353637
     38394142
     43444546
02D9             89   
02D9             90   SendTemp:
02D9 9002C9      91            mov dptr, #HexAscii 
02DC             92            
02DC             93            
02DC             94            
02DC E53B        95            mov a, bcd+3
02DE C4          96            swap a
02DF 540F        97            anl a, #0xf
02E1 93          98            movc a, @a+dptr
02E2 120273      99            lcall putchar
02E5 E53B       100            mov a, bcd+3
02E7 540F       101            anl a, #0xf
02E9 93         102            movc a, @a+dptr
02EA 120273     103            lcall putchar
02ED            104            
02ED E53A       105            mov a, bcd+2
02EF C4         106            swap a
02F0 540F       107            anl a, #0xf
02F2 93         108            movc a, @a+dptr
02F3 120273     109            lcall putchar
02F6 E53A       110            mov a, bcd+2
02F8 540F       111            anl a, #0xf
02FA 93         112            movc a, @a+dptr
02FB 120273     113            lcall putchar
02FE            114            
02FE E539       115            mov a, bcd+1
0300 C4         116            swap a
0301 540F       117            anl a, #0xf
0303 93         118            movc a, @a+dptr
0304 120273     119            lcall putchar
0307 E539       120            mov a, bcd+1
0309 540F       121            anl a, #0xf
030B 93         122            movc a, @a+dptr
030C 120273     123            lcall putchar
030F            124   
030F            125   
030F E538       126            mov a, bcd+0
0311 C4         127            swap a
0312 540F       128            anl a, #0xf
0314 93         129            movc a, @a+dptr
0315 120273     130            lcall putchar
0318 E538       131            mov a, bcd+0
031A 540F       132            anl a, #0xf
031C 93         133            movc a, @a+dptr
031D 120273     134            lcall putchar
0320            135            
0320 740D       136            mov a, #'\r'
0322 120273     137            lcall putchar
0325 740A       138            mov a, #'\n'
0327 120273     139            lcall putchar   
032A 22         140            ret
032B            141            
032B            142   SendString:
032B E4         143       clr a
032C 93         144       movc a, @a+dptr
032D 6006       145       jz SendString_L1
032F 120273     146       lcall putchar
0332 A3         147       inc dptr
0333 80F6       148       sjmp SendString  
0335            149   SendString_L1:
0335 22         150            ret
0336            151   
0336            152   Wait10us:
0336 7812       153       mov R0, #18
0338 D8FE       154       djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
033A 22         155            ret
033B            156   
033B 0D0A5038   157   InitialMessage: db '\r\nP89LPC9351 ADC decimation example.\r\n', 0
     394C5043
     39333531
     20414443
     20646563
     696D6174
     696F6E20
     6578616D
     706C652E
     0D0A00
0362            158            
0362            159   MainProgram:
0362 75817F     160       mov SP, #0x7F
0365 120290     161            lcall InitSerialPort
0368 1202A6     162            lcall InitADC
036B            163   
036B 120283     164            lcall Wait1S ; Wait a bit so PUTTy has a chance to start
036E 90033B     165            mov dptr, #InitialMessage
0371 12032B     166            lcall SendString
0374            167   
0374            168   forever_loop:
0374            169            ; Take 256 (4^4) consecutive measurements of ADC0 channel 0 at about 10 us intervals and accumulate in x
0374 753000     170            mov x+0, #low (0 % 0x10000) 
0377 753100     170            mov x+1, #high(0 % 0x10000) 
037A 753200     170            mov x+2, #low (0 / 0x10000) 
037D 753300     170            mov x+3, #high(0 / 0x10000) 
0380 85C530     171       mov x+0, AD0DAT0
0383 7FFF       172            mov R7, #255
0385 120336     173       lcall Wait10us
0388            174   accumulate_loop:
0388 85C534     175       mov y+0, AD0DAT0
038B 753500     176       mov y+1, #0
038E 753600     177       mov y+2, #0
0391 753700     178       mov y+3, #0
0394 1200C8     179       lcall add32
0397 120336     180       lcall Wait10us
039A DFEC       181            djnz R7, accumulate_loop
039C            182            
039C            183            ; Now divide by 16 (2^4)
039C 753410     184            mov y+0, #low (16 % 0x10000) 
039F 753500     184            mov y+1, #high(16 % 0x10000) 
03A2 753600     184            mov y+2, #low (16 / 0x10000) 
03A5 753700     184            mov y+3, #high(16 / 0x10000) 
03A8 12020A     185            lcall div32
03AB            186            ; x has now the 12-bit representation of the temperature
03AB            187            
03AB            188            ; Convert to temperature (C)
03AB 7534E8     189            mov y+0, #low (33000 % 0x10000) 
03AE 753580     189            mov y+1, #high(33000 % 0x10000) 
03B1 753600     189            mov y+2, #low (33000 / 0x10000) 
03B4 753700     189            mov y+3, #high(33000 / 0x10000)  ; Vref is 3.3V
03B7 12017D     190            lcall mul32
03BA 7534FF     191            mov y+0, #low (((1<<12)-1) % 0x10000) 
03BD 75350F     191            mov y+1, #high(((1<<12)-1) % 0x10000) 
03C0 753600     191            mov y+2, #low (((1<<12)-1) / 0x10000) 
03C3 753700     191            mov y+3, #high(((1<<12)-1) / 0x10000)  ; 2^12-1
03C6 12020A     192            lcall div32
03C9 7534B3     193            mov y+0, #low (179 % 0x10000) 
03CC 753500     193            mov y+1, #high(179 % 0x10000) 
03CF 753600     193            mov y+2, #low (179 / 0x10000) 
03D2 753700     193            mov y+3, #high(179 / 0x10000) 
03D5 1200E9     194            lcall sub32
03D8            195            
03D8 120003     196            lcall hex2bcd
03DB            197            
03DB 1202D9     198            lcall SendTemp ; Send to PUTTy, with 2 decimal digits to show that it actually works
03DE 120283     199            lcall Wait1S
03E1            200   
03E1 8091       201            sjmp forever_loop
03E3            202   end
