0000              1   ; LPC9351_Receiver.asm:  This program implements a simple serial port
0000              2   ; communication protocol to program, verify, and read SPI flash memories.  Since
0000              3   ; the program was developed to store wav audio files, it also allows 
0000              4   ; for the playback of said audio.  It is assumed that the wav sampling rate is
0000              5   ; 22050Hz, 8-bit, mono.
0000              6   ;
0000              7   ; Copyright (C) 2012-2019  Jesus Calvino-Fraga, jesusc (at) ece.ubc.ca
0000              8   ; 
0000              9   ; This program is free software; you can redistribute it and/or modify it
0000             10   ; under the terms of the GNU General Public License as published by the
0000             11   ; Free Software Foundation; either version 2, or (at your option) any
0000             12   ; later version.
0000             13   ; 
0000             14   ; This program is distributed in the hope that it will be useful,
0000             15   ; but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             16   ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0000             17   ; GNU General Public License for more details.
0000             18   ; 
0000             19   ; You should have received a copy of the GNU General Public License
0000             20   ; along with this program; if not, write to the Free Software
0000             21   ; Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
0000             22   ; 
0000             23   ; Connections:
0000             24   ; 
0000             25   ; P89LPC9351  SPI_FLASH
0000             26   ; P2.5        Pin 6 (SPI_CLK)
0000             27   ; P2.2        Pin 5 (MOSI)
0000             28   ; P2.3        Pin 2 (MISO)
0000             29   ; P2.4        Pin 1 (CS/)
0000             30   ; GND         Pin 4
0000             31   ; 3.3V        Pins 3, 7, 8
0000             32   ;
0000             33   ; P0.4 is the DAC output which should be connected to the input of an amplifier (LM386 or similar)
0000             34   
                 36   $LIST
0000             38   
0000             39   
0000             40   CLK         EQU 14746000  ; Microcontroller system clock frequency in Hz
0000             41   CCU_RATE    EQU 22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             42   CCU_RELOAD  EQU ((65536-((CLK/(2*CCU_RATE)))))
0000             43   BAUD        EQU 115200
0000             44   BRVAL       EQU ((CLK/BAUD)-16)
0000             45   
0000             46   FLASH_CE    EQU P2.4
0000             47   
0000             48   ; Commands supported by the SPI flash memory according to the datasheet
0000             49   WRITE_ENABLE     EQU 0x06  ; Address:0 Dummy:0 Num:0
0000             50   WRITE_DISABLE    EQU 0x04  ; Address:0 Dummy:0 Num:0
0000             51   READ_STATUS      EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
0000             52   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             53   READ_SILICON_ID  EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
0000             54   FAST_READ        EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
0000             55   WRITE_STATUS     EQU 0x01  ; Address:0 Dummy:0 Num:1
0000             56   WRITE_BYTES      EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
0000             57   ERASE_ALL        EQU 0xc7  ; Address:0 Dummy:0 Num:0
0000             58   ERASE_BLOCK      EQU 0xd8  ; Address:3 Dummy:0 Num:0
0000             59   READ_DEVICE_ID   EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite
0000             60   
0000             61   
0000             62   number_off_set EQU 16040 ;the distance between each number
0000             63   
0030             64   dseg at 30H
0030             65            w:   ds 3 ; 24-bit play counter.  Decremented in CCU ISR.
0033             66            number: ds 1;
0034             67            x: ds 4;
0038             68            y: ds 4;
003C             69            bcd: ds 5;
0041             70            digits: ds 1;
0042             71            tenth: ds 1;
0043             72            hundreds: ds 1;
0044             73   
0000             74   BSEG
0000             75            mf: dbit 1
0001             76   
0000             77   cseg
0000             78   
0000             79   org 0x0000 ; Reset vector
0000 0205A5      80       ljmp MainProgram
0003             81   
0003             82   org 0x0003 ; External interrupt 0 vector (not used in this code)
0003 32          83            reti
0004             84   
000B             85   org 0x000B ; Timer/Counter 0 overflow interrupt vector (not used in this code)
000B 32          86            reti
000C             87   
0013             88   org 0x0013 ; External interrupt 1 vector (not used in this code)
0013 32          89            reti
0014             90   
001B             91   org 0x001B ; Timer/Counter 1 overflow interrupt vector (not used in this code
001B 32          92            reti
001C             93   
0023             94   org 0x0023 ; Serial port receive/transmit interrupt vector (not used in this code)
0023 32          95            reti
0024             96   
005B             97   org 0x005b ; CCU interrupt vector.  Used in this code to replay the wave file.
005B 0202E5      98            ljmp CCU_ISR
005E             99   
                 -1   $include(math32.inc)
                546   $LIST
02CE            101   ;---------------------------------;
02CE            102   ; Routine to initialize the CCU.  ;
02CE            103   ; We are using the CCU timer in a ;
02CE            104   ; manner similar to the timer 2   ;
02CE            105   ; available in other 8051s        ;
02CE            106   ;---------------------------------;
02CE            107   CCU_Init:
02CE 75CDFE     108            mov TH2, #high(CCU_RELOAD)
02D1 75CCB2     109            mov TL2, #low(CCU_RELOAD)
02D4 75CFFE     110            mov TOR2H, #high(CCU_RELOAD)
02D7 75CEB2     111            mov TOR2L, #low(CCU_RELOAD)
02DA 75F980     112            mov TCR21, #10000000b ; Latch the reload value
02DD 75C980     113            mov TICR2, #10000000b ; Enable CCU Timer Overflow Interrupt
02E0 D2EC       114            setb ECCU ; Enable CCU interrupt
02E2 D2C8       115            setb TMOD20 ; Start CCU timer
02E4 22         116            ret
02E5            117   
02E5            118   ;---------------------------------;
02E5            119   ; ISR for CCU.  Used to playback  ;
02E5            120   ; the WAV file stored in the SPI  ;
02E5            121   ; flash memory.                   ;
02E5            122   ;---------------------------------;
02E5            123   CCU_ISR:
02E5 75E900     124            mov TIFR2, #0 ; Clear CCU Timer Overflow Interrupt Flag bit. Actually, it clears all the bits!
02E8 D2A6       125            setb P2.6 ; To check the interrupt rate with oscilloscope.//empty??
02EA            126            
02EA            127            ; The registers used in the ISR must be saved in the stack
02EA C0E0       128            push acc
02EC C0D0       129            push psw
02EE            130            
02EE            131            ; Check if the play counter is zero.  If so, stop playing sound.
02EE E530       132            mov a, w+0
02F0 4531       133            orl a, w+1
02F2 4532       134            orl a, w+2
02F4 6015       135            jz stop_playing
02F6            136            
02F6            137            ; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
02F6 74FF       138            mov a, #0xff
02F8 1530       139            dec w+0
02FA B53007     140            cjne a, w+0, keep_playing ;ff is negative one
02FD 1531       141            dec w+1
02FF B53102     142            cjne a, w+1, keep_playing
0302 1532       143            dec w+2
0304            144            
0304            145   keep_playing:
0304            146   
0304 12037D     147            lcall Send_SPI ; Read the next byte from the SPI Flash...
0307 F5F5       148            mov AD1DAT3, a ; and send it to the DAC ; !!a register that directly send value to speaker
0309            149            
0309 8004       150            sjmp CCU_ISR_Done
030B            151   
030B            152   stop_playing:
030B C2C8       153            clr TMOD20 ; Stop CCU timer
030D D2A4       154            setb FLASH_CE  ; Disable SPI Flash
030F            155   
030F            156   CCU_ISR_Done:    
030F D0D0       157            pop psw
0311 D0E0       158            pop acc
0313 C2A6       159            clr P2.6
0315 32         160            reti
0316            161   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;every thing from this point on is the interface with computer
0316            162   ;---------------------------------;
0316            163   ; Initial configuration of ports. ;
0316            164   ; After reset the default for the ;
0316            165   ; pins is 'Open Drain'.  This     ;
0316            166   ; routine changes them pins to    ;
0316            167   ; Quasi-bidirectional like in the ;
0316            168   ; original 8051.                  ;
0316            169   ; Notice that P1.2 and P1.3 are   ;
0316            170   ; always 'Open Drain'. If those   ;
0316            171   ; pins are to be used as output   ;
0316            172   ; they need a pull-up resistor.   ;
0316            173   ;---------------------------------;
0316            174   Ports_Init:
0316            175       ; Configure all the ports in bidirectional mode:
0316 758400     176       mov P0M1, #00H ;00H stand for all port 0 mode, P0M1 and P0M2 stand for mode 12 
0319 758500     177       mov P0M2, #00H
031C 759100     178       mov P1M1, #00H
031F 759200     179       mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
0322 75A400     180       mov P2M1, #00H
0325 75A500     181       mov P2M2, #00H
0328 75B100     182       mov P3M1, #00H
032B 75B200     183       mov P3M2, #00H
032E 22         184            ret
032F            185   
032F            186   ;---------------------------------;
032F            187   ; Sends a byte via serial port    ;
032F            188   ;---------------------------------;
032F            189   putchar:
032F 109902     190            jbc     TI,putchar_L1
0332 80FB       191            sjmp putchar
0334            192   putchar_L1:
0334 F599       193            mov     SBUF,a
0336 22         194            ret
0337            195   
0337            196   ;---------------------------------;
0337            197   ; Receive a byte from serial port ;
0337            198   ;---------------------------------;
0337            199   getchar:
0337 109802     200            jbc     RI,getchar_L1
033A 80FB       201            sjmp getchar
033C            202   getchar_L1:
033C E599       203            mov     a,SBUF
033E 22         204            ret
033F            205   
033F            206   ;---------------------------------;
033F            207   ; Initialize the serial port      ;
033F            208   ;---------------------------------;
033F            209   InitSerialPort:
033F 75BD00     210            mov     BRGCON,#0x00
0342 75BF00     211            mov     BRGR1,#high(BRVAL)
0345 75BE70     212            mov     BRGR0,#low(BRVAL)
0348 75BD03     213            mov     BRGCON,#0x03 ; Turn-on the baud rate generator
034B 759852     214            mov     SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
034E            215            ; Make sure that TXD(P1.0) and RXD(P1.1) are configured as bidrectional I/O
034E 5391FC     216            anl     P1M1,#11111100B
0351 5392FC     217            anl     P1M2,#11111100B
0354 22         218            ret
0355            219   
0355            220   ;---------------------------------;
0355            221   ; Initialize ADC1/DAC1 as DAC1.   ;
0355            222   ; Warning, the ADC1/DAC1 can work ;
0355            223   ; only as ADC or DAC, not both.   ;
0355            224   ; The P89LPC9351 has two ADC/DAC  ;
0355            225   ; interfaces.  One can be used as ;
0355            226   ; ADC and the other can be used   ;
0355            227   ; as DAC.  Also configures the    ;
0355            228   ; pin associated with the DAC, in ;
0355            229   ; this case P0.4 as 'Open Drain'. ;
0355            230   ;---------------------------------;
0355            231   InitDAC:
0355            232       ; Configure pin P0.4 (DAC1 output pin) as open drain
0355 438410     233            orl     P0M1,   #00010000B
0358 438510     234            orl     P0M2,   #00010000B
035B 75A128     235       mov ADMODB, #00101000B ; Select main clock/2 for ADC/DAC.  Also enable DAC1 output (Table 25 of reference manual)
035E 759704     236            mov     ADCON1, #00000100B ; Enable the converter
0361 75F580     237            mov AD1DAT3, #0x80     ; Start value is 3.3V/2 (zero reference for AC WAV file)
0364 22         238            ret
0365            239   
0365            240   ;---------------------------------;
0365            241   ; Change the internal RC osc. clk ;
0365            242   ; from 7.373MHz to 14.746MHz.     ;
0365            243   ;---------------------------------;
0365            244   Double_Clk:
0365 90FFDE     245       mov dptr, #CLKCON
0368 E0         246       movx a, @dptr
0369 4408       247       orl a, #00001000B ; double the clock speed to 14.746MHz
036B F0         248       movx @dptr,a
036C 22         249            ret
036D            250   
036D            251   ;---------------------------------;
036D            252   ; Initialize the SPI interface    ;
036D            253   ; and the pins associated to SPI. ;
036D            254   ;---------------------------------;
036D            255   Init_SPI:
036D            256            ; Configure MOSI (P2.2), CS* (P2.4), and SPICLK (P2.5) as push-pull outputs (see table 42, page 51)
036D 53A4CB     257            anl P2M1, #low(not(00110100B))
0370 43A534     258            orl P2M2, #00110100B
0373            259            ; Configure MISO (P2.3) as input (see table 42, page 51)
0373 43A408     260            orl P2M1, #00001000B
0376 53A5F7     261            anl P2M2, #low(not(00001000B)) 
0379            262            ; Configure SPI
0379 75E2D0     263            mov SPCTL, #11010000B ; Ignore /SS, Enable SPI, DORD=0, Master=1, CPOL=0, CPHA=0, clk/4
037C 22         264            ret
037D            265   
037D            266   ;---------------------------------;
037D            267   ; Sends AND receives a byte via   ;
037D            268   ; SPI.                            ;
037D            269   ;---------------------------------;
037D            270   Send_SPI:
037D F5E3       271            mov SPDAT, a
037F            272   Send_SPI_1:
037F E5E1       273            mov a, SPSTAT 
0381 30E7FB     274            jnb acc.7, Send_SPI_1 ; Check SPI Transfer Completion Flag
0384 F5E1       275            mov SPSTAT, a ; Clear SPI Transfer Completion Flag
0386 E5E3       276            mov a, SPDAT ; return received byte via accumulator
0388 22         277            ret
0389            278   
0389            279   ;---------------------------------;
0389            280   ; SPI flash 'write enable'        ;
0389            281   ; instruction.                    ;
0389            282   ;---------------------------------;
0389            283   Enable_Write:
0389 C2A4       284            clr FLASH_CE
038B 7406       285            mov a, #WRITE_ENABLE
038D 12037D     286            lcall Send_SPI
0390 D2A4       287            setb FLASH_CE
0392 22         288            ret
0393            289   
0393            290   ;---------------------------------;
0393            291   ; This function checks the 'write ;
0393            292   ; in progress' bit of the SPI     ;
0393            293   ; flash memory.                   ;
0393            294   ;---------------------------------;
0393            295   Check_WIP:
0393 C2A4       296            clr FLASH_CE
0395 7405       297            mov a, #READ_STATUS
0397 12037D     298            lcall Send_SPI
039A 7455       299            mov a, #0x55
039C 12037D     300            lcall Send_SPI
039F D2A4       301            setb FLASH_CE
03A1 20E0EF     302            jb acc.0, Check_WIP ;  Check the Write in Progress bit
03A4 22         303            ret
03A5            304            
03A5            305   ;---------------------------------;
03A5            306   ; CRC-CCITT (XModem) Polynomial:  ;
03A5            307   ; x^16 + x^12 + x^5 + 1 (0x1021)  ;
03A5            308   ; CRC in [R7,R6].                 ;
03A5            309   ; Converted to a macro to remove  ;
03A5            310   ; the overhead of 'lcall' and     ;
03A5            311   ; 'ret' instructions, since this  ;
03A5            312   ; 'routine' may be executed over  ;
03A5            313   ; 4 million times!                ;
03A5            314   ;---------------------------------;
03A5            315   ;crc16:
                316   crc16 mac
                317   	xrl	a, r7			; XOR high of CRC with byte
                318   	mov r0, a			; Save for later use
                319   	mov	dptr, #CRC16_TH ; dptr points to table high
                320   	movc a, @a+dptr		; Get high part from table
                321   	xrl	a, r6			; XOR With low byte of CRC
                322   	mov	r7, a			; Store to high byte of CRC
                323   	mov a, r0			; Retrieve saved accumulator
                324   	mov	dptr, #CRC16_TL	; dptr points to table low	
                325   	movc a, @a+dptr		; Get Low from table
                326   	mov	r6, a			; Store to low byte of CRC
                327   	;ret
                328   endmac
03A5            329   
03A5            330   ;---------------------------------;
03A5            331   ; High constants for CRC-CCITT    ;
03A5            332   ; (XModem) Polynomial:            ;
03A5            333   ; x^16 + x^12 + x^5 + 1 (0x1021)  ;
03A5            334   ;---------------------------------;
03A5            335   CRC16_TH:
03A5 00102030   336            db      000h, 010h, 020h, 030h, 040h, 050h, 060h, 070h
     40506070
03AD 8191A1B1   337            db      081h, 091h, 0A1h, 0B1h, 0C1h, 0D1h, 0E1h, 0F1h
     C1D1E1F1
03B5 12023222   338            db      012h, 002h, 032h, 022h, 052h, 042h, 072h, 062h
     52427262
03BD 9383B3A3   339            db      093h, 083h, 0B3h, 0A3h, 0D3h, 0C3h, 0F3h, 0E3h
     D3C3F3E3
03C5 24340414   340            db      024h, 034h, 004h, 014h, 064h, 074h, 044h, 054h
     64744454
03CD A5B58595   341            db      0A5h, 0B5h, 085h, 095h, 0E5h, 0F5h, 0C5h, 0D5h
     E5F5C5D5
03D5 36261606   342            db      036h, 026h, 016h, 006h, 076h, 066h, 056h, 046h
     76665646
03DD B7A79787   343            db      0B7h, 0A7h, 097h, 087h, 0F7h, 0E7h, 0D7h, 0C7h
     F7E7D7C7
03E5 48586878   344            db      048h, 058h, 068h, 078h, 008h, 018h, 028h, 038h
     08182838
03ED C9D9E9F9   345            db      0C9h, 0D9h, 0E9h, 0F9h, 089h, 099h, 0A9h, 0B9h
     8999A9B9
03F5 5A4A7A6A   346            db      05Ah, 04Ah, 07Ah, 06Ah, 01Ah, 00Ah, 03Ah, 02Ah
     1A0A3A2A
03FD DBCBFBEB   347            db      0DBh, 0CBh, 0FBh, 0EBh, 09Bh, 08Bh, 0BBh, 0ABh
     9B8BBBAB
0405 6C7C4C5C   348            db      06Ch, 07Ch, 04Ch, 05Ch, 02Ch, 03Ch, 00Ch, 01Ch
     2C3C0C1C
040D EDFDCDDD   349            db      0EDh, 0FDh, 0CDh, 0DDh, 0ADh, 0BDh, 08Dh, 09Dh
     ADBD8D9D
0415 7E6E5E4E   350            db      07Eh, 06Eh, 05Eh, 04Eh, 03Eh, 02Eh, 01Eh, 00Eh
     3E2E1E0E
041D FFEFDFCF   351            db      0FFh, 0EFh, 0DFh, 0CFh, 0BFh, 0AFh, 09Fh, 08Fh
     BFAF9F8F
0425 9181B1A1   352            db      091h, 081h, 0B1h, 0A1h, 0D1h, 0C1h, 0F1h, 0E1h
     D1C1F1E1
042D 10003020   353            db      010h, 000h, 030h, 020h, 050h, 040h, 070h, 060h
     50407060
0435 8393A3B3   354            db      083h, 093h, 0A3h, 0B3h, 0C3h, 0D3h, 0E3h, 0F3h
     C3D3E3F3
043D 02122232   355            db      002h, 012h, 022h, 032h, 042h, 052h, 062h, 072h
     42526272
0445 B5A59585   356            db      0B5h, 0A5h, 095h, 085h, 0F5h, 0E5h, 0D5h, 0C5h
     F5E5D5C5
044D 34241404   357            db      034h, 024h, 014h, 004h, 074h, 064h, 054h, 044h
     74645444
0455 A7B78797   358            db      0A7h, 0B7h, 087h, 097h, 0E7h, 0F7h, 0C7h, 0D7h
     E7F7C7D7
045D 26360616   359            db      026h, 036h, 006h, 016h, 066h, 076h, 046h, 056h
     66764656
0465 D9C9F9E9   360            db      0D9h, 0C9h, 0F9h, 0E9h, 099h, 089h, 0B9h, 0A9h
     9989B9A9
046D 58487868   361            db      058h, 048h, 078h, 068h, 018h, 008h, 038h, 028h
     18083828
0475 CBDBEBFB   362            db      0CBh, 0DBh, 0EBh, 0FBh, 08Bh, 09Bh, 0ABh, 0BBh
     8B9BABBB
047D 4A5A6A7A   363            db      04Ah, 05Ah, 06Ah, 07Ah, 00Ah, 01Ah, 02Ah, 03Ah
     0A1A2A3A
0485 FDEDDDCD   364            db      0FDh, 0EDh, 0DDh, 0CDh, 0BDh, 0ADh, 09Dh, 08Dh
     BDAD9D8D
048D 7C6C5C4C   365            db      07Ch, 06Ch, 05Ch, 04Ch, 03Ch, 02Ch, 01Ch, 00Ch
     3C2C1C0C
0495 EFFFCFDF   366            db      0EFh, 0FFh, 0CFh, 0DFh, 0AFh, 0BFh, 08Fh, 09Fh
     AFBF8F9F
049D 6E7E4E5E   367            db      06Eh, 07Eh, 04Eh, 05Eh, 02Eh, 03Eh, 00Eh, 01Eh
     2E3E0E1E
04A5            368   
04A5            369   ;---------------------------------;
04A5            370   ; Low constants for CRC-CCITT     ;
04A5            371   ; (XModem) Polynomial:            ;
04A5            372   ; x^16 + x^12 + x^5 + 1 (0x1021)  ;
04A5            373   ;---------------------------------;
04A5            374   CRC16_TL:
04A5 00214263   375            db      000h, 021h, 042h, 063h, 084h, 0A5h, 0C6h, 0E7h
     84A5C6E7
04AD 08294A6B   376            db      008h, 029h, 04Ah, 06Bh, 08Ch, 0ADh, 0CEh, 0EFh
     8CADCEEF
04B5 31107352   377            db      031h, 010h, 073h, 052h, 0B5h, 094h, 0F7h, 0D6h
     B594F7D6
04BD 39187B5A   378            db      039h, 018h, 07Bh, 05Ah, 0BDh, 09Ch, 0FFh, 0DEh
     BD9CFFDE
04C5 62432001   379            db      062h, 043h, 020h, 001h, 0E6h, 0C7h, 0A4h, 085h
     E6C7A485
04CD 6A4B2809   380            db      06Ah, 04Bh, 028h, 009h, 0EEh, 0CFh, 0ACh, 08Dh
     EECFAC8D
04D5 53721130   381            db      053h, 072h, 011h, 030h, 0D7h, 0F6h, 095h, 0B4h
     D7F695B4
04DD 5B7A1938   382            db      05Bh, 07Ah, 019h, 038h, 0DFh, 0FEh, 09Dh, 0BCh
     DFFE9DBC
04E5 C4E586A7   383            db      0C4h, 0E5h, 086h, 0A7h, 040h, 061h, 002h, 023h
     40610223
04ED CCED8EAF   384            db      0CCh, 0EDh, 08Eh, 0AFh, 048h, 069h, 00Ah, 02Bh
     48690A2B
04F5 F5D4B796   385            db      0F5h, 0D4h, 0B7h, 096h, 071h, 050h, 033h, 012h
     71503312
04FD FDDCBF9E   386            db      0FDh, 0DCh, 0BFh, 09Eh, 079h, 058h, 03Bh, 01Ah
     79583B1A
0505 A687E4C5   387            db      0A6h, 087h, 0E4h, 0C5h, 022h, 003h, 060h, 041h
     22036041
050D AE8FECCD   388            db      0AEh, 08Fh, 0ECh, 0CDh, 02Ah, 00Bh, 068h, 049h
     2A0B6849
0515 97B6D5F4   389            db      097h, 0B6h, 0D5h, 0F4h, 013h, 032h, 051h, 070h
     13325170
051D 9FBEDDFC   390            db      09Fh, 0BEh, 0DDh, 0FCh, 01Bh, 03Ah, 059h, 078h
     1B3A5978
0525 88A9CAEB   391            db      088h, 0A9h, 0CAh, 0EBh, 00Ch, 02Dh, 04Eh, 06Fh
     0C2D4E6F
052D 80A1C2E3   392            db      080h, 0A1h, 0C2h, 0E3h, 004h, 025h, 046h, 067h
     04254667
0535 B998FBDA   393            db      0B9h, 098h, 0FBh, 0DAh, 03Dh, 01Ch, 07Fh, 05Eh
     3D1C7F5E
053D B190F3D2   394            db      0B1h, 090h, 0F3h, 0D2h, 035h, 014h, 077h, 056h
     35147756
0545 EACBA889   395            db      0EAh, 0CBh, 0A8h, 089h, 06Eh, 04Fh, 02Ch, 00Dh
     6E4F2C0D
054D E2C3A081   396            db      0E2h, 0C3h, 0A0h, 081h, 066h, 047h, 024h, 005h
     66472405
0555 DBFA99B8   397            db      0DBh, 0FAh, 099h, 0B8h, 05Fh, 07Eh, 01Dh, 03Ch
     5F7E1D3C
055D D3F291B0   398            db      0D3h, 0F2h, 091h, 0B0h, 057h, 076h, 015h, 034h
     57761534
0565 4C6D0E2F   399            db      04Ch, 06Dh, 00Eh, 02Fh, 0C8h, 0E9h, 08Ah, 0ABh
     C8E98AAB
056D 44650627   400            db      044h, 065h, 006h, 027h, 0C0h, 0E1h, 082h, 0A3h
     C0E182A3
0575 7D5C3F1E   401            db      07Dh, 05Ch, 03Fh, 01Eh, 0F9h, 0D8h, 0BBh, 09Ah
     F9D8BB9A
057D 75543716   402            db      075h, 054h, 037h, 016h, 0F1h, 0D0h, 0B3h, 092h
     F1D0B392
0585 2E0F6C4D   403            db      02Eh, 00Fh, 06Ch, 04Dh, 0AAh, 08Bh, 0E8h, 0C9h
     AA8BE8C9
058D 26076445   404            db      026h, 007h, 064h, 045h, 0A2h, 083h, 0E0h, 0C1h
     A283E0C1
0595 1F3E5D7C   405            db      01Fh, 03Eh, 05Dh, 07Ch, 09Bh, 0BAh, 0D9h, 0F8h
     9BBAD9F8
059D 17365574   406            db      017h, 036h, 055h, 074h, 093h, 0B2h, 0D1h, 0F0h
     93B2D1F0
05A5            407   
05A5            408   ;---------------------------------;
05A5            409   ; Main program. Includes hardware ;
05A5            410   ; initialization and 'forever'    ;
05A5            411   ; loop.                           ;
05A5            412   ;---------------------------------;
05A5            413   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;every thing above this is the interface with computer
05A5            414   MainProgram:
05A5 75817F     415       mov SP, #0x7F
05A8            416       
05A8 120316     417       lcall Ports_Init ; Default all pins as bidirectional I/O. See Table 42.
05AB 120365     418       lcall Double_Clk
05AE 12033F     419            lcall InitSerialPort ;!!
05B1 120355     420            lcall InitDAC ; Call after 'Ports_Init;!!
05B4 1202CE     421            lcall CCU_Init
05B7 12036D     422            lcall Init_SPI
05BA            423            
05BA C2C8       424            clr TMOD20 ; Stop CCU timer
05BC D2AF       425            setb EA ; Enable global interrupts.
05BE            426            
05BE            427   forever_loop: ;if pressed reset everyting
05BE 20980C     428            jb RI, serial_get
05C1 20B0FA     429            jb P3.0, forever_loop ; Check if push-button pressed
05C4 30B0FD     430            jnb P3.0, $ ; Wait for push-button release
05C7            431            ; Play the whole memory
05C7            432       
05C7            433       ;mov number, #0x0
05C7 1205E5     434            lcall playnumbers
05CA            435   
05CA 0205BE     436            ljmp forever_loop
05CD            437            
05CD            438   serial_get:
05CD 120337     439            lcall getchar ; Wait for data to arrive
05D0 B423EB     440            cjne a, #'#', forever_loop ; Message format is #n[data] where 'n' is '0' to '9'
05D3 C2C8       441            clr TMOD20 ; Stop the CCU from playing previous request
05D5 D2A4       442            setb FLASH_CE ; Disable SPI Flash       
05D7 120337     443            lcall getchar
05DA            444   
05DA            445   lower_bit: ;extract decimal fr0m 0-9
05DA E53C       446            mov a,bcd+0
05DC 540F       447            ANL A, #0x0f
05DE 1200E7     448            lcall Bcd2hex
05E1 853441     449            mov digits, x+0
05E4 22         450            ret
05E5            451   
05E5            452   ;middle_bit_extract: ;extact decimal from 0-99
05E5            453   
05E5            454   
05E5            455   playnumbers:
05E5 C2C8       456            clr TMOD20 ; Stop the CCU from playing previous request timer 2 control register
05E7 D2A4       457            setb FLASH_CE
05E9            458            
05E9 C2A4       459            clr FLASH_CE ; Enable SPI Flash
05EB 7403       460            mov a, #READ_BYTES
05ED 12037D     461            lcall Send_SPI
05F0            462            ; Set the initial position in memory where to start playing
05F0 7400       463            mov a, #0x00
05F2 12037D     464            lcall Send_SPI
05F5 7400       465            mov a, #0x00
05F7 12037D     466            lcall Send_SPI
05FA 74FF       467            mov a, #0xff
05FC 12037D     468            lcall Send_SPI
05FF            469            ; How many bytes to play? All of them!  Asume 4Mbytes memory
05FF 753200     470            mov w+2, #0x00
0602 75313E     471            mov w+1, #0x3e
0605 7530A4     472            mov w+0, #0xa4
0608            473            
0608 7400       474            mov a, #0x00 ; Request first byte to send to DAC
060A 12037D     475            lcall Send_SPI
060D            476            
060D D2C8       477            setb TMOD20 ; Start playback by enabling CCU timer
060F 22         478            ret
0610            479   ;---------------------------------------------------------       
0610 B43024     480            cjne a, #'0' , Command_0_skip
0613            481   Command_0_start: ; Identify command
0613 C2A4       482            clr FLASH_CE ; Enable SPI Flash         
0615 749F       483            mov a, #READ_DEVICE_ID
0617 12037D     484            lcall Send_SPI  
061A 7455       485            mov a, #0x55
061C 12037D     486            lcall Send_SPI
061F 12032F     487            lcall putchar
0622 7455       488            mov a, #0x55
0624 12037D     489            lcall Send_SPI
0627 12032F     490            lcall putchar
062A 7455       491            mov a, #0x55
062C 12037D     492            lcall Send_SPI
062F 12032F     493            lcall putchar
0632 D2A4       494            setb FLASH_CE ; Disable SPI Flash
0634 0205BE     495            ljmp forever_loop       
0637            496   Command_0_skip:
0637            497   
0637            498   ;---------------------------------------------------------       
0637 B43117     499            cjne a, #'1' , Command_1_skip 
063A            500   Command_1_start: ; Erase whole flash (takes a long time)
063A 120389     501            lcall Enable_Write
063D C2A4       502            clr FLASH_CE
063F 74C7       503            mov a, #ERASE_ALL
0641 12037D     504            lcall Send_SPI
0644 D2A4       505            setb FLASH_CE
0646 120393     506            lcall Check_WIP
0649 7401       507            mov a, #01 ; Send 'I am done' reply
064B 12032F     508            lcall putchar           
064E 0205BE     509            ljmp forever_loop       
0651            510   Command_1_skip:
0651            511   
0651            512   ;---------------------------------------------------------       
0651 B43235     513            cjne a, #'2' , Command_2_skip 
0654            514   Command_2_start: ; Load flash page (256 bytes or less)
0654 120389     515            lcall Enable_Write
0657 C2A4       516            clr FLASH_CE
0659 7402       517            mov a, #WRITE_BYTES
065B 12037D     518            lcall Send_SPI
065E 120337     519            lcall getchar ; Address bits 16 to 23
0661 12037D     520            lcall Send_SPI
0664 120337     521            lcall getchar ; Address bits 8 to 15
0667 12037D     522            lcall Send_SPI
066A 120337     523            lcall getchar ; Address bits 0 to 7
066D 12037D     524            lcall Send_SPI
0670 120337     525            lcall getchar ; Number of bytes to write (0 means 256 bytes)
0673 F8         526            mov r0, a
0674            527   Command_2_loop:
0674 120337     528            lcall getchar
0677 12037D     529            lcall Send_SPI
067A D8F8       530            djnz r0, Command_2_loop
067C D2A4       531            setb FLASH_CE
067E 120393     532            lcall Check_WIP
0681 7401       533            mov a, #01 ; Send 'I am done' reply
0683 12032F     534            lcall putchar           
0686 0205BE     535            ljmp forever_loop       
0689            536   Command_2_skip:
0689            537   
0689            538   ;---------------------------------------------------------       
0689 B4332C     539            cjne a, #'3' , Command_3_skip 
068C            540   Command_3_start: ; Read flash bytes (256 bytes or less)
068C C2A4       541            clr FLASH_CE
068E 7403       542            mov a, #READ_BYTES
0690 12037D     543            lcall Send_SPI
0693 120337     544            lcall getchar ; Address bits 16 to 23
0696 12037D     545            lcall Send_SPI
0699 120337     546            lcall getchar ; Address bits 8 to 15
069C 12037D     547            lcall Send_SPI
069F 120337     548            lcall getchar ; Address bits 0 to 7
06A2 12037D     549            lcall Send_SPI
06A5 120337     550            lcall getchar ; Number of bytes to read and send back (0 means 256 bytes)
06A8 F8         551            mov r0, a
06A9            552   
06A9            553   Command_3_loop:
06A9 7455       554            mov a, #0x55
06AB 12037D     555            lcall Send_SPI
06AE 12032F     556            lcall putchar
06B1 D8F6       557            djnz r0, Command_3_loop
06B3 D2A4       558            setb FLASH_CE   
06B5 0205BE     559            ljmp forever_loop       
06B8            560   Command_3_skip:
06B8            561   
06B8            562   ;---------------------------------------------------------       
06B8 B43436     563            cjne a, #'4' , Command_4_skip 
06BB            564   Command_4_start: ; Playback a portion of the stored wav file
06BB C2C8       565            clr TMOD20 ; Stop the CCU from playing previous request
06BD D2A4       566            setb FLASH_CE
06BF            567            
06BF C2A4       568            clr FLASH_CE ; Enable SPI Flash
06C1 7403       569            mov a, #READ_BYTES
06C3 12037D     570            lcall Send_SPI
06C6            571            ; Get the initial position in memory where to start playing
06C6 120337     572            lcall getchar
06C9 12037D     573            lcall Send_SPI
06CC 120337     574            lcall getchar
06CF 12037D     575            lcall Send_SPI
06D2 120337     576            lcall getchar
06D5 12037D     577            lcall Send_SPI
06D8            578            ; Get how many bytes to play
06D8 120337     579            lcall getchar
06DB F532       580            mov w+2, a
06DD 120337     581            lcall getchar
06E0 F531       582            mov w+1, a
06E2 120337     583            lcall getchar
06E5 F530       584            mov w+0, a
06E7            585            
06E7 7400       586            mov a, #0x00 ; Request first byte to send to DAC
06E9 12037D     587            lcall Send_SPI
06EC            588            
06EC D2C8       589            setb TMOD20 ; Start playback by enabling CCU timer
06EE 0205BE     590            ljmp forever_loop       
06F1            591   Command_4_skip:
06F1            592   
06F1            593   ;---------------------------------------------------------       
06F1 B4355C     594            cjne a, #'5' , Command_5_skip 
06F4            595   Command_5_start: ; Calculate and send CRC-16 of ISP flash memory from zero to the 24-bit passed value.
06F4            596            ; Get how many bytes to use to calculate the CRC.  Store in [r5,r4,r3]
06F4 120337     597            lcall getchar
06F7 FD         598            mov r5, a
06F8 120337     599            lcall getchar
06FB FC         600            mov r4, a
06FC 120337     601            lcall getchar
06FF FB         602            mov r3, a
0700            603            
0700            604            ; Since we are using the 'djnz' instruction to check, we need to add one to each byte of the counter.
0700            605            ; A side effect is that the down counter becomes efectively a 23-bit counter, but that is ok
0700            606            ; because the max size of the 25Q32 SPI flash memory is 400000H.
0700 0B         607            inc r3
0701 0C         608            inc r4
0702 0D         609            inc r5
0703            610            
0703            611            ; Initial CRC must be zero.  Using [r7,r6] to store CRC.
0703 E4         612            clr a
0704 FF         613            mov r7, a
0705 FE         614            mov r6, a
0706            615   
0706 C2A4       616            clr FLASH_CE
0708 7403       617            mov a, #READ_BYTES
070A 12037D     618            lcall Send_SPI
070D E4         619            clr a ; Address bits 16 to 23
070E 12037D     620            lcall Send_SPI
0711 E4         621            clr a ; Address bits 8 to 15
0712 12037D     622            lcall Send_SPI
0715 E4         623            clr a ; Address bits 0 to 7
0716 12037D     624            lcall Send_SPI
0719 F5E3       625            mov SPDAT, a ; Request first byte from SPI flash
071B 8019       626            sjmp Command_5_loop_start
071D            627   
071D            628   Command_5_loop:
071D E5E1       629            mov a, SPSTAT 
071F 30E7FB     630            jnb acc.7, Command_5_loop       ; Check SPI Transfer Completion Flag
0722 F5E1       631            mov SPSTAT, a                           ; Clear SPI Transfer Completion Flag    
0724 E5E3       632            mov a, SPDAT                            ; Save received SPI byte to accumulator
0726 F5E3       633            mov SPDAT, a                            ; Request next byte from SPI flash; while it arrives we calculate the CRC:
0728 6F         634            xrl     a, r7                   ; XOR high of CRC with byte
0729 F8         634            mov r0, a                       ; Save for later use
072A 9003A5     634            mov     dptr, #CRC16_TH ; dptr points to table high
072D 93         634            movc a, @a+dptr                 ; Get high part from table
072E 6E         634            xrl     a, r6                   ; XOR With low byte of CRC
072F FF         634            mov     r7, a                   ; Store to high byte of CRC
0730 E8         634            mov a, r0                       ; Retrieve saved accumulator
0731 9004A5     634            mov     dptr, #CRC16_TL         ; dptr points to table low      
0734 93         634            movc a, @a+dptr                 ; Get Low from table
0735 FE         634            mov     r6, a                   ; Store to low byte of CRC
0736            634            ;ret                                            ; Calculate CRC with new byte
0736            635   Command_5_loop_start:
0736            636            ; Drecrement counter:
0736 DBE5       637            djnz r3, Command_5_loop
0738 DCE3       638            djnz r4, Command_5_loop
073A DDE1       639            djnz r5, Command_5_loop
073C            640   Command_5_loop2:         
073C E5E1       641            mov a, SPSTAT 
073E 30E7FB     642            jnb acc.7, Command_5_loop2      ; Check SPI Transfer Completion Flag
0741 F5E1       643            mov SPSTAT, a                           ; Clear SPI Transfer Completion Flag    
0743 D2A4       644            setb FLASH_CE                           ; Done reading from SPI flash
0745            645            ; Computation of CRC is complete.  Send 16-bit result using the serial port
0745 EF         646            mov a, r7
0746 12032F     647            lcall putchar
0749 EE         648            mov a, r6
074A 12032F     649            lcall putchar
074D            650   
074D 0205BE     651            ljmp forever_loop       
0750            652   Command_5_skip:
0750            653   
0750            654   ;---------------------------------------------------------       
0750 B43635     655            cjne a, #'6' , Command_6_skip 
0753            656   Command_6_start: ; Fill flash page (256 bytes)
0753 120389     657            lcall Enable_Write
0756 C2A4       658            clr FLASH_CE
0758 7402       659            mov a, #WRITE_BYTES
075A 12037D     660            lcall Send_SPI
075D 120337     661            lcall getchar ; Address bits 16 to 23
0760 12037D     662            lcall Send_SPI
0763 120337     663            lcall getchar ; Address bits 8 to 15
0766 12037D     664            lcall Send_SPI
0769 120337     665            lcall getchar ; Address bits 0 to 7
076C 12037D     666            lcall Send_SPI
076F 120337     667            lcall getchar ; Byte to write
0772 F9         668            mov r1, a
0773 7800       669            mov r0, #0 ; 256 bytes
0775            670   Command_6_loop:
0775 E9         671            mov a, r1
0776 12037D     672            lcall Send_SPI
0779 D8FA       673            djnz r0, Command_6_loop
077B D2A4       674            setb FLASH_CE
077D 120393     675            lcall Check_WIP
0780 7401       676            mov a, #01 ; Send 'I am done' reply
0782 12032F     677            lcall putchar           
0785 0205BE     678            ljmp forever_loop       
0788            679   Command_6_skip:
0788            680   
0788 0205BE     681            ljmp forever_loop
078B            682   
078B            683   END
